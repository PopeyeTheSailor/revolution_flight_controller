
FCM_revolution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08006e28  08006e28  00016e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006fc8  08006fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006fd4  08006fd4  00016fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08006fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  8 .bss          000040b0  20000074  20000074  00020074  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004124  20004124  00020074  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 11 .debug_line   0000d9ef  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00030b28  00000000  00000000  0002da93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000060c3  00000000  00000000  0005e5bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c0  00000000  00000000  00064680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e78  00000000  00000000  00065940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00010f02  00000000  00000000  000677b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006d79  00000000  00000000  000786ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0007f433  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004354  00000000  00000000  0007f4b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e10 	.word	0x08006e10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006e10 	.word	0x08006e10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__gedf2>:
 8000a04:	f04f 3cff 	mov.w	ip, #4294967295
 8000a08:	e006      	b.n	8000a18 <__cmpdf2+0x4>
 8000a0a:	bf00      	nop

08000a0c <__ledf2>:
 8000a0c:	f04f 0c01 	mov.w	ip, #1
 8000a10:	e002      	b.n	8000a18 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__cmpdf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2e:	d01b      	beq.n	8000a68 <__cmpdf2+0x54>
 8000a30:	b001      	add	sp, #4
 8000a32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a36:	bf0c      	ite	eq
 8000a38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a3c:	ea91 0f03 	teqne	r1, r3
 8000a40:	bf02      	ittt	eq
 8000a42:	ea90 0f02 	teqeq	r0, r2
 8000a46:	2000      	moveq	r0, #0
 8000a48:	4770      	bxeq	lr
 8000a4a:	f110 0f00 	cmn.w	r0, #0
 8000a4e:	ea91 0f03 	teq	r1, r3
 8000a52:	bf58      	it	pl
 8000a54:	4299      	cmppl	r1, r3
 8000a56:	bf08      	it	eq
 8000a58:	4290      	cmpeq	r0, r2
 8000a5a:	bf2c      	ite	cs
 8000a5c:	17d8      	asrcs	r0, r3, #31
 8000a5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a62:	f040 0001 	orr.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	d102      	bne.n	8000a78 <__cmpdf2+0x64>
 8000a72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a76:	d107      	bne.n	8000a88 <__cmpdf2+0x74>
 8000a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d1d6      	bne.n	8000a30 <__cmpdf2+0x1c>
 8000a82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a86:	d0d3      	beq.n	8000a30 <__cmpdf2+0x1c>
 8000a88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <__aeabi_cdrcmple>:
 8000a90:	4684      	mov	ip, r0
 8000a92:	4610      	mov	r0, r2
 8000a94:	4662      	mov	r2, ip
 8000a96:	468c      	mov	ip, r1
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	e000      	b.n	8000aa0 <__aeabi_cdcmpeq>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdcmpeq>:
 8000aa0:	b501      	push	{r0, lr}
 8000aa2:	f7ff ffb7 	bl	8000a14 <__cmpdf2>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	bf48      	it	mi
 8000aaa:	f110 0f00 	cmnmi.w	r0, #0
 8000aae:	bd01      	pop	{r0, pc}

08000ab0 <__aeabi_dcmpeq>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff fff4 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ab8:	bf0c      	ite	eq
 8000aba:	2001      	moveq	r0, #1
 8000abc:	2000      	movne	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmplt>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffea 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000acc:	bf34      	ite	cc
 8000ace:	2001      	movcc	r0, #1
 8000ad0:	2000      	movcs	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmple>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffe0 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpge>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffce 	bl	8000a90 <__aeabi_cdrcmple>
 8000af4:	bf94      	ite	ls
 8000af6:	2001      	movls	r0, #1
 8000af8:	2000      	movhi	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpgt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffc4 	bl	8000a90 <__aeabi_cdrcmple>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpun>:
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	d102      	bne.n	8000b24 <__aeabi_dcmpun+0x10>
 8000b1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b22:	d10a      	bne.n	8000b3a <__aeabi_dcmpun+0x26>
 8000b24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x20>
 8000b2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_dcmpun+0x26>
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0001 	mov.w	r0, #1
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b97a 	b.w	8000eec <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	468c      	mov	ip, r1
 8000c16:	460d      	mov	r5, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	9e08      	ldr	r6, [sp, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d151      	bne.n	8000cc4 <__udivmoddi4+0xb4>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4617      	mov	r7, r2
 8000c24:	d96d      	bls.n	8000d02 <__udivmoddi4+0xf2>
 8000c26:	fab2 fe82 	clz	lr, r2
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d00b      	beq.n	8000c48 <__udivmoddi4+0x38>
 8000c30:	f1ce 0c20 	rsb	ip, lr, #32
 8000c34:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c3c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c40:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c48:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c4c:	0c25      	lsrs	r5, r4, #16
 8000c4e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c52:	fa1f f987 	uxth.w	r9, r7
 8000c56:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c5a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c5e:	fb08 f309 	mul.w	r3, r8, r9
 8000c62:	42ab      	cmp	r3, r5
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x6c>
 8000c66:	19ed      	adds	r5, r5, r7
 8000c68:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c6c:	f080 8123 	bcs.w	8000eb6 <__udivmoddi4+0x2a6>
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	f240 8120 	bls.w	8000eb6 <__udivmoddi4+0x2a6>
 8000c76:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7a:	443d      	add	r5, r7
 8000c7c:	1aed      	subs	r5, r5, r3
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c84:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c8c:	fb00 f909 	mul.w	r9, r0, r9
 8000c90:	45a1      	cmp	r9, r4
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x98>
 8000c94:	19e4      	adds	r4, r4, r7
 8000c96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9a:	f080 810a 	bcs.w	8000eb2 <__udivmoddi4+0x2a2>
 8000c9e:	45a1      	cmp	r9, r4
 8000ca0:	f240 8107 	bls.w	8000eb2 <__udivmoddi4+0x2a2>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	443c      	add	r4, r7
 8000ca8:	eba4 0409 	sub.w	r4, r4, r9
 8000cac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d061      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cb6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cba:	2300      	movs	r3, #0
 8000cbc:	6034      	str	r4, [r6, #0]
 8000cbe:	6073      	str	r3, [r6, #4]
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0xc8>
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d054      	beq.n	8000d76 <__udivmoddi4+0x166>
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd8:	fab3 f183 	clz	r1, r3
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	f040 808e 	bne.w	8000dfe <__udivmoddi4+0x1ee>
 8000ce2:	42ab      	cmp	r3, r5
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xdc>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80fa 	bhi.w	8000ee0 <__udivmoddi4+0x2d0>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb65 0503 	sbc.w	r5, r5, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	46ac      	mov	ip, r5
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d03f      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cfa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	b912      	cbnz	r2, 8000d0a <__udivmoddi4+0xfa>
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d0a:	fab7 fe87 	clz	lr, r7
 8000d0e:	f1be 0f00 	cmp.w	lr, #0
 8000d12:	d134      	bne.n	8000d7e <__udivmoddi4+0x16e>
 8000d14:	1beb      	subs	r3, r5, r7
 8000d16:	0c3a      	lsrs	r2, r7, #16
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d22:	0c25      	lsrs	r5, r4, #16
 8000d24:	fb02 3318 	mls	r3, r2, r8, r3
 8000d28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d2c:	fb0c f308 	mul.w	r3, ip, r8
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x134>
 8000d34:	19ed      	adds	r5, r5, r7
 8000d36:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x132>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	f200 80d1 	bhi.w	8000ee4 <__udivmoddi4+0x2d4>
 8000d42:	4680      	mov	r8, r0
 8000d44:	1aed      	subs	r5, r5, r3
 8000d46:	b2a3      	uxth	r3, r4
 8000d48:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d4c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d50:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d54:	fb0c fc00 	mul.w	ip, ip, r0
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x15c>
 8000d5c:	19e4      	adds	r4, r4, r7
 8000d5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x15a>
 8000d64:	45a4      	cmp	ip, r4
 8000d66:	f200 80b8 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	eba4 040c 	sub.w	r4, r4, ip
 8000d70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d74:	e79d      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000d76:	4631      	mov	r1, r6
 8000d78:	4630      	mov	r0, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	f1ce 0420 	rsb	r4, lr, #32
 8000d82:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d8a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d8e:	0c3a      	lsrs	r2, r7, #16
 8000d90:	fa25 f404 	lsr.w	r4, r5, r4
 8000d94:	ea48 0803 	orr.w	r8, r8, r3
 8000d98:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d9c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000da0:	fb02 4411 	mls	r4, r2, r1, r4
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dac:	fb01 f30c 	mul.w	r3, r1, ip
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000db6:	d909      	bls.n	8000dcc <__udivmoddi4+0x1bc>
 8000db8:	19ed      	adds	r5, r5, r7
 8000dba:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dbe:	f080 808a 	bcs.w	8000ed6 <__udivmoddi4+0x2c6>
 8000dc2:	42ab      	cmp	r3, r5
 8000dc4:	f240 8087 	bls.w	8000ed6 <__udivmoddi4+0x2c6>
 8000dc8:	3902      	subs	r1, #2
 8000dca:	443d      	add	r5, r7
 8000dcc:	1aeb      	subs	r3, r5, r3
 8000dce:	fa1f f588 	uxth.w	r5, r8
 8000dd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dd6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dda:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dde:	fb00 f30c 	mul.w	r3, r0, ip
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1e6>
 8000de6:	19ed      	adds	r5, r5, r7
 8000de8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dec:	d26f      	bcs.n	8000ece <__udivmoddi4+0x2be>
 8000dee:	42ab      	cmp	r3, r5
 8000df0:	d96d      	bls.n	8000ece <__udivmoddi4+0x2be>
 8000df2:	3802      	subs	r0, #2
 8000df4:	443d      	add	r5, r7
 8000df6:	1aeb      	subs	r3, r5, r3
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	e78f      	b.n	8000d1e <__udivmoddi4+0x10e>
 8000dfe:	f1c1 0720 	rsb	r7, r1, #32
 8000e02:	fa22 f807 	lsr.w	r8, r2, r7
 8000e06:	408b      	lsls	r3, r1
 8000e08:	fa05 f401 	lsl.w	r4, r5, r1
 8000e0c:	ea48 0303 	orr.w	r3, r8, r3
 8000e10:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e1e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e22:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e26:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e2a:	fa1f f883 	uxth.w	r8, r3
 8000e2e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e32:	fb09 f408 	mul.w	r4, r9, r8
 8000e36:	42ac      	cmp	r4, r5
 8000e38:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x244>
 8000e42:	18ed      	adds	r5, r5, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	d243      	bcs.n	8000ed2 <__udivmoddi4+0x2c2>
 8000e4a:	42ac      	cmp	r4, r5
 8000e4c:	d941      	bls.n	8000ed2 <__udivmoddi4+0x2c2>
 8000e4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e52:	441d      	add	r5, r3
 8000e54:	1b2d      	subs	r5, r5, r4
 8000e56:	fa1f fe8e 	uxth.w	lr, lr
 8000e5a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e5e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e62:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e66:	fb00 f808 	mul.w	r8, r0, r8
 8000e6a:	45a0      	cmp	r8, r4
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x26e>
 8000e6e:	18e4      	adds	r4, r4, r3
 8000e70:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e74:	d229      	bcs.n	8000eca <__udivmoddi4+0x2ba>
 8000e76:	45a0      	cmp	r8, r4
 8000e78:	d927      	bls.n	8000eca <__udivmoddi4+0x2ba>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	441c      	add	r4, r3
 8000e7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e82:	eba4 0408 	sub.w	r4, r4, r8
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	454c      	cmp	r4, r9
 8000e8c:	46c6      	mov	lr, r8
 8000e8e:	464d      	mov	r5, r9
 8000e90:	d315      	bcc.n	8000ebe <__udivmoddi4+0x2ae>
 8000e92:	d012      	beq.n	8000eba <__udivmoddi4+0x2aa>
 8000e94:	b156      	cbz	r6, 8000eac <__udivmoddi4+0x29c>
 8000e96:	ebba 030e 	subs.w	r3, sl, lr
 8000e9a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea2:	40cb      	lsrs	r3, r1
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	40cc      	lsrs	r4, r1
 8000ea8:	6037      	str	r7, [r6, #0]
 8000eaa:	6074      	str	r4, [r6, #4]
 8000eac:	2100      	movs	r1, #0
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e6f8      	b.n	8000ca8 <__udivmoddi4+0x98>
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	e6e0      	b.n	8000c7c <__udivmoddi4+0x6c>
 8000eba:	45c2      	cmp	sl, r8
 8000ebc:	d2ea      	bcs.n	8000e94 <__udivmoddi4+0x284>
 8000ebe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ec6:	3801      	subs	r0, #1
 8000ec8:	e7e4      	b.n	8000e94 <__udivmoddi4+0x284>
 8000eca:	4628      	mov	r0, r5
 8000ecc:	e7d7      	b.n	8000e7e <__udivmoddi4+0x26e>
 8000ece:	4640      	mov	r0, r8
 8000ed0:	e791      	b.n	8000df6 <__udivmoddi4+0x1e6>
 8000ed2:	4681      	mov	r9, r0
 8000ed4:	e7be      	b.n	8000e54 <__udivmoddi4+0x244>
 8000ed6:	4601      	mov	r1, r0
 8000ed8:	e778      	b.n	8000dcc <__udivmoddi4+0x1bc>
 8000eda:	3802      	subs	r0, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	e745      	b.n	8000d6c <__udivmoddi4+0x15c>
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	e708      	b.n	8000cf6 <__udivmoddi4+0xe6>
 8000ee4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee8:	443d      	add	r5, r7
 8000eea:	e72b      	b.n	8000d44 <__udivmoddi4+0x134>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ef4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ef6:	e003      	b.n	8000f00 <LoopCopyDataInit>

08000ef8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000efa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000efc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000efe:	3104      	adds	r1, #4

08000f00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f08:	d3f6      	bcc.n	8000ef8 <CopyDataInit>
  ldr  r2, =_sbss
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f0c:	e002      	b.n	8000f14 <LoopFillZerobss>

08000f0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f10:	f842 3b04 	str.w	r3, [r2], #4

08000f14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f18:	d3f9      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f1a:	f000 fc8d 	bl	8001838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f004 faa5 	bl	800546c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f000 fa33 	bl	800138c <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f2c:	08006fd8 	.word	0x08006fd8
  ldr  r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f34:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000f38:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000f3c:	20004124 	.word	0x20004124

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <software_timer_callback>:
  /* USER CODE END task_determine_gyroscope_bias */
}

/* software_timer_callback function */
void software_timer_callback(void const * argument)
{
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <StartDefaultTask>:
{
 8000f48:	b508      	push	{r3, lr}
    osDelay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f002 fc48 	bl	80037e0 <osDelay>
 8000f50:	e7fb      	b.n	8000f4a <StartDefaultTask+0x2>
 8000f52:	bf00      	nop

08000f54 <task_gather_inertial_data>:
{
 8000f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f58:	b082      	sub	sp, #8
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000f5a:	f003 fc0b 	bl	8004774 <xTaskGetTickCount>
 8000f5e:	f10d 0808 	add.w	r8, sp, #8
 8000f62:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800103c <task_gather_inertial_data+0xe8>
 8000f66:	f848 0d04 	str.w	r0, [r8, #-4]!
    status = mpu_6000_read_raw_data(&raw_acc_data, &raw_gyro_data);
 8000f6a:	4f2f      	ldr	r7, [pc, #188]	; (8001028 <task_gather_inertial_data+0xd4>)
 8000f6c:	4e2f      	ldr	r6, [pc, #188]	; (800102c <task_gather_inertial_data+0xd8>)
	uint8_t iter = 0;
 8000f6e:	2500      	movs	r5, #0
 8000f70:	e010      	b.n	8000f94 <task_gather_inertial_data+0x40>
    	imu_set_raw_data(&imu, &raw_acc_data, &raw_gyro_data, NULL);
 8000f72:	4603      	mov	r3, r0
 8000f74:	463a      	mov	r2, r7
 8000f76:	4631      	mov	r1, r6
 8000f78:	482d      	ldr	r0, [pc, #180]	; (8001030 <task_gather_inertial_data+0xdc>)
 8000f7a:	f002 fb5f 	bl	800363c <imu_set_raw_data>
    	if (iter >=50) {
 8000f7e:	2d31      	cmp	r5, #49	; 0x31
 8000f80:	d81c      	bhi.n	8000fbc <task_gather_inertial_data+0x68>
 8000f82:	3501      	adds	r5, #1
 8000f84:	b2ed      	uxtb	r5, r5
    xTaskNotifyGive(determine_gyroscope_biasHandle);
 8000f86:	2300      	movs	r3, #0
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f8d9 0000 	ldr.w	r0, [r9]
 8000f90:	f003 fffe 	bl	8004f90 <xTaskGenericNotify>
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000f94:	210a      	movs	r1, #10
 8000f96:	4640      	mov	r0, r8
 8000f98:	f003 fd22 	bl	80049e0 <vTaskDelayUntil>
    status = mpu_6000_read_raw_data(&raw_acc_data, &raw_gyro_data);
 8000f9c:	4639      	mov	r1, r7
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	f002 f96c 	bl	800327c <mpu_6000_read_raw_data>
 8000fa4:	4604      	mov	r4, r0
 8000fa6:	4682      	mov	sl, r0
    if (status != HAL_OK) {
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	d0e2      	beq.n	8000f72 <task_gather_inertial_data+0x1e>
    	warningLedOn();
 8000fac:	f002 fa0c 	bl	80033c8 <warningLedOn>
    	sprintf(error_message, "Error: task_gather_inertial_data: read_raw_data_status: %d", status);
 8000fb0:	4622      	mov	r2, r4
 8000fb2:	4920      	ldr	r1, [pc, #128]	; (8001034 <task_gather_inertial_data+0xe0>)
 8000fb4:	4820      	ldr	r0, [pc, #128]	; (8001038 <task_gather_inertial_data+0xe4>)
 8000fb6:	f004 fb5d 	bl	8005674 <siprintf>
 8000fba:	e7e4      	b.n	8000f86 <task_gather_inertial_data+0x32>
    		statusLedToggle();
 8000fbc:	f002 f9fe 	bl	80033bc <statusLedToggle>
    xTaskNotifyGive(determine_gyroscope_biasHandle);
 8000fc0:	4623      	mov	r3, r4
 8000fc2:	4621      	mov	r1, r4
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	f8d9 0000 	ldr.w	r0, [r9]
 8000fca:	f003 ffe1 	bl	8004f90 <xTaskGenericNotify>
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000fce:	210a      	movs	r1, #10
 8000fd0:	4640      	mov	r0, r8
 8000fd2:	f003 fd05 	bl	80049e0 <vTaskDelayUntil>
    status = mpu_6000_read_raw_data(&raw_acc_data, &raw_gyro_data);
 8000fd6:	4639      	mov	r1, r7
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f002 f94f 	bl	800327c <mpu_6000_read_raw_data>
    if (status != HAL_OK) {
 8000fde:	4604      	mov	r4, r0
 8000fe0:	b108      	cbz	r0, 8000fe6 <task_gather_inertial_data+0x92>
    		iter = 0;
 8000fe2:	4655      	mov	r5, sl
 8000fe4:	e7e2      	b.n	8000fac <task_gather_inertial_data+0x58>
    	imu_set_raw_data(&imu, &raw_acc_data, &raw_gyro_data, NULL);
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	463a      	mov	r2, r7
 8000fea:	4631      	mov	r1, r6
 8000fec:	4810      	ldr	r0, [pc, #64]	; (8001030 <task_gather_inertial_data+0xdc>)
 8000fee:	f002 fb25 	bl	800363c <imu_set_raw_data>
    xTaskNotifyGive(determine_gyroscope_biasHandle);
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	f8d9 0000 	ldr.w	r0, [r9]
 8000ffc:	f003 ffc8 	bl	8004f90 <xTaskGenericNotify>
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001000:	210a      	movs	r1, #10
 8001002:	4640      	mov	r0, r8
 8001004:	f003 fcec 	bl	80049e0 <vTaskDelayUntil>
    status = mpu_6000_read_raw_data(&raw_acc_data, &raw_gyro_data);
 8001008:	4639      	mov	r1, r7
 800100a:	4630      	mov	r0, r6
 800100c:	f002 f936 	bl	800327c <mpu_6000_read_raw_data>
    if (status != HAL_OK) {
 8001010:	4604      	mov	r4, r0
 8001012:	b938      	cbnz	r0, 8001024 <task_gather_inertial_data+0xd0>
    	imu_set_raw_data(&imu, &raw_acc_data, &raw_gyro_data, NULL);
 8001014:	4603      	mov	r3, r0
 8001016:	463a      	mov	r2, r7
 8001018:	4631      	mov	r1, r6
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <task_gather_inertial_data+0xdc>)
 800101c:	f002 fb0e 	bl	800363c <imu_set_raw_data>
 8001020:	2501      	movs	r5, #1
 8001022:	e7ae      	b.n	8000f82 <task_gather_inertial_data+0x2e>
    if (status != HAL_OK) {
 8001024:	2501      	movs	r5, #1
 8001026:	e7c1      	b.n	8000fac <task_gather_inertial_data+0x58>
 8001028:	20003ef8 	.word	0x20003ef8
 800102c:	20003f18 	.word	0x20003f18
 8001030:	20003e9c 	.word	0x20003e9c
 8001034:	08006ea4 	.word	0x08006ea4
 8001038:	20000090 	.word	0x20000090
 800103c:	20003f14 	.word	0x20003f14

08001040 <task_determine_gyroscope_bias>:
{
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
	allan_variance_init(&allan_variance_data, 100, 1, 100);
 8001042:	2364      	movs	r3, #100	; 0x64
{
 8001044:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
	  volatile UBaseType_t stack = uxTaskGetStackHighWaterMark(determine_gyroscope_biasHandle);
 8001048:	4c1f      	ldr	r4, [pc, #124]	; (80010c8 <task_determine_gyroscope_bias+0x88>)
 800104a:	4f20      	ldr	r7, [pc, #128]	; (80010cc <task_determine_gyroscope_bias+0x8c>)
	  if (allan_variance_update(&allan_variance_data, &raw_gyro_data)) {
 800104c:	4e20      	ldr	r6, [pc, #128]	; (80010d0 <task_determine_gyroscope_bias+0x90>)
	  flash_memory_write(flash_memory_address, (uint8_t*)(&raw_acc_data), vector_size);
 800104e:	4d21      	ldr	r5, [pc, #132]	; (80010d4 <task_determine_gyroscope_bias+0x94>)
	allan_variance_init(&allan_variance_data, 100, 1, 100);
 8001050:	4619      	mov	r1, r3
 8001052:	a80b      	add	r0, sp, #44	; 0x2c
 8001054:	2201      	movs	r2, #1
 8001056:	f002 f847 	bl	80030e8 <allan_variance_init>
	  volatile UBaseType_t stack = uxTaskGetStackHighWaterMark(determine_gyroscope_biasHandle);
 800105a:	6820      	ldr	r0, [r4, #0]
 800105c:	f003 fe8c 	bl	8004d78 <uxTaskGetStackHighWaterMark>
	  volatile uint32_t flash_memory_address = 0x00;
 8001060:	2300      	movs	r3, #0
	  volatile UBaseType_t stack = uxTaskGetStackHighWaterMark(determine_gyroscope_biasHandle);
 8001062:	9000      	str	r0, [sp, #0]
	  volatile uint32_t flash_memory_address = 0x00;
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	e01a      	b.n	800109e <task_determine_gyroscope_bias+0x5e>
	  stack = uxTaskGetStackHighWaterMark(determine_gyroscope_biasHandle);
 8001068:	6820      	ldr	r0, [r4, #0]
 800106a:	f003 fe85 	bl	8004d78 <uxTaskGetStackHighWaterMark>
 800106e:	9000      	str	r0, [sp, #0]
	  flash_memory_read(flash_memory_address, before, vector_size);
 8001070:	220c      	movs	r2, #12
 8001072:	a902      	add	r1, sp, #8
 8001074:	9801      	ldr	r0, [sp, #4]
 8001076:	f002 f8e7 	bl	8003248 <flash_memory_read>
	  flash_memory_write(flash_memory_address, (uint8_t*)(&raw_acc_data), vector_size);
 800107a:	220c      	movs	r2, #12
 800107c:	4629      	mov	r1, r5
 800107e:	9801      	ldr	r0, [sp, #4]
 8001080:	f002 f8b2 	bl	80031e8 <flash_memory_write>
	  flash_memory_read(flash_memory_address, (uint8_t*)(&test_vect), vector_size);
 8001084:	220c      	movs	r2, #12
 8001086:	a908      	add	r1, sp, #32
 8001088:	9801      	ldr	r0, [sp, #4]
 800108a:	f002 f8dd 	bl	8003248 <flash_memory_read>
	  flash_memory_read(flash_memory_address, after, vector_size);
 800108e:	9801      	ldr	r0, [sp, #4]
 8001090:	220c      	movs	r2, #12
 8001092:	a905      	add	r1, sp, #20
 8001094:	f002 f8d8 	bl	8003248 <flash_memory_read>
	  flash_memory_address += vector_size;
 8001098:	9b01      	ldr	r3, [sp, #4]
 800109a:	330c      	adds	r3, #12
 800109c:	9301      	str	r3, [sp, #4]
	  ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(2*DATA_GATHERING_FREQUENCY));
 800109e:	2114      	movs	r1, #20
 80010a0:	2001      	movs	r0, #1
 80010a2:	f003 ff41 	bl	8004f28 <ulTaskNotifyTake>
	  if (allan_variance_update(&allan_variance_data, &raw_gyro_data)) {
 80010a6:	4631      	mov	r1, r6
 80010a8:	a80b      	add	r0, sp, #44	; 0x2c
 80010aa:	f001 ff95 	bl	8002fd8 <allan_variance_update>
 80010ae:	2800      	cmp	r0, #0
 80010b0:	d0da      	beq.n	8001068 <task_determine_gyroscope_bias+0x28>
		  allan_variance_global = allan_variance_get_last_computed_allan_variance(&allan_variance_data);
 80010b2:	a80b      	add	r0, sp, #44	; 0x2c
 80010b4:	f002 f848 	bl	8003148 <allan_variance_get_last_computed_allan_variance>
 80010b8:	ed87 0a00 	vstr	s0, [r7]
 80010bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80010c0:	ed87 1a02 	vstr	s2, [r7, #8]
 80010c4:	e7d0      	b.n	8001068 <task_determine_gyroscope_bias+0x28>
 80010c6:	bf00      	nop
 80010c8:	20003f14 	.word	0x20003f14
 80010cc:	20003f04 	.word	0x20003f04
 80010d0:	20003ef8 	.word	0x20003ef8
 80010d4:	20003f18 	.word	0x20003f18

080010d8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80010d8:	b570      	push	{r4, r5, r6, lr}
 80010da:	b090      	sub	sp, #64	; 0x40
	statusLedOn();
 80010dc:	f002 f966 	bl	80033ac <statusLedOn>
	warningLedOff();
 80010e0:	f002 f97a 	bl	80033d8 <warningLedOff>
	fcm_spi_init();
 80010e4:	f002 f9bc 	bl	8003460 <fcm_spi_init>
	imu_init(&imu);
 80010e8:	481c      	ldr	r0, [pc, #112]	; (800115c <MX_FREERTOS_Init+0x84>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 80010ea:	4c1d      	ldr	r4, [pc, #116]	; (8001160 <MX_FREERTOS_Init+0x88>)
	imu_init(&imu);
 80010ec:	f002 fa96 	bl	800361c <imu_init>
	flash_memory_init();
 80010f0:	f002 f8bc 	bl	800326c <flash_memory_init>
	motors_init();
 80010f4:	f002 f978 	bl	80033e8 <motors_init>
  osTimerDef(software_timer, software_timer_callback);
 80010f8:	a810      	add	r0, sp, #64	; 0x40
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_FREERTOS_Init+0x8c>)
 80010fc:	f840 3d40 	str.w	r3, [r0, #-64]!
  software_timerHandle = osTimerCreate(osTimer(software_timer), osTimerOnce, NULL);
 8001100:	2200      	movs	r2, #0
 8001102:	4611      	mov	r1, r2
 8001104:	f002 fb74 	bl	80037f0 <osTimerCreate>
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_FREERTOS_Init+0x90>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 800110a:	4626      	mov	r6, r4
  software_timerHandle = osTimerCreate(osTimer(software_timer), osTimerOnce, NULL);
 800110c:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 800110e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001110:	ad01      	add	r5, sp, #4
 8001112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001114:	6833      	ldr	r3, [r6, #0]
 8001116:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001118:	2100      	movs	r1, #0
 800111a:	a801      	add	r0, sp, #4
 800111c:	f002 fb48 	bl	80037b0 <osThreadCreate>
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_FREERTOS_Init+0x94>)
  osThreadDef(gather_inertial_data, task_gather_inertial_data, osPriorityAboveNormal, 0, 128);
 8001122:	f104 0614 	add.w	r6, r4, #20
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001126:	6018      	str	r0, [r3, #0]
  osThreadDef(gather_inertial_data, task_gather_inertial_data, osPriorityAboveNormal, 0, 128);
 8001128:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800112a:	ad06      	add	r5, sp, #24
 800112c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112e:	6833      	ldr	r3, [r6, #0]
 8001130:	602b      	str	r3, [r5, #0]
  gather_inertial_dataHandle = osThreadCreate(osThread(gather_inertial_data), NULL);
 8001132:	2100      	movs	r1, #0
 8001134:	a806      	add	r0, sp, #24
 8001136:	f002 fb3b 	bl	80037b0 <osThreadCreate>
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <MX_FREERTOS_Init+0x98>)
  osThreadDef(determine_gyroscope_bias, task_determine_gyroscope_bias, osPriorityNormal, 0, 2048);
 800113c:	3428      	adds	r4, #40	; 0x28
  gather_inertial_dataHandle = osThreadCreate(osThread(gather_inertial_data), NULL);
 800113e:	6018      	str	r0, [r3, #0]
  osThreadDef(determine_gyroscope_bias, task_determine_gyroscope_bias, osPriorityNormal, 0, 2048);
 8001140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001142:	ad0b      	add	r5, sp, #44	; 0x2c
 8001144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	602b      	str	r3, [r5, #0]
  determine_gyroscope_biasHandle = osThreadCreate(osThread(determine_gyroscope_bias), NULL);
 800114a:	2100      	movs	r1, #0
 800114c:	a80b      	add	r0, sp, #44	; 0x2c
 800114e:	f002 fb2f 	bl	80037b0 <osThreadCreate>
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <MX_FREERTOS_Init+0x9c>)
 8001154:	6018      	str	r0, [r3, #0]
}
 8001156:	b010      	add	sp, #64	; 0x40
 8001158:	bd70      	pop	{r4, r5, r6, pc}
 800115a:	bf00      	nop
 800115c:	20003e9c 	.word	0x20003e9c
 8001160:	08006e28 	.word	0x08006e28
 8001164:	08000f45 	.word	0x08000f45
 8001168:	20003ef0 	.word	0x20003ef0
 800116c:	20003e88 	.word	0x20003e88
 8001170:	20003ef4 	.word	0x20003ef4
 8001174:	20003f14 	.word	0x20003f14

08001178 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117c:	2400      	movs	r4, #0
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <MX_GPIO_Init+0xb0>)
 8001180:	9401      	str	r4, [sp, #4]
 8001182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_MPU_Pin|CS_RFM22_Pin, GPIO_PIN_RESET);
 8001184:	4e29      	ldr	r6, [pc, #164]	; (800122c <MX_GPIO_Init+0xb4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_FLASH_Pin|LED_WARNING_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 8001186:	4d2a      	ldr	r5, [pc, #168]	; (8001230 <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001188:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
 800118e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001190:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001194:	9201      	str	r2, [sp, #4]
 8001196:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	9402      	str	r4, [sp, #8]
 800119a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119c:	f042 0201 	orr.w	r2, r2, #1
 80011a0:	631a      	str	r2, [r3, #48]	; 0x30
 80011a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a4:	f002 0201 	and.w	r2, r2, #1
 80011a8:	9202      	str	r2, [sp, #8]
 80011aa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ac:	9403      	str	r4, [sp, #12]
 80011ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b0:	f042 0204 	orr.w	r2, r2, #4
 80011b4:	631a      	str	r2, [r3, #48]	; 0x30
 80011b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b8:	f002 0204 	and.w	r2, r2, #4
 80011bc:	9203      	str	r2, [sp, #12]
 80011be:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	9404      	str	r4, [sp, #16]
 80011c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c4:	f042 0202 	orr.w	r2, r2, #2
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, CS_MPU_Pin|CS_RFM22_Pin, GPIO_PIN_RESET);
 80011d2:	4622      	mov	r2, r4
 80011d4:	4630      	mov	r0, r6
 80011d6:	f248 0110 	movw	r1, #32784	; 0x8010
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, CS_MPU_Pin|CS_RFM22_Pin, GPIO_PIN_RESET);
 80011dc:	f000 fd22 	bl	8001c24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, CS_FLASH_Pin|LED_WARNING_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 80011e0:	4622      	mov	r2, r4
 80011e2:	4628      	mov	r0, r5
 80011e4:	2138      	movs	r1, #56	; 0x38
 80011e6:	f000 fd1d 	bl	8001c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_MPU_Pin|CS_RFM22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	4630      	mov	r0, r6
 80011ee:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = CS_MPU_Pin|CS_RFM22_Pin;
 80011f0:	f248 0310 	movw	r3, #32784	; 0x8010
 80011f4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f000 fbfc 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001200:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001202:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_GPIO_Init+0xbc>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <MX_GPIO_Init+0xc0>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001208:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f000 fbf3 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CS_FLASH_Pin|LED_WARNING_Pin|LED_STATUS_Pin;
 8001212:	2338      	movs	r3, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	a905      	add	r1, sp, #20
 8001216:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = CS_FLASH_Pin|LED_WARNING_Pin|LED_STATUS_Pin;
 800121e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f000 fbea 	bl	80019f8 <HAL_GPIO_Init>

}
 8001224:	b00b      	add	sp, #44	; 0x2c
 8001226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400
 8001234:	10110000 	.word	0x10110000
 8001238:	40020800 	.word	0x40020800

0800123c <MX_I2C1_Init>:

/* I2C1 init function */
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <MX_I2C1_Init+0x38>)
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <MX_I2C1_Init+0x3c>)
{
 8001240:	b510      	push	{r4, lr}
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001246:	4c0d      	ldr	r4, [pc, #52]	; (800127c <MX_I2C1_Init+0x40>)
  hi2c1.Instance = I2C1;
 8001248:	601a      	str	r2, [r3, #0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124a:	4618      	mov	r0, r3
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800124c:	2200      	movs	r2, #0
  hi2c1.Init.ClockSpeed = 100000;
 800124e:	605c      	str	r4, [r3, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001250:	6119      	str	r1, [r3, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001252:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001254:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001256:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001258:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125e:	f000 fce9 	bl	8001c34 <HAL_I2C_Init>
 8001262:	b900      	cbnz	r0, 8001266 <MX_I2C1_Init+0x2a>
 8001264:	bd10      	pop	{r4, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001266:	214c      	movs	r1, #76	; 0x4c
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_I2C1_Init+0x44>)
  }

}
 800126a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _Error_Handler(__FILE__, __LINE__);
 800126e:	f000 b8b7 	b.w	80013e0 <_Error_Handler>
 8001272:	bf00      	nop
 8001274:	20003f24 	.word	0x20003f24
 8001278:	40005400 	.word	0x40005400
 800127c:	000186a0 	.word	0x000186a0
 8001280:	08006ee0 	.word	0x08006ee0

08001284 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8001284:	6802      	ldr	r2, [r0, #0]
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_I2C_MspInit+0x4c>)
 8001288:	429a      	cmp	r2, r3
 800128a:	d000      	beq.n	800128e <HAL_I2C_MspInit+0xa>
 800128c:	4770      	bx	lr
{
 800128e:	b570      	push	{r4, r5, r6, lr}
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001290:	2304      	movs	r3, #4
{
 8001292:	b086      	sub	sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800129a:	f44f 7640 	mov.w	r6, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129e:	2512      	movs	r5, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a0:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	480c      	ldr	r0, [pc, #48]	; (80012d4 <HAL_I2C_MspInit+0x50>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012a8:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012aa:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ac:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f000 fba3 	bl	80019f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_I2C_MspInit+0x54>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	9200      	str	r2, [sp, #0]
 80012b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ba:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012ca:	b006      	add	sp, #24
 80012cc:	bd70      	pop	{r4, r5, r6, pc}
 80012ce:	bf00      	nop
 80012d0:	40005400 	.word	0x40005400
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40023800 	.word	0x40023800

080012dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012de:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	2200      	movs	r2, #0
 80012e2:	4927      	ldr	r1, [pc, #156]	; (8001380 <SystemClock_Config+0xa4>)
 80012e4:	9201      	str	r2, [sp, #4]
 80012e6:	6c08      	ldr	r0, [r1, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e8:	4b26      	ldr	r3, [pc, #152]	; (8001384 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80012ee:	6408      	str	r0, [r1, #64]	; 0x40
 80012f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80012f2:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80012f6:	9101      	str	r1, [sp, #4]
 80012f8:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fa:	9202      	str	r2, [sp, #8]
 80012fc:	6819      	ldr	r1, [r3, #0]
 80012fe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001302:	6019      	str	r1, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001306:	920f      	str	r2, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130c:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800130e:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001310:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001312:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001314:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001316:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001318:	2604      	movs	r6, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131a:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800131c:	9f02      	ldr	r7, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800131e:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001320:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001322:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001324:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001326:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001328:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800132a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800132c:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132e:	f000 fcf9 	bl	8001d24 <HAL_RCC_OscConfig>
 8001332:	b100      	cbz	r0, 8001336 <SystemClock_Config+0x5a>
 8001334:	e7fe      	b.n	8001334 <SystemClock_Config+0x58>
 8001336:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001338:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133c:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800133e:	f44f 57a0 	mov.w	r7, #5120	; 0x1400

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001342:	2105      	movs	r1, #5
 8001344:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001346:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001348:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134a:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800134c:	9706      	str	r7, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800134e:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001350:	f000 feda 	bl	8002108 <HAL_RCC_ClockConfig>
 8001354:	4604      	mov	r4, r0
 8001356:	b100      	cbz	r0, 800135a <SystemClock_Config+0x7e>
 8001358:	e7fe      	b.n	8001358 <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800135a:	f000 ff6f 	bl	800223c <HAL_RCC_GetHCLKFreq>
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <SystemClock_Config+0xac>)
 8001360:	fba3 3000 	umull	r3, r0, r3, r0
 8001364:	0980      	lsrs	r0, r0, #6
 8001366:	f000 fb21 	bl	80019ac <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800136a:	4630      	mov	r0, r6
 800136c:	f000 fb38 	bl	80019e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001370:	4622      	mov	r2, r4
 8001372:	4629      	mov	r1, r5
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 fad6 	bl	8001928 <HAL_NVIC_SetPriority>
}
 800137c:	b015      	add	sp, #84	; 0x54
 800137e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	40007000 	.word	0x40007000
 8001388:	10624dd3 	.word	0x10624dd3

0800138c <main>:
{
 800138c:	b508      	push	{r3, lr}
  HAL_Init();
 800138e:	f000 fa7b 	bl	8001888 <HAL_Init>
  SystemClock_Config();
 8001392:	f7ff ffa3 	bl	80012dc <SystemClock_Config>
  MX_GPIO_Init();
 8001396:	f7ff feef 	bl	8001178 <MX_GPIO_Init>
  MX_SPI1_Init();
 800139a:	f000 f823 	bl	80013e4 <MX_SPI1_Init>
  MX_TIM9_Init();
 800139e:	f000 f9f7 	bl	8001790 <MX_TIM9_Init>
  MX_TIM3_Init();
 80013a2:	f000 f993 	bl	80016cc <MX_TIM3_Init>
  MX_SPI3_Init();
 80013a6:	f000 f847 	bl	8001438 <MX_SPI3_Init>
  MX_I2C1_Init();
 80013aa:	f7ff ff47 	bl	800123c <MX_I2C1_Init>
  MX_FREERTOS_Init();
 80013ae:	f7ff fe93 	bl	80010d8 <MX_FREERTOS_Init>
  osKernelStart();
 80013b2:	f002 f9f7 	bl	80037a4 <osKernelStart>
  statusLedOn();
 80013b6:	f001 fff9 	bl	80033ac <statusLedOn>
  warningLedOff();
 80013ba:	f002 f80d 	bl	80033d8 <warningLedOff>
  fcm_spi_init();
 80013be:	f002 f84f 	bl	8003460 <fcm_spi_init>
  flash_memory_init();
 80013c2:	f001 ff53 	bl	800326c <flash_memory_init>
  mpu_6000_init();
 80013c6:	f001 ff8f 	bl	80032e8 <mpu_6000_init>
 80013ca:	e7fe      	b.n	80013ca <main+0x3e>

080013cc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80013cc:	6802      	ldr	r2, [r0, #0]
 80013ce:	4b03      	ldr	r3, [pc, #12]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x10>)
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d000      	beq.n	80013d6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80013d4:	4770      	bx	lr
    HAL_IncTick();
 80013d6:	f000 ba71 	b.w	80018bc <HAL_IncTick>
 80013da:	bf00      	nop
 80013dc:	40002000 	.word	0x40002000

080013e0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80013e0:	e7fe      	b.n	80013e0 <_Error_Handler>
 80013e2:	bf00      	nop

080013e4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  hspi1.Instance = SPI1;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_SPI1_Init+0x48>)
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <MX_SPI1_Init+0x4c>)
 80013ea:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ec:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013f0:	2702      	movs	r7, #2
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013f2:	2601      	movs	r6, #1
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013f4:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013f8:	2418      	movs	r4, #24
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 80013fa:	210a      	movs	r1, #10
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013fc:	605a      	str	r2, [r3, #4]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013fe:	4618      	mov	r0, r3
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001400:	2200      	movs	r2, #0
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001402:	611f      	str	r7, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001404:	615e      	str	r6, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001406:	619d      	str	r5, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001408:	61dc      	str	r4, [r3, #28]
  hspi1.Init.CRCPolynomial = 10;
 800140a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800140c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800140e:	60da      	str	r2, [r3, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001410:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001414:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001416:	f001 f895 	bl	8002544 <HAL_SPI_Init>
 800141a:	b900      	cbnz	r0, 800141e <MX_SPI1_Init+0x3a>
 800141c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 800141e:	2150      	movs	r1, #80	; 0x50
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <MX_SPI1_Init+0x50>)
  }

}
 8001422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001426:	f7ff bfdb 	b.w	80013e0 <_Error_Handler>
 800142a:	bf00      	nop
 800142c:	20003fd0 	.word	0x20003fd0
 8001430:	40013000 	.word	0x40013000
 8001434:	08006ef4 	.word	0x08006ef4

08001438 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{

  hspi3.Instance = SPI3;
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_SPI3_Init+0x44>)
 800143a:	4a11      	ldr	r2, [pc, #68]	; (8001480 <MX_SPI3_Init+0x48>)
{
 800143c:	b570      	push	{r4, r5, r6, lr}
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 10;
 800143e:	210a      	movs	r1, #10
  hspi3.Instance = SPI3;
 8001440:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001442:	f44f 7682 	mov.w	r6, #260	; 0x104
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001446:	2200      	movs	r2, #0
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001448:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800144c:	2430      	movs	r4, #48	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800144e:	4618      	mov	r0, r3
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001450:	605e      	str	r6, [r3, #4]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001452:	619d      	str	r5, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001454:	61dc      	str	r4, [r3, #28]
  hspi3.Init.CRCPolynomial = 10;
 8001456:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001458:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800145a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800145e:	615a      	str	r2, [r3, #20]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001460:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001466:	f001 f86d 	bl	8002544 <HAL_SPI_Init>
 800146a:	b900      	cbnz	r0, 800146e <MX_SPI3_Init+0x36>
 800146c:	bd70      	pop	{r4, r5, r6, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 800146e:	2166      	movs	r1, #102	; 0x66
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_SPI3_Init+0x4c>)
  }

}
 8001472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001476:	f7ff bfb3 	b.w	80013e0 <_Error_Handler>
 800147a:	bf00      	nop
 800147c:	20003f78 	.word	0x20003f78
 8001480:	40003c00 	.word	0x40003c00
 8001484:	08006ef4 	.word	0x08006ef4

08001488 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001488:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 800148a:	6803      	ldr	r3, [r0, #0]
 800148c:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <HAL_SPI_MspInit+0x78>)
 800148e:	4293      	cmp	r3, r2
{
 8001490:	b088      	sub	sp, #32
  if(spiHandle->Instance==SPI1)
 8001492:	d020      	beq.n	80014d6 <HAL_SPI_MspInit+0x4e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8001494:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <HAL_SPI_MspInit+0x7c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d001      	beq.n	800149e <HAL_SPI_MspInit+0x16>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800149a:	b008      	add	sp, #32
 800149c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 800149e:	2100      	movs	r1, #0
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014a2:	9102      	str	r1, [sp, #8]
 80014a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a6:	4819      	ldr	r0, [pc, #100]	; (800150c <HAL_SPI_MspInit+0x84>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ac:	641a      	str	r2, [r3, #64]	; 0x40
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	9105      	str	r1, [sp, #20]
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80014ba:	f44f 55e0 	mov.w	r5, #7168	; 0x1c00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014c2:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80014c6:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014cc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ce:	f000 fa93 	bl	80019f8 <HAL_GPIO_Init>
}
 80014d2:	b008      	add	sp, #32
 80014d4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014d6:	2100      	movs	r1, #0
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_SPI_MspInit+0x80>)
 80014da:	9101      	str	r1, [sp, #4]
 80014dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <HAL_SPI_MspInit+0x88>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014e4:	645a      	str	r2, [r3, #68]	; 0x44
 80014e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	9105      	str	r1, [sp, #20]
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014f0:	25e0      	movs	r5, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014f6:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014fa:	9e01      	ldr	r6, [sp, #4]
 80014fc:	e7e3      	b.n	80014c6 <HAL_SPI_MspInit+0x3e>
 80014fe:	bf00      	nop
 8001500:	40013000 	.word	0x40013000
 8001504:	40003c00 	.word	0x40003c00
 8001508:	40023800 	.word	0x40023800
 800150c:	40020800 	.word	0x40020800
 8001510:	40020000 	.word	0x40020000

08001514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001516:	2003      	movs	r0, #3
 8001518:	f000 f9f4 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	4611      	mov	r1, r2
 8001520:	f06f 000b 	mvn.w	r0, #11
 8001524:	f000 fa00 	bl	8001928 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	4611      	mov	r1, r2
 800152c:	f06f 000a 	mvn.w	r0, #10
 8001530:	f000 f9fa 	bl	8001928 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	4611      	mov	r1, r2
 8001538:	f06f 0009 	mvn.w	r0, #9
 800153c:	f000 f9f4 	bl	8001928 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	4611      	mov	r1, r2
 8001544:	f06f 0004 	mvn.w	r0, #4
 8001548:	f000 f9ee 	bl	8001928 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	4611      	mov	r1, r2
 8001550:	f06f 0003 	mvn.w	r0, #3
 8001554:	f000 f9e8 	bl	8001928 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	210f      	movs	r1, #15
 800155c:	f06f 0001 	mvn.w	r0, #1
 8001560:	f000 f9e2 	bl	8001928 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001570:	f000 b9da 	b.w	8001928 <HAL_NVIC_SetPriority>

08001574 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8001576:	4601      	mov	r1, r0
{
 8001578:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 800157a:	2200      	movs	r2, #0
 800157c:	202d      	movs	r0, #45	; 0x2d
 800157e:	f000 f9d3 	bl	8001928 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8001582:	202d      	movs	r0, #45	; 0x2d
 8001584:	f000 fa06 	bl	8001994 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001588:	2500      	movs	r5, #0
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_InitTick+0x6c>)
 800158c:	9502      	str	r5, [sp, #8]
 800158e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001590:	4c14      	ldr	r4, [pc, #80]	; (80015e4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001596:	641a      	str	r2, [r3, #64]	; 0x40
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800159e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM14_CLK_ENABLE();
 80015a0:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015a2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM14_CLK_ENABLE();
 80015a4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015a6:	f000 fe5f 	bl	8002268 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015aa:	f000 fe4d 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_InitTick+0x74>)
  htim14.Instance = TIM14;
 80015b0:	490e      	ldr	r1, [pc, #56]	; (80015ec <HAL_InitTick+0x78>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
  htim14.Init.Prescaler = uwPrescalerValue;
  htim14.Init.ClockDivision = 0;
 80015b2:	6125      	str	r5, [r4, #16]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015b4:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0c9b      	lsrs	r3, r3, #18
 80015bc:	3b01      	subs	r3, #1
  htim14.Init.Period = (1000000 / 1000) - 1;
 80015be:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80015c2:	4620      	mov	r0, r4
  htim14.Instance = TIM14;
 80015c4:	e884 002a 	stmia.w	r4, {r1, r3, r5}
  htim14.Init.Period = (1000000 / 1000) - 1;
 80015c8:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80015ca:	f001 fc07 	bl	8002ddc <HAL_TIM_Base_Init>
 80015ce:	b110      	cbz	r0, 80015d6 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80015d0:	2001      	movs	r0, #1
}
 80015d2:	b009      	add	sp, #36	; 0x24
 80015d4:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim14);
 80015d6:	4620      	mov	r0, r4
 80015d8:	f001 f9ea 	bl	80029b0 <HAL_TIM_Base_Start_IT>
}
 80015dc:	b009      	add	sp, #36	; 0x24
 80015de:	bd30      	pop	{r4, r5, pc}
 80015e0:	40023800 	.word	0x40023800
 80015e4:	20004028 	.word	0x20004028
 80015e8:	431bde83 	.word	0x431bde83
 80015ec:	40002000 	.word	0x40002000

080015f0 <NMI_Handler>:
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80015f4:	e7fe      	b.n	80015f4 <HardFault_Handler>
 80015f6:	bf00      	nop

080015f8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80015f8:	e7fe      	b.n	80015f8 <MemManage_Handler>
 80015fa:	bf00      	nop

080015fc <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80015fc:	e7fe      	b.n	80015fc <BusFault_Handler>
 80015fe:	bf00      	nop

08001600 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler>
 8001602:	bf00      	nop

08001604 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop

08001608 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001608:	f002 b906 	b.w	8003818 <osSystickHandler>

0800160c <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800160c:	4801      	ldr	r0, [pc, #4]	; (8001614 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 800160e:	f001 bac9 	b.w	8002ba4 <HAL_TIM_IRQHandler>
 8001612:	bf00      	nop
 8001614:	20004028 	.word	0x20004028

08001618 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8001618:	6803      	ldr	r3, [r0, #0]
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <HAL_TIM_Base_MspInit+0x4c>)
 800161c:	4293      	cmp	r3, r2
{
 800161e:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM3)
 8001620:	d012      	beq.n	8001648 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM9)
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_TIM_Base_MspInit+0x50>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d001      	beq.n	800162c <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001628:	b002      	add	sp, #8
 800162a:	4770      	bx	lr
    __HAL_RCC_TIM9_CLK_ENABLE();
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_TIM_Base_MspInit+0x54>)
 800162e:	2200      	movs	r2, #0
 8001630:	9201      	str	r2, [sp, #4]
 8001632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001634:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001638:	645a      	str	r2, [r3, #68]	; 0x44
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	9b01      	ldr	r3, [sp, #4]
}
 8001644:	b002      	add	sp, #8
 8001646:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_TIM_Base_MspInit+0x54>)
 800164a:	2200      	movs	r2, #0
 800164c:	9200      	str	r2, [sp, #0]
 800164e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001650:	f042 0202 	orr.w	r2, r2, #2
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	9b00      	ldr	r3, [sp, #0]
}
 8001660:	b002      	add	sp, #8
 8001662:	4770      	bx	lr
 8001664:	40000400 	.word	0x40000400
 8001668:	40014000 	.word	0x40014000
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001670:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM3)
 8001672:	6803      	ldr	r3, [r0, #0]
 8001674:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_TIM_MspPostInit+0x4c>)
 8001676:	4293      	cmp	r3, r2
{
 8001678:	b087      	sub	sp, #28
  if(timHandle->Instance==TIM3)
 800167a:	d012      	beq.n	80016a2 <HAL_TIM_MspPostInit+0x32>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM9)
 800167c:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <HAL_TIM_MspPostInit+0x50>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d001      	beq.n	8001686 <HAL_TIM_MspPostInit+0x16>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001682:	b007      	add	sp, #28
 8001684:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = MOTOR_4_Pin|MOTOR_3_Pin;
 8001688:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800168c:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	a901      	add	r1, sp, #4
 8001690:	480c      	ldr	r0, [pc, #48]	; (80016c4 <HAL_TIM_MspPostInit+0x54>)
    GPIO_InitStruct.Pin = MOTOR_4_Pin|MOTOR_3_Pin;
 8001692:	9501      	str	r5, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800169a:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f000 f9ac 	bl	80019f8 <HAL_GPIO_Init>
}
 80016a0:	e7ef      	b.n	8001682 <HAL_TIM_MspPostInit+0x12>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2202      	movs	r2, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin;
 80016a6:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	a901      	add	r1, sp, #4
 80016aa:	4807      	ldr	r0, [pc, #28]	; (80016c8 <HAL_TIM_MspPostInit+0x58>)
    GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin;
 80016ac:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016b0:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f000 f99f 	bl	80019f8 <HAL_GPIO_Init>
 80016ba:	e7e2      	b.n	8001682 <HAL_TIM_MspPostInit+0x12>
 80016bc:	40000400 	.word	0x40000400
 80016c0:	40014000 	.word	0x40014000
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40020400 	.word	0x40020400

080016cc <MX_TIM3_Init>:
{
 80016cc:	b510      	push	{r4, lr}
  htim3.Instance = TIM3;
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <MX_TIM3_Init+0xb8>)
 80016d0:	4a2d      	ldr	r2, [pc, #180]	; (8001788 <MX_TIM3_Init+0xbc>)
 80016d2:	601a      	str	r2, [r3, #0]
{
 80016d4:	b08e      	sub	sp, #56	; 0x38
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	2200      	movs	r2, #0
  htim3.Init.Prescaler = 83;
 80016d8:	2453      	movs	r4, #83	; 0x53
  htim3.Init.Period = 19999;
 80016da:	f644 611f 	movw	r1, #19999	; 0x4e1f
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016de:	4618      	mov	r0, r3
  htim3.Init.Prescaler = 83;
 80016e0:	605c      	str	r4, [r3, #4]
  htim3.Init.Period = 19999;
 80016e2:	60d9      	str	r1, [r3, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	609a      	str	r2, [r3, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e8:	f001 fb78 	bl	8002ddc <HAL_TIM_Base_Init>
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d144      	bne.n	800177a <MX_TIM3_Init+0xae>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f0:	a90e      	add	r1, sp, #56	; 0x38
 80016f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f6:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016fa:	4822      	ldr	r0, [pc, #136]	; (8001784 <MX_TIM3_Init+0xb8>)
 80016fc:	f001 f98a 	bl	8002a14 <HAL_TIM_ConfigClockSource>
 8001700:	2800      	cmp	r0, #0
 8001702:	d135      	bne.n	8001770 <MX_TIM3_Init+0xa4>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001704:	481f      	ldr	r0, [pc, #124]	; (8001784 <MX_TIM3_Init+0xb8>)
 8001706:	f001 fb85 	bl	8002e14 <HAL_TIM_PWM_Init>
 800170a:	bb60      	cbnz	r0, 8001766 <MX_TIM3_Init+0x9a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800170e:	a901      	add	r1, sp, #4
 8001710:	481c      	ldr	r0, [pc, #112]	; (8001784 <MX_TIM3_Init+0xb8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001712:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001716:	f001 fc35 	bl	8002f84 <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	b9f8      	cbnz	r0, 800175c <MX_TIM3_Init+0x90>
  sConfigOC.Pulse = 0;
 800171c:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800171e:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001720:	a907      	add	r1, sp, #28
 8001722:	2208      	movs	r2, #8
 8001724:	4817      	ldr	r0, [pc, #92]	; (8001784 <MX_TIM3_Init+0xb8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001726:	9407      	str	r4, [sp, #28]
  sConfigOC.Pulse = 0;
 8001728:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172a:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800172c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800172e:	f001 fbbf 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 8001732:	b970      	cbnz	r0, 8001752 <MX_TIM3_Init+0x86>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001734:	a907      	add	r1, sp, #28
 8001736:	220c      	movs	r2, #12
 8001738:	4812      	ldr	r0, [pc, #72]	; (8001784 <MX_TIM3_Init+0xb8>)
 800173a:	f001 fbb9 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 800173e:	b118      	cbz	r0, 8001748 <MX_TIM3_Init+0x7c>
    _Error_Handler(__FILE__, __LINE__);
 8001740:	216a      	movs	r1, #106	; 0x6a
 8001742:	4812      	ldr	r0, [pc, #72]	; (800178c <MX_TIM3_Init+0xc0>)
 8001744:	f7ff fe4c 	bl	80013e0 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8001748:	480e      	ldr	r0, [pc, #56]	; (8001784 <MX_TIM3_Init+0xb8>)
 800174a:	f7ff ff91 	bl	8001670 <HAL_TIM_MspPostInit>
}
 800174e:	b00e      	add	sp, #56	; 0x38
 8001750:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001752:	2165      	movs	r1, #101	; 0x65
 8001754:	480d      	ldr	r0, [pc, #52]	; (800178c <MX_TIM3_Init+0xc0>)
 8001756:	f7ff fe43 	bl	80013e0 <_Error_Handler>
 800175a:	e7eb      	b.n	8001734 <MX_TIM3_Init+0x68>
    _Error_Handler(__FILE__, __LINE__);
 800175c:	215c      	movs	r1, #92	; 0x5c
 800175e:	480b      	ldr	r0, [pc, #44]	; (800178c <MX_TIM3_Init+0xc0>)
 8001760:	f7ff fe3e 	bl	80013e0 <_Error_Handler>
 8001764:	e7da      	b.n	800171c <MX_TIM3_Init+0x50>
    _Error_Handler(__FILE__, __LINE__);
 8001766:	2155      	movs	r1, #85	; 0x55
 8001768:	4808      	ldr	r0, [pc, #32]	; (800178c <MX_TIM3_Init+0xc0>)
 800176a:	f7ff fe39 	bl	80013e0 <_Error_Handler>
 800176e:	e7cd      	b.n	800170c <MX_TIM3_Init+0x40>
    _Error_Handler(__FILE__, __LINE__);
 8001770:	2150      	movs	r1, #80	; 0x50
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <MX_TIM3_Init+0xc0>)
 8001774:	f7ff fe34 	bl	80013e0 <_Error_Handler>
 8001778:	e7c4      	b.n	8001704 <MX_TIM3_Init+0x38>
    _Error_Handler(__FILE__, __LINE__);
 800177a:	214a      	movs	r1, #74	; 0x4a
 800177c:	4803      	ldr	r0, [pc, #12]	; (800178c <MX_TIM3_Init+0xc0>)
 800177e:	f7ff fe2f 	bl	80013e0 <_Error_Handler>
 8001782:	e7b5      	b.n	80016f0 <MX_TIM3_Init+0x24>
 8001784:	20004064 	.word	0x20004064
 8001788:	40000400 	.word	0x40000400
 800178c:	08006f08 	.word	0x08006f08

08001790 <MX_TIM9_Init>:
{
 8001790:	b510      	push	{r4, lr}
  htim9.Instance = TIM9;
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <MX_TIM9_Init+0x9c>)
 8001794:	4a26      	ldr	r2, [pc, #152]	; (8001830 <MX_TIM9_Init+0xa0>)
 8001796:	601a      	str	r2, [r3, #0]
{
 8001798:	b08c      	sub	sp, #48	; 0x30
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179a:	2200      	movs	r2, #0
  htim9.Init.Prescaler = 167;
 800179c:	24a7      	movs	r4, #167	; 0xa7
  htim9.Init.Period = 19999;
 800179e:	f644 611f 	movw	r1, #19999	; 0x4e1f
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80017a2:	4618      	mov	r0, r3
  htim9.Init.Prescaler = 167;
 80017a4:	605c      	str	r4, [r3, #4]
  htim9.Init.Period = 19999;
 80017a6:	60d9      	str	r1, [r3, #12]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	609a      	str	r2, [r3, #8]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017aa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80017ac:	f001 fb16 	bl	8002ddc <HAL_TIM_Base_Init>
 80017b0:	2800      	cmp	r0, #0
 80017b2:	d136      	bne.n	8001822 <MX_TIM9_Init+0x92>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b4:	a90c      	add	r1, sp, #48	; 0x30
 80017b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ba:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80017be:	481b      	ldr	r0, [pc, #108]	; (800182c <MX_TIM9_Init+0x9c>)
 80017c0:	f001 f928 	bl	8002a14 <HAL_TIM_ConfigClockSource>
 80017c4:	bb40      	cbnz	r0, 8001818 <MX_TIM9_Init+0x88>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80017c6:	4819      	ldr	r0, [pc, #100]	; (800182c <MX_TIM9_Init+0x9c>)
 80017c8:	f001 fb24 	bl	8002e14 <HAL_TIM_PWM_Init>
 80017cc:	b9f8      	cbnz	r0, 800180e <MX_TIM9_Init+0x7e>
  sConfigOC.Pulse = 0;
 80017ce:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d0:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d2:	461a      	mov	r2, r3
 80017d4:	a905      	add	r1, sp, #20
 80017d6:	4815      	ldr	r0, [pc, #84]	; (800182c <MX_TIM9_Init+0x9c>)
  sConfigOC.Pulse = 0;
 80017d8:	9306      	str	r3, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017da:	9307      	str	r3, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017dc:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017de:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e0:	f001 fb66 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 80017e4:	b970      	cbnz	r0, 8001804 <MX_TIM9_Init+0x74>
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017e6:	a905      	add	r1, sp, #20
 80017e8:	2204      	movs	r2, #4
 80017ea:	4810      	ldr	r0, [pc, #64]	; (800182c <MX_TIM9_Init+0x9c>)
 80017ec:	f001 fb60 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 80017f0:	b118      	cbz	r0, 80017fa <MX_TIM9_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 80017f2:	2196      	movs	r1, #150	; 0x96
 80017f4:	480f      	ldr	r0, [pc, #60]	; (8001834 <MX_TIM9_Init+0xa4>)
 80017f6:	f7ff fdf3 	bl	80013e0 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim9);
 80017fa:	480c      	ldr	r0, [pc, #48]	; (800182c <MX_TIM9_Init+0x9c>)
 80017fc:	f7ff ff38 	bl	8001670 <HAL_TIM_MspPostInit>
}
 8001800:	b00c      	add	sp, #48	; 0x30
 8001802:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001804:	2191      	movs	r1, #145	; 0x91
 8001806:	480b      	ldr	r0, [pc, #44]	; (8001834 <MX_TIM9_Init+0xa4>)
 8001808:	f7ff fdea 	bl	80013e0 <_Error_Handler>
 800180c:	e7eb      	b.n	80017e6 <MX_TIM9_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
 800180e:	2188      	movs	r1, #136	; 0x88
 8001810:	4808      	ldr	r0, [pc, #32]	; (8001834 <MX_TIM9_Init+0xa4>)
 8001812:	f7ff fde5 	bl	80013e0 <_Error_Handler>
 8001816:	e7da      	b.n	80017ce <MX_TIM9_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 8001818:	2183      	movs	r1, #131	; 0x83
 800181a:	4806      	ldr	r0, [pc, #24]	; (8001834 <MX_TIM9_Init+0xa4>)
 800181c:	f7ff fde0 	bl	80013e0 <_Error_Handler>
 8001820:	e7d1      	b.n	80017c6 <MX_TIM9_Init+0x36>
    _Error_Handler(__FILE__, __LINE__);
 8001822:	217d      	movs	r1, #125	; 0x7d
 8001824:	4803      	ldr	r0, [pc, #12]	; (8001834 <MX_TIM9_Init+0xa4>)
 8001826:	f7ff fddb 	bl	80013e0 <_Error_Handler>
 800182a:	e7c3      	b.n	80017b4 <MX_TIM9_Init+0x24>
 800182c:	200040a0 	.word	0x200040a0
 8001830:	40014000 	.word	0x40014000
 8001834:	08006f08 	.word	0x08006f08

08001838 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4910      	ldr	r1, [pc, #64]	; (800187c <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800183c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001840:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8001844:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001846:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800184a:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800184c:	4c0d      	ldr	r4, [pc, #52]	; (8001884 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 800184e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001850:	f042 0201 	orr.w	r2, r2, #1
 8001854:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001856:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800185e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001862:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8001864:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001866:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001868:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800186c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001870:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8001872:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001874:	608c      	str	r4, [r1, #8]
#endif
}
 8001876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00
 8001880:	40023800 	.word	0x40023800
 8001884:	24003010 	.word	0x24003010

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_Init+0x30>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001892:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800189a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f000 f82d 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f7ff fe62 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b0:	f7ff fe30 	bl	8001514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80018b4:	2000      	movs	r0, #0
 80018b6:	bd08      	pop	{r3, pc}
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018bc:	4a03      	ldr	r2, [pc, #12]	; (80018cc <HAL_IncTick+0x10>)
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <HAL_IncTick+0x14>)
 80018c0:	6811      	ldr	r1, [r2, #0]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	440b      	add	r3, r1
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	200040dc 	.word	0x200040dc
 80018d0:	20000004 	.word	0x20000004

080018d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018d4:	4b01      	ldr	r3, [pc, #4]	; (80018dc <HAL_GetTick+0x8>)
 80018d6:	6818      	ldr	r0, [r3, #0]
}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200040dc 	.word	0x200040dc

080018e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e0:	b538      	push	{r3, r4, r5, lr}
 80018e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff fff6 	bl	80018d4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80018ea:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80018ec:	d002      	beq.n	80018f4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <HAL_Delay+0x20>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018f4:	f7ff ffee 	bl	80018d4 <HAL_GetTick>
 80018f8:	1b40      	subs	r0, r0, r5
 80018fa:	4284      	cmp	r4, r0
 80018fc:	d8fa      	bhi.n	80018f4 <HAL_Delay+0x14>
  {
  }
}
 80018fe:	bd38      	pop	{r3, r4, r5, pc}
 8001900:	20000004 	.word	0x20000004

08001904 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001906:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001908:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800190c:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800190e:	0200      	lsls	r0, r0, #8
 8001910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001914:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800191c:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800191e:	60d3      	str	r3, [r2, #12]
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192a:	b470      	push	{r4, r5, r6}
 800192c:	68dc      	ldr	r4, [r3, #12]
 800192e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001932:	f1c4 0607 	rsb	r6, r4, #7
 8001936:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001938:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	bf28      	it	cs
 800193e:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001940:	2b06      	cmp	r3, #6
 8001942:	d917      	bls.n	8001974 <HAL_NVIC_SetPriority+0x4c>
 8001944:	3c03      	subs	r4, #3
 8001946:	2501      	movs	r5, #1
 8001948:	40a5      	lsls	r5, r4
 800194a:	3d01      	subs	r5, #1
 800194c:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194e:	2301      	movs	r3, #1
 8001950:	40b3      	lsls	r3, r6
 8001952:	3b01      	subs	r3, #1
 8001954:	4019      	ands	r1, r3
 8001956:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8001958:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 800195e:	db0c      	blt.n	800197a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001964:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001968:	0109      	lsls	r1, r1, #4
 800196a:	b2c9      	uxtb	r1, r1
 800196c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001970:	bc70      	pop	{r4, r5, r6}
 8001972:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001974:	2200      	movs	r2, #0
 8001976:	4614      	mov	r4, r2
 8001978:	e7e9      	b.n	800194e <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_NVIC_SetPriority+0x68>)
 800197c:	f000 000f 	and.w	r0, r0, #15
 8001980:	0109      	lsls	r1, r1, #4
 8001982:	4403      	add	r3, r0
 8001984:	b2c9      	uxtb	r1, r1
 8001986:	7619      	strb	r1, [r3, #24]
 8001988:	bc70      	pop	{r4, r5, r6}
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00
 8001990:	e000ecfc 	.word	0xe000ecfc

08001994 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001994:	f000 011f 	and.w	r1, r0, #31
 8001998:	2301      	movs	r3, #1
 800199a:	0940      	lsrs	r0, r0, #5
 800199c:	4a02      	ldr	r2, [pc, #8]	; (80019a8 <HAL_NVIC_EnableIRQ+0x14>)
 800199e:	408b      	lsls	r3, r1
 80019a0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100

080019ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	3801      	subs	r0, #1
 80019ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80019b2:	d20e      	bcs.n	80019d2 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	4c08      	ldr	r4, [pc, #32]	; (80019dc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019bc:	20f0      	movs	r0, #240	; 0xf0
 80019be:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80019cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e010 	.word	0xe000e010
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80019e2:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80019e4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80019e6:	bf0c      	ite	eq
 80019e8:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80019ec:	f023 0304 	bicne.w	r3, r3, #4
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4770      	bx	lr
 80019f4:	e000e010 	.word	0xe000e010

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019fc:	f8d1 c000 	ldr.w	ip, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a00:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8001c18 <HAL_GPIO_Init+0x220>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a04:	f8df e214 	ldr.w	lr, [pc, #532]	; 8001c1c <HAL_GPIO_Init+0x224>
{
 8001a08:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0a:	2500      	movs	r5, #0
 8001a0c:	e003      	b.n	8001a16 <HAL_GPIO_Init+0x1e>
 8001a0e:	3501      	adds	r5, #1
 8001a10:	2d10      	cmp	r5, #16
 8001a12:	f000 809b 	beq.w	8001b4c <HAL_GPIO_Init+0x154>
    ioposition = 0x01U << position;
 8001a16:	2301      	movs	r3, #1
 8001a18:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1a:	ea03 020c 	and.w	r2, r3, ip
    if(iocurrent == ioposition)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d1f5      	bne.n	8001a0e <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a22:	684e      	ldr	r6, [r1, #4]
 8001a24:	f026 0a10 	bic.w	sl, r6, #16
 8001a28:	f1ba 0f02 	cmp.w	sl, #2
 8001a2c:	f000 8091 	beq.w	8001b52 <HAL_GPIO_Init+0x15a>
 8001a30:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a34:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8001a36:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a3a:	fa04 f409 	lsl.w	r4, r4, r9
 8001a3e:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a40:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a44:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a48:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a4c:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a50:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a54:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001a58:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a5a:	f240 80a0 	bls.w	8001b9e <HAL_GPIO_Init+0x1a6>
      temp = GPIOx->PUPDR;
 8001a5e:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a60:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a62:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a64:	fa03 f309 	lsl.w	r3, r3, r9
 8001a68:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 8001a6a:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6c:	00f3      	lsls	r3, r6, #3
 8001a6e:	d5ce      	bpl.n	8001a0e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a70:	f04f 0900 	mov.w	r9, #0
 8001a74:	f8cd 9004 	str.w	r9, [sp, #4]
 8001a78:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a80:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8001a84:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 8001a88:	f025 0303 	bic.w	r3, r5, #3
 8001a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a90:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8001a94:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001a98:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a9a:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa0:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa4:	00a4      	lsls	r4, r4, #2
 8001aa6:	270f      	movs	r7, #15
 8001aa8:	40a7      	lsls	r7, r4
 8001aaa:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aae:	4f54      	ldr	r7, [pc, #336]	; (8001c00 <HAL_GPIO_Init+0x208>)
 8001ab0:	42b8      	cmp	r0, r7
 8001ab2:	d022      	beq.n	8001afa <HAL_GPIO_Init+0x102>
 8001ab4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001ab8:	42b8      	cmp	r0, r7
 8001aba:	f000 8083 	beq.w	8001bc4 <HAL_GPIO_Init+0x1cc>
 8001abe:	4f51      	ldr	r7, [pc, #324]	; (8001c04 <HAL_GPIO_Init+0x20c>)
 8001ac0:	42b8      	cmp	r0, r7
 8001ac2:	f000 8084 	beq.w	8001bce <HAL_GPIO_Init+0x1d6>
 8001ac6:	4f50      	ldr	r7, [pc, #320]	; (8001c08 <HAL_GPIO_Init+0x210>)
 8001ac8:	42b8      	cmp	r0, r7
 8001aca:	f000 8085 	beq.w	8001bd8 <HAL_GPIO_Init+0x1e0>
 8001ace:	4f4f      	ldr	r7, [pc, #316]	; (8001c0c <HAL_GPIO_Init+0x214>)
 8001ad0:	42b8      	cmp	r0, r7
 8001ad2:	f000 8086 	beq.w	8001be2 <HAL_GPIO_Init+0x1ea>
 8001ad6:	4f4e      	ldr	r7, [pc, #312]	; (8001c10 <HAL_GPIO_Init+0x218>)
 8001ad8:	42b8      	cmp	r0, r7
 8001ada:	f000 8087 	beq.w	8001bec <HAL_GPIO_Init+0x1f4>
 8001ade:	4f4d      	ldr	r7, [pc, #308]	; (8001c14 <HAL_GPIO_Init+0x21c>)
 8001ae0:	42b8      	cmp	r0, r7
 8001ae2:	f000 8088 	beq.w	8001bf6 <HAL_GPIO_Init+0x1fe>
 8001ae6:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8001c20 <HAL_GPIO_Init+0x228>
 8001aea:	4548      	cmp	r0, r9
 8001aec:	bf0c      	ite	eq
 8001aee:	f04f 0907 	moveq.w	r9, #7
 8001af2:	f04f 0908 	movne.w	r9, #8
 8001af6:	fa09 f904 	lsl.w	r9, r9, r4
 8001afa:	ea4a 0709 	orr.w	r7, sl, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001afe:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8001b00:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	43d4      	mvns	r4, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b06:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8001b08:	bf54      	ite	pl
 8001b0a:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001b0c:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 8001b0e:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001b12:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b16:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8001b18:	bf54      	ite	pl
 8001b1a:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001b1c:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 8001b1e:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b22:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b26:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8001b28:	bf54      	ite	pl
 8001b2a:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001b2c:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 8001b2e:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001b32:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b36:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b38:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	bf54      	ite	pl
 8001b3e:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001b40:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b42:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8001b44:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b48:	f47f af65 	bne.w	8001a16 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8001b4c:	b003      	add	sp, #12
 8001b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 8001b52:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8001b56:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b5a:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 8001b5e:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b62:	00bf      	lsls	r7, r7, #2
 8001b64:	f04f 0b0f 	mov.w	fp, #15
 8001b68:	fa0b fb07 	lsl.w	fp, fp, r7
 8001b6c:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b70:	690c      	ldr	r4, [r1, #16]
 8001b72:	40bc      	lsls	r4, r7
 8001b74:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001b78:	f8c9 4020 	str.w	r4, [r9, #32]
 8001b7c:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b80:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8001b82:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b86:	fa04 f409 	lsl.w	r4, r4, r9
 8001b8a:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b8c:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b90:	ea0a 0a04 	and.w	sl, sl, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b94:	fa07 f709 	lsl.w	r7, r7, r9
 8001b98:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->MODER = temp;
 8001b9c:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8001b9e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba0:	ea07 0a04 	and.w	sl, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba4:	68cf      	ldr	r7, [r1, #12]
 8001ba6:	fa07 f709 	lsl.w	r7, r7, r9
 8001baa:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001bae:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001bb0:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bb4:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb8:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bbc:	40af      	lsls	r7, r5
 8001bbe:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8001bc0:	6047      	str	r7, [r0, #4]
 8001bc2:	e74c      	b.n	8001a5e <HAL_GPIO_Init+0x66>
 8001bc4:	f04f 0901 	mov.w	r9, #1
 8001bc8:	fa09 f904 	lsl.w	r9, r9, r4
 8001bcc:	e795      	b.n	8001afa <HAL_GPIO_Init+0x102>
 8001bce:	f04f 0902 	mov.w	r9, #2
 8001bd2:	fa09 f904 	lsl.w	r9, r9, r4
 8001bd6:	e790      	b.n	8001afa <HAL_GPIO_Init+0x102>
 8001bd8:	f04f 0903 	mov.w	r9, #3
 8001bdc:	fa09 f904 	lsl.w	r9, r9, r4
 8001be0:	e78b      	b.n	8001afa <HAL_GPIO_Init+0x102>
 8001be2:	f04f 0904 	mov.w	r9, #4
 8001be6:	fa09 f904 	lsl.w	r9, r9, r4
 8001bea:	e786      	b.n	8001afa <HAL_GPIO_Init+0x102>
 8001bec:	f04f 0905 	mov.w	r9, #5
 8001bf0:	fa09 f904 	lsl.w	r9, r9, r4
 8001bf4:	e781      	b.n	8001afa <HAL_GPIO_Init+0x102>
 8001bf6:	f04f 0906 	mov.w	r9, #6
 8001bfa:	fa09 f904 	lsl.w	r9, r9, r4
 8001bfe:	e77c      	b.n	8001afa <HAL_GPIO_Init+0x102>
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40021400 	.word	0x40021400
 8001c14:	40021800 	.word	0x40021800
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40013c00 	.word	0x40013c00
 8001c20:	40021c00 	.word	0x40021c00

08001c24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c24:	b902      	cbnz	r2, 8001c28 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c26:	0409      	lsls	r1, r1, #16
 8001c28:	6181      	str	r1, [r0, #24]
 8001c2a:	4770      	bx	lr

08001c2c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001c2c:	6943      	ldr	r3, [r0, #20]
 8001c2e:	4059      	eors	r1, r3
 8001c30:	6141      	str	r1, [r0, #20]
 8001c32:	4770      	bx	lr

08001c34 <HAL_I2C_Init>:
{
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d06c      	beq.n	8001d12 <HAL_I2C_Init+0xde>
{
 8001c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001c3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c3e:	4604      	mov	r4, r0
 8001c40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d04f      	beq.n	8001ce8 <HAL_I2C_Init+0xb4>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c48:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c4a:	4d33      	ldr	r5, [pc, #204]	; (8001d18 <HAL_I2C_Init+0xe4>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c4c:	2324      	movs	r3, #36	; 0x24
 8001c4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001c52:	6813      	ldr	r3, [r2, #0]
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c5a:	f000 faf5 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
  freqrange = I2C_FREQRANGE(pclk1);
 8001c5e:	4a2f      	ldr	r2, [pc, #188]	; (8001d1c <HAL_I2C_Init+0xe8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c60:	6861      	ldr	r1, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001c62:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001c64:	fba2 6200 	umull	r6, r2, r2, r0
 8001c68:	0c92      	lsrs	r2, r2, #18
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c6a:	42a9      	cmp	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001c6c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c6e:	d826      	bhi.n	8001cbe <HAL_I2C_Init+0x8a>

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c70:	0049      	lsls	r1, r1, #1
 8001c72:	fbb0 f0f1 	udiv	r0, r0, r1
 8001c76:	f3c0 010b 	ubfx	r1, r0, #0, #12
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c7a:	3201      	adds	r2, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c7c:	2903      	cmp	r1, #3
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c7e:	621a      	str	r2, [r3, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c80:	bf98      	it	ls
 8001c82:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c84:	69e5      	ldr	r5, [r4, #28]
 8001c86:	f8d4 e020 	ldr.w	lr, [r4, #32]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001c8a:	6921      	ldr	r1, [r4, #16]
 8001c8c:	68e7      	ldr	r7, [r4, #12]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001c8e:	6962      	ldr	r2, [r4, #20]
 8001c90:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c92:	61d8      	str	r0, [r3, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c94:	ea45 050e 	orr.w	r5, r5, lr
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001c98:	4339      	orrs	r1, r7
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001c9a:	4332      	orrs	r2, r6
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c9c:	601d      	str	r5, [r3, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001c9e:	6099      	str	r1, [r3, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001ca0:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ca2:	6819      	ldr	r1, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca4:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 8001ca6:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8001cac:	6019      	str	r1, [r3, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8001cae:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb0:	6422      	str	r2, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cb6:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  return HAL_OK;
 8001cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001cbe:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8001cc2:	4f17      	ldr	r7, [pc, #92]	; (8001d20 <HAL_I2C_Init+0xec>)
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001cc4:	68a6      	ldr	r6, [r4, #8]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001cc6:	fb05 f202 	mul.w	r2, r5, r2
 8001cca:	fba7 5202 	umull	r5, r2, r7, r2
 8001cce:	0992      	lsrs	r2, r2, #6
 8001cd0:	3201      	adds	r2, #1
 8001cd2:	621a      	str	r2, [r3, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001cd4:	b96e      	cbnz	r6, 8001cf2 <HAL_I2C_Init+0xbe>
 8001cd6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001cda:	fbb0 f0f1 	udiv	r0, r0, r1
 8001cde:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001ce2:	b99a      	cbnz	r2, 8001d0c <HAL_I2C_Init+0xd8>
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	e7cd      	b.n	8001c84 <HAL_I2C_Init+0x50>
    hi2c->Lock = HAL_UNLOCKED;
 8001ce8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001cec:	f7ff faca 	bl	8001284 <HAL_I2C_MspInit>
 8001cf0:	e7aa      	b.n	8001c48 <HAL_I2C_Init+0x14>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001cf2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001cf6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001cfa:	fbb0 f0f1 	udiv	r0, r0, r1
 8001cfe:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001d02:	2a00      	cmp	r2, #0
 8001d04:	d0ee      	beq.n	8001ce4 <HAL_I2C_Init+0xb0>
 8001d06:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001d0a:	e7bb      	b.n	8001c84 <HAL_I2C_Init+0x50>
 8001d0c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001d10:	e7b8      	b.n	8001c84 <HAL_I2C_Init+0x50>
    return HAL_ERROR;
 8001d12:	2001      	movs	r0, #1
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	000186a0 	.word	0x000186a0
 8001d1c:	431bde83 	.word	0x431bde83
 8001d20:	10624dd3 	.word	0x10624dd3

08001d24 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d24:	2800      	cmp	r0, #0
 8001d26:	f000 81b2 	beq.w	800208e <HAL_RCC_OscConfig+0x36a>
{
 8001d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2e:	6803      	ldr	r3, [r0, #0]
 8001d30:	07dd      	lsls	r5, r3, #31
{
 8001d32:	b082      	sub	sp, #8
 8001d34:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d36:	d52f      	bpl.n	8001d98 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d38:	49ab      	ldr	r1, [pc, #684]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
 8001d3a:	688a      	ldr	r2, [r1, #8]
 8001d3c:	f002 020c 	and.w	r2, r2, #12
 8001d40:	2a04      	cmp	r2, #4
 8001d42:	f000 8123 	beq.w	8001f8c <HAL_RCC_OscConfig+0x268>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d46:	688a      	ldr	r2, [r1, #8]
 8001d48:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d4c:	2a08      	cmp	r2, #8
 8001d4e:	f000 8119 	beq.w	8001f84 <HAL_RCC_OscConfig+0x260>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d52:	6863      	ldr	r3, [r4, #4]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d58:	f000 815a 	beq.w	8002010 <HAL_RCC_OscConfig+0x2ec>
 8001d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d60:	f000 80e5 	beq.w	8001f2e <HAL_RCC_OscConfig+0x20a>
 8001d64:	4da0      	ldr	r5, [pc, #640]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
 8001d66:	682a      	ldr	r2, [r5, #0]
 8001d68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d6c:	602a      	str	r2, [r5, #0]
 8001d6e:	682a      	ldr	r2, [r5, #0]
 8001d70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d74:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 80e2 	bne.w	8001f40 <HAL_RCC_OscConfig+0x21c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fdaa 	bl	80018d4 <HAL_GetTick>
 8001d80:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	e005      	b.n	8001d90 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fda6 	bl	80018d4 <HAL_GetTick>
 8001d88:	1b80      	subs	r0, r0, r6
 8001d8a:	2864      	cmp	r0, #100	; 0x64
 8001d8c:	f200 80f6 	bhi.w	8001f7c <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d90:	682b      	ldr	r3, [r5, #0]
 8001d92:	039b      	lsls	r3, r3, #14
 8001d94:	d4f6      	bmi.n	8001d84 <HAL_RCC_OscConfig+0x60>
 8001d96:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d98:	079f      	lsls	r7, r3, #30
 8001d9a:	d528      	bpl.n	8001dee <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d9c:	4a92      	ldr	r2, [pc, #584]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
 8001d9e:	6891      	ldr	r1, [r2, #8]
 8001da0:	f011 0f0c 	tst.w	r1, #12
 8001da4:	f000 8090 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da8:	6891      	ldr	r1, [r2, #8]
 8001daa:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dae:	2908      	cmp	r1, #8
 8001db0:	f000 8086 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001db4:	68e3      	ldr	r3, [r4, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 810f 	beq.w	8001fda <HAL_RCC_OscConfig+0x2b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dbc:	4b8b      	ldr	r3, [pc, #556]	; (8001fec <HAL_RCC_OscConfig+0x2c8>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbe:	4d8a      	ldr	r5, [pc, #552]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_ENABLE();
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fd86 	bl	80018d4 <HAL_GetTick>
 8001dc8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dca:	e005      	b.n	8001dd8 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fd82 	bl	80018d4 <HAL_GetTick>
 8001dd0:	1b80      	subs	r0, r0, r6
 8001dd2:	2802      	cmp	r0, #2
 8001dd4:	f200 80d2 	bhi.w	8001f7c <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	682b      	ldr	r3, [r5, #0]
 8001dda:	0798      	lsls	r0, r3, #30
 8001ddc:	d5f6      	bpl.n	8001dcc <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dde:	682b      	ldr	r3, [r5, #0]
 8001de0:	6922      	ldr	r2, [r4, #16]
 8001de2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001de6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001dea:	602b      	str	r3, [r5, #0]
 8001dec:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dee:	071a      	lsls	r2, r3, #28
 8001df0:	d452      	bmi.n	8001e98 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df2:	0758      	lsls	r0, r3, #29
 8001df4:	d530      	bpl.n	8001e58 <HAL_RCC_OscConfig+0x134>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df6:	4a7c      	ldr	r2, [pc, #496]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
 8001df8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001dfa:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	d07e      	beq.n	8001efe <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8001e00:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	4d7b      	ldr	r5, [pc, #492]	; (8001ff0 <HAL_RCC_OscConfig+0x2cc>)
 8001e04:	682b      	ldr	r3, [r5, #0]
 8001e06:	05d9      	lsls	r1, r3, #23
 8001e08:	f140 80a8 	bpl.w	8001f5c <HAL_RCC_OscConfig+0x238>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0c:	68a3      	ldr	r3, [r4, #8]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	f000 8104 	beq.w	800201c <HAL_RCC_OscConfig+0x2f8>
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	f000 80c3 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x27c>
 8001e1a:	4d73      	ldr	r5, [pc, #460]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
 8001e1c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001e1e:	f022 0201 	bic.w	r2, r2, #1
 8001e22:	672a      	str	r2, [r5, #112]	; 0x70
 8001e24:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001e26:	f022 0204 	bic.w	r2, r2, #4
 8001e2a:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 80c0 	bne.w	8001fb2 <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e32:	f7ff fd4f 	bl	80018d4 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e3a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	e006      	b.n	8001e4c <HAL_RCC_OscConfig+0x128>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7ff fd49 	bl	80018d4 <HAL_GetTick>
 8001e42:	eba0 0008 	sub.w	r0, r0, r8
 8001e46:	42b8      	cmp	r0, r7
 8001e48:	f200 8098 	bhi.w	8001f7c <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e4e:	0798      	lsls	r0, r3, #30
 8001e50:	d4f5      	bmi.n	8001e3e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e52:	2e00      	cmp	r6, #0
 8001e54:	f040 80e8 	bne.w	8002028 <HAL_RCC_OscConfig+0x304>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e58:	69a3      	ldr	r3, [r4, #24]
 8001e5a:	b1cb      	cbz	r3, 8001e90 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e5c:	4d62      	ldr	r5, [pc, #392]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
 8001e5e:	68aa      	ldr	r2, [r5, #8]
 8001e60:	f002 020c 	and.w	r2, r2, #12
 8001e64:	2a08      	cmp	r2, #8
 8001e66:	d036      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1b2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e68:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6a:	4b62      	ldr	r3, [pc, #392]	; (8001ff4 <HAL_RCC_OscConfig+0x2d0>)
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e72:	f000 80df 	beq.w	8002034 <HAL_RCC_OscConfig+0x310>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7ff fd2d 	bl	80018d4 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001e7c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	e004      	b.n	8001e8a <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff fd28 	bl	80018d4 <HAL_GetTick>
 8001e84:	1b40      	subs	r0, r0, r5
 8001e86:	2802      	cmp	r0, #2
 8001e88:	d878      	bhi.n	8001f7c <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	019b      	lsls	r3, r3, #6
 8001e8e:	d4f7      	bmi.n	8001e80 <HAL_RCC_OscConfig+0x15c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001e90:	2000      	movs	r0, #0
}
 8001e92:	b002      	add	sp, #8
 8001e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e98:	6963      	ldr	r3, [r4, #20]
 8001e9a:	b303      	cbz	r3, 8001ede <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8001e9c:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	4d52      	ldr	r5, [pc, #328]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_ENABLE();
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fd16 	bl	80018d4 <HAL_GetTick>
 8001ea8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	e004      	b.n	8001eb6 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eac:	f7ff fd12 	bl	80018d4 <HAL_GetTick>
 8001eb0:	1b80      	subs	r0, r0, r6
 8001eb2:	2802      	cmp	r0, #2
 8001eb4:	d862      	bhi.n	8001f7c <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001eb8:	079b      	lsls	r3, r3, #30
 8001eba:	d5f7      	bpl.n	8001eac <HAL_RCC_OscConfig+0x188>
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	e798      	b.n	8001df2 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec0:	6852      	ldr	r2, [r2, #4]
 8001ec2:	0256      	lsls	r6, r2, #9
 8001ec4:	f53f af76 	bmi.w	8001db4 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec8:	4a47      	ldr	r2, [pc, #284]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	0795      	lsls	r5, r2, #30
 8001ece:	d522      	bpl.n	8001f16 <HAL_RCC_OscConfig+0x1f2>
 8001ed0:	68e2      	ldr	r2, [r4, #12]
 8001ed2:	2a01      	cmp	r2, #1
 8001ed4:	d01f      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1f2>
    return HAL_ERROR;
 8001ed6:	2001      	movs	r0, #1
}
 8001ed8:	b002      	add	sp, #8
 8001eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001ede:	4a46      	ldr	r2, [pc, #280]	; (8001ff8 <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	4d41      	ldr	r5, [pc, #260]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_DISABLE();
 8001ee2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001ee4:	f7ff fcf6 	bl	80018d4 <HAL_GetTick>
 8001ee8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eea:	e004      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff fcf2 	bl	80018d4 <HAL_GetTick>
 8001ef0:	1b80      	subs	r0, r0, r6
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d842      	bhi.n	8001f7c <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001ef8:	079f      	lsls	r7, r3, #30
 8001efa:	d4f7      	bmi.n	8001eec <HAL_RCC_OscConfig+0x1c8>
 8001efc:	e7de      	b.n	8001ebc <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f06:	6413      	str	r3, [r2, #64]	; 0x40
 8001f08:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f12:	2601      	movs	r6, #1
 8001f14:	e775      	b.n	8001e02 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4934      	ldr	r1, [pc, #208]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
 8001f18:	6920      	ldr	r0, [r4, #16]
 8001f1a:	680a      	ldr	r2, [r1, #0]
 8001f1c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001f20:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001f24:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f26:	071a      	lsls	r2, r3, #28
 8001f28:	f57f af63 	bpl.w	8001df2 <HAL_RCC_OscConfig+0xce>
 8001f2c:	e7b4      	b.n	8001e98 <HAL_RCC_OscConfig+0x174>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f40:	f7ff fcc8 	bl	80018d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f44:	4d28      	ldr	r5, [pc, #160]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8001f46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f48:	e004      	b.n	8001f54 <HAL_RCC_OscConfig+0x230>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4a:	f7ff fcc3 	bl	80018d4 <HAL_GetTick>
 8001f4e:	1b80      	subs	r0, r0, r6
 8001f50:	2864      	cmp	r0, #100	; 0x64
 8001f52:	d813      	bhi.n	8001f7c <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f54:	682b      	ldr	r3, [r5, #0]
 8001f56:	039a      	lsls	r2, r3, #14
 8001f58:	d5f7      	bpl.n	8001f4a <HAL_RCC_OscConfig+0x226>
 8001f5a:	e71c      	b.n	8001d96 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5c:	682b      	ldr	r3, [r5, #0]
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f62:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001f64:	f7ff fcb6 	bl	80018d4 <HAL_GetTick>
 8001f68:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	682b      	ldr	r3, [r5, #0]
 8001f6c:	05da      	lsls	r2, r3, #23
 8001f6e:	f53f af4d 	bmi.w	8001e0c <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f72:	f7ff fcaf 	bl	80018d4 <HAL_GetTick>
 8001f76:	1bc0      	subs	r0, r0, r7
 8001f78:	2802      	cmp	r0, #2
 8001f7a:	d9f6      	bls.n	8001f6a <HAL_RCC_OscConfig+0x246>
            return HAL_TIMEOUT;
 8001f7c:	2003      	movs	r0, #3
}
 8001f7e:	b002      	add	sp, #8
 8001f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f84:	684a      	ldr	r2, [r1, #4]
 8001f86:	0250      	lsls	r0, r2, #9
 8001f88:	f57f aee3 	bpl.w	8001d52 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	4a16      	ldr	r2, [pc, #88]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	0391      	lsls	r1, r2, #14
 8001f92:	f57f af01 	bpl.w	8001d98 <HAL_RCC_OscConfig+0x74>
 8001f96:	6862      	ldr	r2, [r4, #4]
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	f47f aefd 	bne.w	8001d98 <HAL_RCC_OscConfig+0x74>
 8001f9e:	e79a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
 8001fa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fa4:	f042 0204 	orr.w	r2, r2, #4
 8001fa8:	671a      	str	r2, [r3, #112]	; 0x70
 8001faa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fac:	f042 0201 	orr.w	r2, r2, #1
 8001fb0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001fb2:	f7ff fc8f 	bl	80018d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb6:	4d0c      	ldr	r5, [pc, #48]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 8001fb8:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbe:	e005      	b.n	8001fcc <HAL_RCC_OscConfig+0x2a8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fc88 	bl	80018d4 <HAL_GetTick>
 8001fc4:	eba0 0008 	sub.w	r0, r0, r8
 8001fc8:	42b8      	cmp	r0, r7
 8001fca:	d8d7      	bhi.n	8001f7c <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001fce:	079b      	lsls	r3, r3, #30
 8001fd0:	d5f6      	bpl.n	8001fc0 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8001fd2:	2e00      	cmp	r6, #0
 8001fd4:	f43f af40 	beq.w	8001e58 <HAL_RCC_OscConfig+0x134>
 8001fd8:	e026      	b.n	8002028 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_HSI_DISABLE();
 8001fda:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_RCC_OscConfig+0x2c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fdc:	4d02      	ldr	r5, [pc, #8]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_DISABLE();
 8001fde:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fc78 	bl	80018d4 <HAL_GetTick>
 8001fe4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	e00e      	b.n	8002006 <HAL_RCC_OscConfig+0x2e2>
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	42470000 	.word	0x42470000
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	42470060 	.word	0x42470060
 8001ff8:	42470e80 	.word	0x42470e80
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7ff fc6a 	bl	80018d4 <HAL_GetTick>
 8002000:	1b80      	subs	r0, r0, r6
 8002002:	2802      	cmp	r0, #2
 8002004:	d8ba      	bhi.n	8001f7c <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002006:	682b      	ldr	r3, [r5, #0]
 8002008:	0799      	lsls	r1, r3, #30
 800200a:	d4f7      	bmi.n	8001ffc <HAL_RCC_OscConfig+0x2d8>
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	e6ee      	b.n	8001dee <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002010:	4a20      	ldr	r2, [pc, #128]	; (8002094 <HAL_RCC_OscConfig+0x370>)
 8002012:	6813      	ldr	r3, [r2, #0]
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e791      	b.n	8001f40 <HAL_RCC_OscConfig+0x21c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201c:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <HAL_RCC_OscConfig+0x370>)
 800201e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6713      	str	r3, [r2, #112]	; 0x70
 8002026:	e7c4      	b.n	8001fb2 <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002028:	4a1a      	ldr	r2, [pc, #104]	; (8002094 <HAL_RCC_OscConfig+0x370>)
 800202a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800202c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	e711      	b.n	8001e58 <HAL_RCC_OscConfig+0x134>
        tickstart = HAL_GetTick();
 8002034:	f7ff fc4e 	bl	80018d4 <HAL_GetTick>
 8002038:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	e004      	b.n	8002046 <HAL_RCC_OscConfig+0x322>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff fc4a 	bl	80018d4 <HAL_GetTick>
 8002040:	1b80      	subs	r0, r0, r6
 8002042:	2802      	cmp	r0, #2
 8002044:	d89a      	bhi.n	8001f7c <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	682b      	ldr	r3, [r5, #0]
 8002048:	0199      	lsls	r1, r3, #6
 800204a:	d4f7      	bmi.n	800203c <HAL_RCC_OscConfig+0x318>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800204c:	69e3      	ldr	r3, [r4, #28]
 800204e:	6a27      	ldr	r7, [r4, #32]
 8002050:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002052:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002054:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002056:	4910      	ldr	r1, [pc, #64]	; (8002098 <HAL_RCC_OscConfig+0x374>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002058:	4c0e      	ldr	r4, [pc, #56]	; (8002094 <HAL_RCC_OscConfig+0x370>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800205a:	433b      	orrs	r3, r7
 800205c:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8002060:	0852      	lsrs	r2, r2, #1
 8002062:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002066:	3a01      	subs	r2, #1
 8002068:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800206c:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800206e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002070:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8002072:	f7ff fc2f 	bl	80018d4 <HAL_GetTick>
 8002076:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002078:	e005      	b.n	8002086 <HAL_RCC_OscConfig+0x362>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207a:	f7ff fc2b 	bl	80018d4 <HAL_GetTick>
 800207e:	1b40      	subs	r0, r0, r5
 8002080:	2802      	cmp	r0, #2
 8002082:	f63f af7b 	bhi.w	8001f7c <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	019a      	lsls	r2, r3, #6
 800208a:	d5f6      	bpl.n	800207a <HAL_RCC_OscConfig+0x356>
 800208c:	e700      	b.n	8001e90 <HAL_RCC_OscConfig+0x16c>
    return HAL_ERROR;
 800208e:	2001      	movs	r0, #1
}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	42470060 	.word	0x42470060

0800209c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800209c:	4917      	ldr	r1, [pc, #92]	; (80020fc <HAL_RCC_GetSysClockFreq+0x60>)
{
 800209e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020a0:	688b      	ldr	r3, [r1, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d01b      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x46>
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d117      	bne.n	80020de <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020ae:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020b0:	684b      	ldr	r3, [r1, #4]
 80020b2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020b6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ba:	d114      	bne.n	80020e6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020bc:	6849      	ldr	r1, [r1, #4]
 80020be:	4810      	ldr	r0, [pc, #64]	; (8002100 <HAL_RCC_GetSysClockFreq+0x64>)
 80020c0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80020c4:	fba1 0100 	umull	r0, r1, r1, r0
 80020c8:	f7fe fd8a 	bl	8000be0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_GetSysClockFreq+0x60>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80020d4:	3301      	adds	r3, #1
 80020d6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80020d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80020dc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80020de:	4808      	ldr	r0, [pc, #32]	; (8002100 <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020e0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80020e2:	4808      	ldr	r0, [pc, #32]	; (8002104 <HAL_RCC_GetSysClockFreq+0x68>)
 80020e4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e6:	684b      	ldr	r3, [r1, #4]
 80020e8:	4806      	ldr	r0, [pc, #24]	; (8002104 <HAL_RCC_GetSysClockFreq+0x68>)
 80020ea:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80020ee:	fba3 0100 	umull	r0, r1, r3, r0
 80020f2:	2300      	movs	r3, #0
 80020f4:	f7fe fd74 	bl	8000be0 <__aeabi_uldivmod>
 80020f8:	e7e8      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x30>
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	00f42400 	.word	0x00f42400
 8002104:	007a1200 	.word	0x007a1200

08002108 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002108:	b160      	cbz	r0, 8002124 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800210a:	4a48      	ldr	r2, [pc, #288]	; (800222c <HAL_RCC_ClockConfig+0x124>)
 800210c:	6813      	ldr	r3, [r2, #0]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	428b      	cmp	r3, r1
 8002114:	d208      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	b2cb      	uxtb	r3, r1
 8002118:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	6813      	ldr	r3, [r2, #0]
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	4299      	cmp	r1, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8002124:	2001      	movs	r0, #1
}
 8002126:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	6803      	ldr	r3, [r0, #0]
{
 800212a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212e:	079d      	lsls	r5, r3, #30
 8002130:	d514      	bpl.n	800215c <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002132:	075c      	lsls	r4, r3, #29
 8002134:	d504      	bpl.n	8002140 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002136:	4c3e      	ldr	r4, [pc, #248]	; (8002230 <HAL_RCC_ClockConfig+0x128>)
 8002138:	68a2      	ldr	r2, [r4, #8]
 800213a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800213e:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002140:	071a      	lsls	r2, r3, #28
 8002142:	d504      	bpl.n	800214e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002144:	4c3a      	ldr	r4, [pc, #232]	; (8002230 <HAL_RCC_ClockConfig+0x128>)
 8002146:	68a2      	ldr	r2, [r4, #8]
 8002148:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800214c:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214e:	4c38      	ldr	r4, [pc, #224]	; (8002230 <HAL_RCC_ClockConfig+0x128>)
 8002150:	6885      	ldr	r5, [r0, #8]
 8002152:	68a2      	ldr	r2, [r4, #8]
 8002154:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002158:	432a      	orrs	r2, r5
 800215a:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215c:	07df      	lsls	r7, r3, #31
 800215e:	4604      	mov	r4, r0
 8002160:	460d      	mov	r5, r1
 8002162:	d522      	bpl.n	80021aa <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002164:	6842      	ldr	r2, [r0, #4]
 8002166:	2a01      	cmp	r2, #1
 8002168:	d05b      	beq.n	8002222 <HAL_RCC_ClockConfig+0x11a>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216a:	1e93      	subs	r3, r2, #2
 800216c:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216e:	4b30      	ldr	r3, [pc, #192]	; (8002230 <HAL_RCC_ClockConfig+0x128>)
 8002170:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002172:	d950      	bls.n	8002216 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002174:	0799      	lsls	r1, r3, #30
 8002176:	d525      	bpl.n	80021c4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002178:	4e2d      	ldr	r6, [pc, #180]	; (8002230 <HAL_RCC_ClockConfig+0x128>)
 800217a:	68b3      	ldr	r3, [r6, #8]
 800217c:	f023 0303 	bic.w	r3, r3, #3
 8002180:	4313      	orrs	r3, r2
 8002182:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002184:	f7ff fba6 	bl	80018d4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002188:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800218c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	e005      	b.n	800219c <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002190:	f7ff fba0 	bl	80018d4 <HAL_GetTick>
 8002194:	eba0 0008 	sub.w	r0, r0, r8
 8002198:	42b8      	cmp	r0, r7
 800219a:	d83f      	bhi.n	800221c <HAL_RCC_ClockConfig+0x114>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219c:	68b3      	ldr	r3, [r6, #8]
 800219e:	6862      	ldr	r2, [r4, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021a8:	d1f2      	bne.n	8002190 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021aa:	4a20      	ldr	r2, [pc, #128]	; (800222c <HAL_RCC_ClockConfig+0x124>)
 80021ac:	6813      	ldr	r3, [r2, #0]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	429d      	cmp	r5, r3
 80021b4:	d209      	bcs.n	80021ca <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	b2eb      	uxtb	r3, r5
 80021b8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	6813      	ldr	r3, [r2, #0]
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	429d      	cmp	r5, r3
 80021c2:	d002      	beq.n	80021ca <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 80021c4:	2001      	movs	r0, #1
 80021c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	075a      	lsls	r2, r3, #29
 80021ce:	d506      	bpl.n	80021de <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d0:	4917      	ldr	r1, [pc, #92]	; (8002230 <HAL_RCC_ClockConfig+0x128>)
 80021d2:	68e0      	ldr	r0, [r4, #12]
 80021d4:	688a      	ldr	r2, [r1, #8]
 80021d6:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80021da:	4302      	orrs	r2, r0
 80021dc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021de:	071b      	lsls	r3, r3, #28
 80021e0:	d507      	bpl.n	80021f2 <HAL_RCC_ClockConfig+0xea>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021e2:	4a13      	ldr	r2, [pc, #76]	; (8002230 <HAL_RCC_ClockConfig+0x128>)
 80021e4:	6921      	ldr	r1, [r4, #16]
 80021e6:	6893      	ldr	r3, [r2, #8]
 80021e8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80021ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021f0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021f2:	f7ff ff53 	bl	800209c <HAL_RCC_GetSysClockFreq>
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <HAL_RCC_ClockConfig+0x128>)
 80021f8:	490e      	ldr	r1, [pc, #56]	; (8002234 <HAL_RCC_ClockConfig+0x12c>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <HAL_RCC_ClockConfig+0x130>)
 80021fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 8002208:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800220a:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800220c:	f7ff f9b2 	bl	8001574 <HAL_InitTick>
  return HAL_OK;
 8002210:	2000      	movs	r0, #0
 8002212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002216:	0198      	lsls	r0, r3, #6
 8002218:	d4ae      	bmi.n	8002178 <HAL_RCC_ClockConfig+0x70>
 800221a:	e7d3      	b.n	80021c4 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 800221c:	2003      	movs	r0, #3
}
 800221e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_RCC_ClockConfig+0x128>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	039e      	lsls	r6, r3, #14
 8002228:	d4a6      	bmi.n	8002178 <HAL_RCC_ClockConfig+0x70>
 800222a:	e7cb      	b.n	80021c4 <HAL_RCC_ClockConfig+0xbc>
 800222c:	40023c00 	.word	0x40023c00
 8002230:	40023800 	.word	0x40023800
 8002234:	08006f1c 	.word	0x08006f1c
 8002238:	20000000 	.word	0x20000000

0800223c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800223c:	4b01      	ldr	r3, [pc, #4]	; (8002244 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000000 	.word	0x20000000

08002248 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <HAL_RCC_GetPCLK1Freq+0x14>)
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x18>)
 800224c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800224e:	4905      	ldr	r1, [pc, #20]	; (8002264 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002250:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002254:	6808      	ldr	r0, [r1, #0]
 8002256:	5cd3      	ldrb	r3, [r2, r3]
}
 8002258:	40d8      	lsrs	r0, r3
 800225a:	4770      	bx	lr
 800225c:	40023800 	.word	0x40023800
 8002260:	08006f2c 	.word	0x08006f2c
 8002264:	20000000 	.word	0x20000000

08002268 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800226a:	220f      	movs	r2, #15
 800226c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	f002 0203 	and.w	r2, r2, #3
 8002274:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800227c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002284:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	08db      	lsrs	r3, r3, #3
{
 800228a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800228c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002290:	4c05      	ldr	r4, [pc, #20]	; (80022a8 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002292:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002294:	6823      	ldr	r3, [r4, #0]
}
 8002296:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	600b      	str	r3, [r1, #0]
}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40023c00 	.word	0x40023c00

080022ac <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80022ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022b0:	4680      	mov	r8, r0
 80022b2:	460f      	mov	r7, r1
 80022b4:	4616      	mov	r6, r2
 80022b6:	461d      	mov	r5, r3
 80022b8:	f8d8 4000 	ldr.w	r4, [r8]
 80022bc:	e001      	b.n	80022c2 <SPI_WaitFlagStateUntilTimeout+0x16>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
 80022be:	1c6b      	adds	r3, r5, #1
 80022c0:	d10a      	bne.n	80022d8 <SPI_WaitFlagStateUntilTimeout+0x2c>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80022c2:	68a0      	ldr	r0, [r4, #8]
 80022c4:	ea37 0300 	bics.w	r3, r7, r0
 80022c8:	bf0c      	ite	eq
 80022ca:	2001      	moveq	r0, #1
 80022cc:	2000      	movne	r0, #0
 80022ce:	4286      	cmp	r6, r0
 80022d0:	d1f5      	bne.n	80022be <SPI_WaitFlagStateUntilTimeout+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80022d2:	2000      	movs	r0, #0
}
 80022d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80022d8:	b13d      	cbz	r5, 80022ea <SPI_WaitFlagStateUntilTimeout+0x3e>
 80022da:	f7ff fafb 	bl	80018d4 <HAL_GetTick>
 80022de:	9b06      	ldr	r3, [sp, #24]
 80022e0:	1ac0      	subs	r0, r0, r3
 80022e2:	4285      	cmp	r5, r0
 80022e4:	d8e8      	bhi.n	80022b8 <SPI_WaitFlagStateUntilTimeout+0xc>
 80022e6:	f8d8 4000 	ldr.w	r4, [r8]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022ea:	6863      	ldr	r3, [r4, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022ec:	f8d8 2004 	ldr.w	r2, [r8, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022f0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022f4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022f8:	6063      	str	r3, [r4, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022fa:	d017      	beq.n	800232c <SPI_WaitFlagStateUntilTimeout+0x80>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022fc:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8002300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002304:	d008      	beq.n	8002318 <SPI_WaitFlagStateUntilTimeout+0x6c>
        hspi->State= HAL_SPI_STATE_READY;
 8002306:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8002308:	2300      	movs	r3, #0
        hspi->State= HAL_SPI_STATE_READY;
 800230a:	f888 2051 	strb.w	r2, [r8, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800230e:	f888 3050 	strb.w	r3, [r8, #80]	; 0x50
 8002312:	2003      	movs	r0, #3
 8002314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SPI_RESET_CRC(hspi);
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 800231e:	4013      	ands	r3, r2
 8002320:	6023      	str	r3, [r4, #0]
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002328:	6023      	str	r3, [r4, #0]
 800232a:	e7ec      	b.n	8002306 <SPI_WaitFlagStateUntilTimeout+0x5a>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800232c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002334:	d002      	beq.n	800233c <SPI_WaitFlagStateUntilTimeout+0x90>
 8002336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800233a:	d1df      	bne.n	80022fc <SPI_WaitFlagStateUntilTimeout+0x50>
          __HAL_SPI_DISABLE(hspi);
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002342:	6023      	str	r3, [r4, #0]
 8002344:	e7da      	b.n	80022fc <SPI_WaitFlagStateUntilTimeout+0x50>
 8002346:	bf00      	nop

08002348 <HAL_SPI_TransmitReceive.part.1>:
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8002348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800234c:	4604      	mov	r4, r0
 800234e:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8002350:	2001      	movs	r0, #1
 8002352:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8002356:	460f      	mov	r7, r1
 8002358:	4616      	mov	r6, r2
 800235a:	4699      	mov	r9, r3
 800235c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 800235e:	f7ff fab9 	bl	80018d4 <HAL_GetTick>
  tmp  = hspi->State;
 8002362:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8002366:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8002368:	b2d2      	uxtb	r2, r2
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800236a:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 800236c:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800236e:	d011      	beq.n	8002394 <HAL_SPI_TransmitReceive.part.1+0x4c>
 8002370:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002374:	d009      	beq.n	800238a <HAL_SPI_TransmitReceive.part.1+0x42>
    errorcode = HAL_BUSY;
 8002376:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002378:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800237a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800237c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002380:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002384:	b005      	add	sp, #20
 8002386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800238a:	68a3      	ldr	r3, [r4, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f2      	bne.n	8002376 <HAL_SPI_TransmitReceive.part.1+0x2e>
 8002390:	2a04      	cmp	r2, #4
 8002392:	d1f0      	bne.n	8002376 <HAL_SPI_TransmitReceive.part.1+0x2e>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8002394:	2f00      	cmp	r7, #0
 8002396:	d064      	beq.n	8002462 <HAL_SPI_TransmitReceive.part.1+0x11a>
 8002398:	2e00      	cmp	r6, #0
 800239a:	d062      	beq.n	8002462 <HAL_SPI_TransmitReceive.part.1+0x11a>
 800239c:	f1b9 0f00 	cmp.w	r9, #0
 80023a0:	d05f      	beq.n	8002462 <HAL_SPI_TransmitReceive.part.1+0x11a>
  if(hspi->State == HAL_SPI_STATE_READY)
 80023a2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80023a6:	6822      	ldr	r2, [r4, #0]
  if(hspi->State == HAL_SPI_STATE_READY)
 80023a8:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023aa:	bf04      	itt	eq
 80023ac:	2305      	moveq	r3, #5
 80023ae:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 80023b6:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80023ba:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80023be:	6810      	ldr	r0, [r2, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023c0:	63a6      	str	r6, [r4, #56]	; 0x38
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80023c2:	0640      	lsls	r0, r0, #25
  hspi->RxXferSize  = Size;
 80023c4:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023c8:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023ca:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80023ce:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023d0:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80023d2:	d403      	bmi.n	80023dc <HAL_SPI_TransmitReceive.part.1+0x94>
    __HAL_SPI_ENABLE(hspi);
 80023d4:	6813      	ldr	r3, [r2, #0]
 80023d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023da:	6013      	str	r3, [r2, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023dc:	68e3      	ldr	r3, [r4, #12]
 80023de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023e2:	d040      	beq.n	8002466 <HAL_SPI_TransmitReceive.part.1+0x11e>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80023e4:	2900      	cmp	r1, #0
 80023e6:	d167      	bne.n	80024b8 <HAL_SPI_TransmitReceive.part.1+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80023e8:	f817 3b01 	ldrb.w	r3, [r7], #1
 80023ec:	7313      	strb	r3, [r2, #12]
      hspi->TxXferCount--;
 80023ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80023f6:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	b91b      	cbnz	r3, 8002408 <HAL_SPI_TransmitReceive.part.1+0xc0>
 8002400:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d03c      	beq.n	8002482 <HAL_SPI_TransmitReceive.part.1+0x13a>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002408:	f1b9 0f00 	cmp.w	r9, #0
 800240c:	d00f      	beq.n	800242e <HAL_SPI_TransmitReceive.part.1+0xe6>
 800240e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002410:	b29b      	uxth	r3, r3
 8002412:	b163      	cbz	r3, 800242e <HAL_SPI_TransmitReceive.part.1+0xe6>
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	0791      	lsls	r1, r2, #30
 800241a:	d508      	bpl.n	800242e <HAL_SPI_TransmitReceive.part.1+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800241c:	783a      	ldrb	r2, [r7, #0]
 800241e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002420:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002422:	3b01      	subs	r3, #1
 8002424:	b29b      	uxth	r3, r3
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002426:	3701      	adds	r7, #1
        hspi->TxXferCount--;
 8002428:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800242a:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800242e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002430:	b29b      	uxth	r3, r3
 8002432:	b163      	cbz	r3, 800244e <HAL_SPI_TransmitReceive.part.1+0x106>
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	07d2      	lsls	r2, r2, #31
 800243a:	d508      	bpl.n	800244e <HAL_SPI_TransmitReceive.part.1+0x106>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 8002440:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002442:	3b01      	subs	r3, #1
 8002444:	b29b      	uxth	r3, r3
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8002446:	3601      	adds	r6, #1
        hspi->RxXferCount--;
 8002448:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800244a:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800244e:	1c6b      	adds	r3, r5, #1
 8002450:	d0d3      	beq.n	80023fa <HAL_SPI_TransmitReceive.part.1+0xb2>
 8002452:	f7ff fa3f 	bl	80018d4 <HAL_GetTick>
 8002456:	eba0 0008 	sub.w	r0, r0, r8
 800245a:	4285      	cmp	r5, r0
 800245c:	d8cd      	bhi.n	80023fa <HAL_SPI_TransmitReceive.part.1+0xb2>
        errorcode = HAL_TIMEOUT;
 800245e:	2003      	movs	r0, #3
 8002460:	e78a      	b.n	8002378 <HAL_SPI_TransmitReceive.part.1+0x30>
    errorcode = HAL_ERROR;
 8002462:	2001      	movs	r0, #1
 8002464:	e788      	b.n	8002378 <HAL_SPI_TransmitReceive.part.1+0x30>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002466:	2900      	cmp	r1, #0
 8002468:	d057      	beq.n	800251a <HAL_SPI_TransmitReceive.part.1+0x1d2>
 800246a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d053      	beq.n	800251a <HAL_SPI_TransmitReceive.part.1+0x1d2>
        txallowed = 1U;
 8002472:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002476:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002478:	b29b      	uxth	r3, r3
 800247a:	bb13      	cbnz	r3, 80024c2 <HAL_SPI_TransmitReceive.part.1+0x17a>
 800247c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800247e:	b29b      	uxth	r3, r3
 8002480:	b9fb      	cbnz	r3, 80024c2 <HAL_SPI_TransmitReceive.part.1+0x17a>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002482:	f8cd 8000 	str.w	r8, [sp]
 8002486:	462b      	mov	r3, r5
 8002488:	2201      	movs	r2, #1
 800248a:	2102      	movs	r1, #2
 800248c:	4620      	mov	r0, r4
 800248e:	f7ff ff0d 	bl	80022ac <SPI_WaitFlagStateUntilTimeout>
 8002492:	2800      	cmp	r0, #0
 8002494:	d1e3      	bne.n	800245e <HAL_SPI_TransmitReceive.part.1+0x116>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002496:	4602      	mov	r2, r0
 8002498:	f8cd 8000 	str.w	r8, [sp]
 800249c:	462b      	mov	r3, r5
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	4620      	mov	r0, r4
 80024a2:	f7ff ff03 	bl	80022ac <SPI_WaitFlagStateUntilTimeout>
 80024a6:	2800      	cmp	r0, #0
 80024a8:	d03f      	beq.n	800252a <HAL_SPI_TransmitReceive.part.1+0x1e2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024ac:	2220      	movs	r2, #32
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024ae:	4313      	orrs	r3, r2
 80024b0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80024b2:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024b4:	6562      	str	r2, [r4, #84]	; 0x54
 80024b6:	e75f      	b.n	8002378 <HAL_SPI_TransmitReceive.part.1+0x30>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80024b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d19a      	bne.n	80023f6 <HAL_SPI_TransmitReceive.part.1+0xae>
 80024c0:	e792      	b.n	80023e8 <HAL_SPI_TransmitReceive.part.1+0xa0>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80024c2:	f1b9 0f00 	cmp.w	r9, #0
 80024c6:	d00f      	beq.n	80024e8 <HAL_SPI_TransmitReceive.part.1+0x1a0>
 80024c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	b163      	cbz	r3, 80024e8 <HAL_SPI_TransmitReceive.part.1+0x1a0>
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	0791      	lsls	r1, r2, #30
 80024d4:	d508      	bpl.n	80024e8 <HAL_SPI_TransmitReceive.part.1+0x1a0>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80024d6:	f837 2b02 	ldrh.w	r2, [r7], #2
 80024da:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80024dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80024e4:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80024e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	b163      	cbz	r3, 8002508 <HAL_SPI_TransmitReceive.part.1+0x1c0>
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	07d2      	lsls	r2, r2, #31
 80024f4:	d508      	bpl.n	8002508 <HAL_SPI_TransmitReceive.part.1+0x1c0>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80024fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29b      	uxth	r3, r3
 8002502:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002504:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002508:	1c68      	adds	r0, r5, #1
 800250a:	d0b4      	beq.n	8002476 <HAL_SPI_TransmitReceive.part.1+0x12e>
 800250c:	f7ff f9e2 	bl	80018d4 <HAL_GetTick>
 8002510:	eba0 0008 	sub.w	r0, r0, r8
 8002514:	4285      	cmp	r5, r0
 8002516:	d8ae      	bhi.n	8002476 <HAL_SPI_TransmitReceive.part.1+0x12e>
 8002518:	e7a1      	b.n	800245e <HAL_SPI_TransmitReceive.part.1+0x116>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800251a:	f837 3b02 	ldrh.w	r3, [r7], #2
 800251e:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8002520:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002522:	3b01      	subs	r3, #1
 8002524:	b29b      	uxth	r3, r3
 8002526:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002528:	e7a3      	b.n	8002472 <HAL_SPI_TransmitReceive.part.1+0x12a>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800252a:	68a3      	ldr	r3, [r4, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	f47f af23 	bne.w	8002378 <HAL_SPI_TransmitReceive.part.1+0x30>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	9003      	str	r0, [sp, #12]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	9203      	str	r2, [sp, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	9303      	str	r3, [sp, #12]
 800253e:	9b03      	ldr	r3, [sp, #12]
 8002540:	e71a      	b.n	8002378 <HAL_SPI_TransmitReceive.part.1+0x30>
 8002542:	bf00      	nop

08002544 <HAL_SPI_Init>:
  if(hspi == NULL)
 8002544:	2800      	cmp	r0, #0
 8002546:	d03a      	beq.n	80025be <HAL_SPI_Init+0x7a>
  if(hspi->State == HAL_SPI_STATE_RESET)
 8002548:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
{
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254e:	2500      	movs	r5, #0
 8002550:	4604      	mov	r4, r0
  if(hspi->State == HAL_SPI_STATE_RESET)
 8002552:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002556:	6285      	str	r5, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8002558:	b35a      	cbz	r2, 80025b2 <HAL_SPI_Init+0x6e>
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800255a:	68a7      	ldr	r7, [r4, #8]
 800255c:	6863      	ldr	r3, [r4, #4]
 800255e:	68e6      	ldr	r6, [r4, #12]
 8002560:	6920      	ldr	r0, [r4, #16]
 8002562:	6962      	ldr	r2, [r4, #20]
 8002564:	69e1      	ldr	r1, [r4, #28]
 8002566:	433b      	orrs	r3, r7
 8002568:	4333      	orrs	r3, r6
 800256a:	4303      	orrs	r3, r0
 800256c:	4313      	orrs	r3, r2
 800256e:	6a26      	ldr	r6, [r4, #32]
 8002570:	69a0      	ldr	r0, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8002572:	6827      	ldr	r7, [r4, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002574:	6a62      	ldr	r2, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002576:	430b      	orrs	r3, r1
  hspi->State = HAL_SPI_STATE_BUSY;
 8002578:	2102      	movs	r1, #2
 800257a:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800257e:	6839      	ldr	r1, [r7, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002580:	4333      	orrs	r3, r6
 8002582:	f400 7600 	and.w	r6, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002586:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002588:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800258a:	f000 0004 	and.w	r0, r0, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800258e:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002590:	4302      	orrs	r2, r0
  __HAL_SPI_DISABLE(hspi);
 8002592:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002596:	6039      	str	r1, [r7, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002598:	603b      	str	r3, [r7, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800259a:	607a      	str	r2, [r7, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800259c:	69fb      	ldr	r3, [r7, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800259e:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80025a4:	2101      	movs	r1, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025a6:	61fb      	str	r3, [r7, #28]
  return HAL_OK;
 80025a8:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025aa:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025ac:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  return HAL_OK;
 80025b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Lock = HAL_UNLOCKED;
 80025b2:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80025b6:	f7fe ff67 	bl	8001488 <HAL_SPI_MspInit>
 80025ba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80025bc:	e7cd      	b.n	800255a <HAL_SPI_Init+0x16>
    return HAL_ERROR;
 80025be:	2001      	movs	r0, #1
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop

080025c4 <HAL_SPI_Transmit>:
{
 80025c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025c8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80025ca:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80025ce:	2801      	cmp	r0, #1
{
 80025d0:	b084      	sub	sp, #16
  __HAL_LOCK(hspi);
 80025d2:	d103      	bne.n	80025dc <HAL_SPI_Transmit+0x18>
 80025d4:	2002      	movs	r0, #2
}
 80025d6:	b004      	add	sp, #16
 80025d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025dc:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80025de:	2301      	movs	r3, #1
 80025e0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80025e4:	460e      	mov	r6, r1
 80025e6:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80025e8:	f7ff f974 	bl	80018d4 <HAL_GetTick>
 80025ec:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 80025ee:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80025f2:	b2c0      	uxtb	r0, r0
 80025f4:	2801      	cmp	r0, #1
 80025f6:	d009      	beq.n	800260c <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 80025f8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80025fa:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80025fc:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80025fe:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002602:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002606:	b004      	add	sp, #16
 8002608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((pData == NULL ) || (Size == 0))
 800260c:	2e00      	cmp	r6, #0
 800260e:	d0f4      	beq.n	80025fa <HAL_SPI_Transmit+0x36>
 8002610:	f1b8 0f00 	cmp.w	r8, #0
 8002614:	d0f1      	beq.n	80025fa <HAL_SPI_Transmit+0x36>
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002616:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002618:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800261a:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800261c:	2103      	movs	r1, #3
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800261e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002622:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002626:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002628:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferSize  = 0U;
 800262a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 800262c:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800262e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8002630:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002634:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->RxXferCount = 0U;
 8002638:	87e3      	strh	r3, [r4, #62]	; 0x3e
    SPI_1LINE_TX(hspi);
 800263a:	6823      	ldr	r3, [r4, #0]
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800263c:	d05d      	beq.n	80026fa <HAL_SPI_Transmit+0x136>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	0652      	lsls	r2, r2, #25
 8002642:	d403      	bmi.n	800264c <HAL_SPI_Transmit+0x88>
    __HAL_SPI_ENABLE(hspi);
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800264a:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800264c:	68e2      	ldr	r2, [r4, #12]
 800264e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002652:	6862      	ldr	r2, [r4, #4]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002654:	d02b      	beq.n	80026ae <HAL_SPI_Transmit+0xea>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8002656:	b152      	cbz	r2, 800266e <HAL_SPI_Transmit+0xaa>
 8002658:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800265a:	b292      	uxth	r2, r2
 800265c:	2a01      	cmp	r2, #1
 800265e:	d006      	beq.n	800266e <HAL_SPI_Transmit+0xaa>
    while (hspi->TxXferCount > 0U)
 8002660:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002662:	b29b      	uxth	r3, r3
 8002664:	b173      	cbz	r3, 8002684 <HAL_SPI_Transmit+0xc0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	0792      	lsls	r2, r2, #30
 800266c:	d515      	bpl.n	800269a <HAL_SPI_Transmit+0xd6>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800266e:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002672:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002674:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002676:	3b01      	subs	r3, #1
 8002678:	b29b      	uxth	r3, r3
 800267a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800267c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_SPI_Transmit+0xa2>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002684:	9700      	str	r7, [sp, #0]
 8002686:	462b      	mov	r3, r5
 8002688:	2201      	movs	r2, #1
 800268a:	2102      	movs	r1, #2
 800268c:	4620      	mov	r0, r4
 800268e:	f7ff fe0d 	bl	80022ac <SPI_WaitFlagStateUntilTimeout>
 8002692:	2800      	cmp	r0, #0
 8002694:	d036      	beq.n	8002704 <HAL_SPI_Transmit+0x140>
          errorcode = HAL_TIMEOUT;
 8002696:	2003      	movs	r0, #3
 8002698:	e7af      	b.n	80025fa <HAL_SPI_Transmit+0x36>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800269a:	2d00      	cmp	r5, #0
 800269c:	d0fb      	beq.n	8002696 <HAL_SPI_Transmit+0xd2>
 800269e:	1c6b      	adds	r3, r5, #1
 80026a0:	d0de      	beq.n	8002660 <HAL_SPI_Transmit+0x9c>
 80026a2:	f7ff f917 	bl	80018d4 <HAL_GetTick>
 80026a6:	1bc0      	subs	r0, r0, r7
 80026a8:	4285      	cmp	r5, r0
 80026aa:	d8d9      	bhi.n	8002660 <HAL_SPI_Transmit+0x9c>
 80026ac:	e7f3      	b.n	8002696 <HAL_SPI_Transmit+0xd2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80026ae:	b15a      	cbz	r2, 80026c8 <HAL_SPI_Transmit+0x104>
 80026b0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80026b2:	b292      	uxth	r2, r2
 80026b4:	2a01      	cmp	r2, #1
 80026b6:	d007      	beq.n	80026c8 <HAL_SPI_Transmit+0x104>
    while (hspi->TxXferCount > 0U)
 80026b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0e1      	beq.n	8002684 <HAL_SPI_Transmit+0xc0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	0790      	lsls	r0, r2, #30
 80026c6:	d50e      	bpl.n	80026e6 <HAL_SPI_Transmit+0x122>
          hspi->Instance->DR = *((uint16_t *)pData);
 80026c8:	f836 2b02 	ldrh.w	r2, [r6], #2
 80026cc:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 80026ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80026d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0d2      	beq.n	8002684 <HAL_SPI_Transmit+0xc0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	0790      	lsls	r0, r2, #30
 80026e4:	d4f0      	bmi.n	80026c8 <HAL_SPI_Transmit+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80026e6:	2d00      	cmp	r5, #0
 80026e8:	d0d5      	beq.n	8002696 <HAL_SPI_Transmit+0xd2>
 80026ea:	1c69      	adds	r1, r5, #1
 80026ec:	d0e4      	beq.n	80026b8 <HAL_SPI_Transmit+0xf4>
 80026ee:	f7ff f8f1 	bl	80018d4 <HAL_GetTick>
 80026f2:	1bc0      	subs	r0, r0, r7
 80026f4:	4285      	cmp	r5, r0
 80026f6:	d8df      	bhi.n	80026b8 <HAL_SPI_Transmit+0xf4>
 80026f8:	e7cd      	b.n	8002696 <HAL_SPI_Transmit+0xd2>
    SPI_1LINE_TX(hspi);
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e79c      	b.n	800263e <HAL_SPI_Transmit+0x7a>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002704:	4602      	mov	r2, r0
 8002706:	9700      	str	r7, [sp, #0]
 8002708:	462b      	mov	r3, r5
 800270a:	2180      	movs	r1, #128	; 0x80
 800270c:	4620      	mov	r0, r4
 800270e:	f7ff fdcd 	bl	80022ac <SPI_WaitFlagStateUntilTimeout>
 8002712:	b130      	cbz	r0, 8002722 <HAL_SPI_Transmit+0x15e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002714:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002716:	2220      	movs	r2, #32
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002718:	4313      	orrs	r3, r2
 800271a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800271c:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800271e:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8002720:	e76b      	b.n	80025fa <HAL_SPI_Transmit+0x36>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002722:	68a3      	ldr	r3, [r4, #8]
 8002724:	b933      	cbnz	r3, 8002734 <HAL_SPI_Transmit+0x170>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002726:	6822      	ldr	r2, [r4, #0]
 8002728:	9303      	str	r3, [sp, #12]
 800272a:	68d3      	ldr	r3, [r2, #12]
 800272c:	9303      	str	r3, [sp, #12]
 800272e:	6893      	ldr	r3, [r2, #8]
 8002730:	9303      	str	r3, [sp, #12]
 8002732:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002734:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002736:	3000      	adds	r0, #0
 8002738:	bf18      	it	ne
 800273a:	2001      	movne	r0, #1
 800273c:	e75d      	b.n	80025fa <HAL_SPI_Transmit+0x36>
 800273e:	bf00      	nop

08002740 <HAL_SPI_Receive>:
{
 8002740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002744:	6845      	ldr	r5, [r0, #4]
 8002746:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 800274a:	b082      	sub	sp, #8
 800274c:	4604      	mov	r4, r0
 800274e:	4690      	mov	r8, r2
 8002750:	461e      	mov	r6, r3
 8002752:	460f      	mov	r7, r1
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002754:	d01c      	beq.n	8002790 <HAL_SPI_Receive+0x50>
  __HAL_LOCK(hspi);
 8002756:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800275a:	2b01      	cmp	r3, #1
 800275c:	d103      	bne.n	8002766 <HAL_SPI_Receive+0x26>
  __HAL_LOCK(hspi);
 800275e:	2002      	movs	r0, #2
}
 8002760:	b002      	add	sp, #8
 8002762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002766:	2301      	movs	r3, #1
 8002768:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800276c:	f7ff f8b2 	bl	80018d4 <HAL_GetTick>
 8002770:	4605      	mov	r5, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8002772:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002776:	b2c0      	uxtb	r0, r0
 8002778:	2801      	cmp	r0, #1
 800277a:	d019      	beq.n	80027b0 <HAL_SPI_Receive+0x70>
    errorcode = HAL_BUSY;
 800277c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800277e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8002780:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8002782:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002786:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800278a:	b002      	add	sp, #8
 800278c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002790:	6883      	ldr	r3, [r0, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1df      	bne.n	8002756 <HAL_SPI_Receive+0x16>
  __HAL_LOCK(hspi);
 8002796:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 800279a:	2204      	movs	r2, #4
  __HAL_LOCK(hspi);
 800279c:	2b01      	cmp	r3, #1
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 800279e:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
  __HAL_LOCK(hspi);
 80027a2:	d0dc      	beq.n	800275e <HAL_SPI_Receive+0x1e>
 80027a4:	9600      	str	r6, [sp, #0]
 80027a6:	4643      	mov	r3, r8
 80027a8:	460a      	mov	r2, r1
 80027aa:	f7ff fdcd 	bl	8002348 <HAL_SPI_TransmitReceive.part.1>
 80027ae:	e7d7      	b.n	8002760 <HAL_SPI_Receive+0x20>
  if((pData == NULL ) || (Size == 0))
 80027b0:	2f00      	cmp	r7, #0
 80027b2:	d0e4      	beq.n	800277e <HAL_SPI_Receive+0x3e>
 80027b4:	f1b8 0f00 	cmp.w	r8, #0
 80027b8:	d0e1      	beq.n	800277e <HAL_SPI_Receive+0x3e>
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ba:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027bc:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027be:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80027c0:	2104      	movs	r1, #4
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027c2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80027c6:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80027ca:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027cc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxXferSize  = 0U;
 80027ce:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80027d0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027d2:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80027d4:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80027d8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80027dc:	86e3      	strh	r3, [r4, #54]	; 0x36
    SPI_1LINE_RX(hspi);
 80027de:	6823      	ldr	r3, [r4, #0]
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027e0:	d049      	beq.n	8002876 <HAL_SPI_Receive+0x136>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	0652      	lsls	r2, r2, #25
 80027e6:	d403      	bmi.n	80027f0 <HAL_SPI_Receive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ee:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80027f0:	68e3      	ldr	r3, [r4, #12]
 80027f2:	bb13      	cbnz	r3, 800283a <HAL_SPI_Receive+0xfa>
    while(hspi->RxXferCount > 0U)
 80027f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	b173      	cbz	r3, 8002818 <HAL_SPI_Receive+0xd8>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	07d0      	lsls	r0, r2, #31
 8002800:	d52f      	bpl.n	8002862 <HAL_SPI_Receive+0x122>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8002802:	7b1b      	ldrb	r3, [r3, #12]
 8002804:	f807 3b01 	strb.w	r3, [r7], #1
        hspi->RxXferCount--;
 8002808:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800280a:	3b01      	subs	r3, #1
 800280c:	b29b      	uxth	r3, r3
 800280e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 8002810:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_SPI_Receive+0xba>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002818:	6863      	ldr	r3, [r4, #4]
 800281a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800281e:	d02f      	beq.n	8002880 <HAL_SPI_Receive+0x140>
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002820:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002822:	3000      	adds	r0, #0
 8002824:	bf18      	it	ne
 8002826:	2001      	movne	r0, #1
 8002828:	e7a9      	b.n	800277e <HAL_SPI_Receive+0x3e>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800282a:	b316      	cbz	r6, 8002872 <HAL_SPI_Receive+0x132>
 800282c:	1c73      	adds	r3, r6, #1
 800282e:	d004      	beq.n	800283a <HAL_SPI_Receive+0xfa>
 8002830:	f7ff f850 	bl	80018d4 <HAL_GetTick>
 8002834:	1b40      	subs	r0, r0, r5
 8002836:	4286      	cmp	r6, r0
 8002838:	d91b      	bls.n	8002872 <HAL_SPI_Receive+0x132>
    while(hspi->RxXferCount > 0U)
 800283a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ea      	beq.n	8002818 <HAL_SPI_Receive+0xd8>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	07d2      	lsls	r2, r2, #31
 8002848:	d5ef      	bpl.n	800282a <HAL_SPI_Receive+0xea>
        *((uint16_t*)pData) = hspi->Instance->DR;
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f827 3b02 	strh.w	r3, [r7], #2
        hspi->RxXferCount--;
 8002850:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002852:	3b01      	subs	r3, #1
 8002854:	b29b      	uxth	r3, r3
 8002856:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 8002858:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_SPI_Receive+0x102>
 8002860:	e7da      	b.n	8002818 <HAL_SPI_Receive+0xd8>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002862:	b136      	cbz	r6, 8002872 <HAL_SPI_Receive+0x132>
 8002864:	1c71      	adds	r1, r6, #1
 8002866:	d0c5      	beq.n	80027f4 <HAL_SPI_Receive+0xb4>
 8002868:	f7ff f834 	bl	80018d4 <HAL_GetTick>
 800286c:	1b40      	subs	r0, r0, r5
 800286e:	4286      	cmp	r6, r0
 8002870:	d8c0      	bhi.n	80027f4 <HAL_SPI_Receive+0xb4>
          errorcode = HAL_TIMEOUT;
 8002872:	2003      	movs	r0, #3
 8002874:	e783      	b.n	800277e <HAL_SPI_Receive+0x3e>
    SPI_1LINE_RX(hspi);
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e7b0      	b.n	80027e2 <HAL_SPI_Receive+0xa2>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002880:	68a3      	ldr	r3, [r4, #8]
 8002882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002886:	d002      	beq.n	800288e <HAL_SPI_Receive+0x14e>
 8002888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288c:	d1c8      	bne.n	8002820 <HAL_SPI_Receive+0xe0>
    __HAL_SPI_DISABLE(hspi);
 800288e:	6822      	ldr	r2, [r4, #0]
 8002890:	6813      	ldr	r3, [r2, #0]
 8002892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	e7c2      	b.n	8002820 <HAL_SPI_Receive+0xe0>
 800289a:	bf00      	nop

0800289c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800289c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800289e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028a0:	f8d1 e008 	ldr.w	lr, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80028a4:	680e      	ldr	r6, [r1, #0]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80028a6:	4d13      	ldr	r5, [pc, #76]	; (80028f4 <TIM_OC1_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a8:	f024 0401 	bic.w	r4, r4, #1
 80028ac:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80028ae:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80028b0:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80028b2:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80028b4:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028b8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80028bc:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80028be:	ea43 030e 	orr.w	r3, r3, lr
  tmpccmrx |= OC_Config->OCMode;
 80028c2:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80028c6:	d008      	beq.n	80028da <TIM_OC1_SetConfig+0x3e>
 80028c8:	4c0b      	ldr	r4, [pc, #44]	; (80028f8 <TIM_OC1_SetConfig+0x5c>)
 80028ca:	42a0      	cmp	r0, r4
 80028cc:	d005      	beq.n	80028da <TIM_OC1_SetConfig+0x3e>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028ce:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80028d0:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80028d2:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80028d4:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80028d6:	6203      	str	r3, [r0, #32]
} 
 80028d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer |= OC_Config->OCNPolarity;
 80028da:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80028dc:	694d      	ldr	r5, [r1, #20]
 80028de:	698c      	ldr	r4, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80028e0:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028e4:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 80028e8:	4333      	orrs	r3, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80028ea:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80028ec:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80028f0:	4327      	orrs	r7, r4
 80028f2:	e7ec      	b.n	80028ce <TIM_OC1_SetConfig+0x32>
 80028f4:	40010000 	.word	0x40010000
 80028f8:	40010400 	.word	0x40010400

080028fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028fe:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002900:	f8d1 e008 	ldr.w	lr, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8002904:	680e      	ldr	r6, [r1, #0]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002906:	4d14      	ldr	r5, [pc, #80]	; (8002958 <TIM_OC3_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002908:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800290c:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800290e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002910:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002912:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8002914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002918:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800291c:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800291e:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8002922:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002926:	d008      	beq.n	800293a <TIM_OC3_SetConfig+0x3e>
 8002928:	4c0c      	ldr	r4, [pc, #48]	; (800295c <TIM_OC3_SetConfig+0x60>)
 800292a:	42a0      	cmp	r0, r4
 800292c:	d005      	beq.n	800293a <TIM_OC3_SetConfig+0x3e>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800292e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002930:	6047      	str	r7, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002932:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002934:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002936:	6203      	str	r3, [r0, #32]
}
 8002938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800293a:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800293c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800293e:	698c      	ldr	r4, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002944:	f427 5740 	bic.w	r7, r7, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002948:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800294c:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800294e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002952:	ea47 1704 	orr.w	r7, r7, r4, lsl #4
 8002956:	e7ea      	b.n	800292e <TIM_OC3_SetConfig+0x32>
 8002958:	40010000 	.word	0x40010000
 800295c:	40010400 	.word	0x40010400

08002960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002960:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002962:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002964:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002966:	680e      	ldr	r6, [r1, #0]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002968:	4d10      	ldr	r5, [pc, #64]	; (80029ac <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800296a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800296e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8002970:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002972:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002974:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8002976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800297a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800297e:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002980:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002984:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002988:	d00a      	beq.n	80029a0 <TIM_OC4_SetConfig+0x40>
 800298a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800298e:	42a8      	cmp	r0, r5
 8002990:	d006      	beq.n	80029a0 <TIM_OC4_SetConfig+0x40>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002992:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002994:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002996:	61c3      	str	r3, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002998:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 800299a:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800299c:	6202      	str	r2, [r0, #32]
}
 800299e:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029a0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029a2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029a6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80029aa:	e7f2      	b.n	8002992 <TIM_OC4_SetConfig+0x32>
 80029ac:	40010000 	.word	0x40010000

080029b0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b0:	6803      	ldr	r3, [r0, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
}
 80029c2:	2000      	movs	r0, #0
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop

080029c8 <HAL_TIM_PWM_MspInit>:
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop

080029cc <HAL_TIM_PWM_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029cc:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << Channel;
 80029ce:	2201      	movs	r2, #1
  TIMx->CCER &= ~tmp;
 80029d0:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80029d2:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 80029d6:	ea20 0001 	bic.w	r0, r0, r1
{
 80029da:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 80029dc:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80029de:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80029e0:	4c0a      	ldr	r4, [pc, #40]	; (8002a0c <HAL_TIM_PWM_Start+0x40>)
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80029e2:	4311      	orrs	r1, r2
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80029e4:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80029e6:	6219      	str	r1, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80029e8:	d00a      	beq.n	8002a00 <HAL_TIM_PWM_Start+0x34>
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <HAL_TIM_PWM_Start+0x44>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d007      	beq.n	8002a00 <HAL_TIM_PWM_Start+0x34>
  __HAL_TIM_ENABLE(htim);
 80029f0:	681a      	ldr	r2, [r3, #0]
} 
 80029f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_TIM_ENABLE(htim);
 80029f6:	f042 0201 	orr.w	r2, r2, #1
} 
 80029fa:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80029fc:	601a      	str	r2, [r3, #0]
} 
 80029fe:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8002a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a06:	645a      	str	r2, [r3, #68]	; 0x44
 8002a08:	e7f2      	b.n	80029f0 <HAL_TIM_PWM_Start+0x24>
 8002a0a:	bf00      	nop
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40010400 	.word	0x40010400

08002a14 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002a14:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d040      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x8a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8002a1e:	6803      	ldr	r3, [r0, #0]
{
 8002a20:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8002a22:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8002a26:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002a28:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a2a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a2e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 8002a32:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 8002a34:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8002a36:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->Instance->SMCR = tmpsmcr;
 8002a3a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002a3c:	d073      	beq.n	8002b26 <HAL_TIM_ConfigClockSource+0x112>
 8002a3e:	d918      	bls.n	8002a72 <HAL_TIM_ConfigClockSource+0x5e>
 8002a40:	2c70      	cmp	r4, #112	; 0x70
 8002a42:	d060      	beq.n	8002b06 <HAL_TIM_ConfigClockSource+0xf2>
 8002a44:	d92d      	bls.n	8002aa2 <HAL_TIM_ConfigClockSource+0x8e>
 8002a46:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002a4a:	d057      	beq.n	8002afc <HAL_TIM_ConfigClockSource+0xe8>
 8002a4c:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8002a50:	d11c      	bne.n	8002a8c <HAL_TIM_ConfigClockSource+0x78>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002a52:	688a      	ldr	r2, [r1, #8]
 8002a54:	684d      	ldr	r5, [r1, #4]
 8002a56:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8002a58:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002a5a:	432a      	orrs	r2, r5
 8002a5c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a60:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002a64:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a66:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a6e:	609a      	str	r2, [r3, #8]
    break;
 8002a70:	e00c      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8002a72:	2c10      	cmp	r4, #16
 8002a74:	d032      	beq.n	8002adc <HAL_TIM_ConfigClockSource+0xc8>
 8002a76:	d938      	bls.n	8002aea <HAL_TIM_ConfigClockSource+0xd6>
 8002a78:	2c20      	cmp	r4, #32
 8002a7a:	d06c      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x142>
 8002a7c:	2c30      	cmp	r4, #48	; 0x30
 8002a7e:	d105      	bne.n	8002a8c <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8002a80:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002a86:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 8002a8a:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8002a8c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002a94:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
}
 8002a98:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8002a9a:	4618      	mov	r0, r3
}
 8002a9c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002aa2:	2c50      	cmp	r4, #80	; 0x50
 8002aa4:	d05e      	beq.n	8002b64 <HAL_TIM_ConfigClockSource+0x150>
 8002aa6:	2c60      	cmp	r4, #96	; 0x60
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_TIM_ConfigClockSource+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aaa:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002aac:	684d      	ldr	r5, [r1, #4]
 8002aae:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ab0:	f024 0410 	bic.w	r4, r4, #16
 8002ab4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002ab8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aba:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002abe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ac2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ac6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002aca:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002acc:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002ace:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ad0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002ad4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 8002ad8:	609a      	str	r2, [r3, #8]
 8002ada:	e7d7      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8002adc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ade:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002ae2:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	e7d0      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8002aea:	2c00      	cmp	r4, #0
 8002aec:	d1ce      	bne.n	8002a8c <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8002aee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002af0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002af4:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	e7c7      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x78>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	f022 0207 	bic.w	r2, r2, #7
 8002b02:	609a      	str	r2, [r3, #8]
    break;
 8002b04:	e7c2      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002b06:	688a      	ldr	r2, [r1, #8]
 8002b08:	684d      	ldr	r5, [r1, #4]
 8002b0a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8002b0c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002b0e:	432a      	orrs	r2, r5
 8002b10:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b14:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002b18:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8002b1a:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002b1c:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b1e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002b22:	609a      	str	r2, [r3, #8]
    break;
 8002b24:	e7b2      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 8002b26:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b28:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002b2a:	684c      	ldr	r4, [r1, #4]
 8002b2c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b2e:	f026 0601 	bic.w	r6, r6, #1
 8002b32:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002b34:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b36:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b3a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b3e:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002b42:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002b44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b46:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002b48:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002b4e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	e79a      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8002b56:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002b5c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	e793      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 8002b64:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b66:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002b68:	684c      	ldr	r4, [r1, #4]
 8002b6a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b6c:	f026 0601 	bic.w	r6, r6, #1
 8002b70:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002b72:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b74:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b78:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b7c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002b80:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b84:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002b86:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002b8c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	e77b      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x78>

08002b94 <HAL_TIM_OC_DelayElapsedCallback>:
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop

08002b98 <HAL_TIM_IC_CaptureCallback>:
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop

08002b9c <HAL_TIM_PWM_PulseFinishedCallback>:
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop

08002ba0 <HAL_TIM_TriggerCallback>:
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop

08002ba4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ba4:	6803      	ldr	r3, [r0, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	0791      	lsls	r1, r2, #30
{
 8002baa:	b510      	push	{r4, lr}
 8002bac:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bae:	d502      	bpl.n	8002bb6 <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	0792      	lsls	r2, r2, #30
 8002bb4:	d462      	bmi.n	8002c7c <HAL_TIM_IRQHandler+0xd8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	0750      	lsls	r0, r2, #29
 8002bba:	d502      	bpl.n	8002bc2 <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	0751      	lsls	r1, r2, #29
 8002bc0:	d449      	bmi.n	8002c56 <HAL_TIM_IRQHandler+0xb2>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	0712      	lsls	r2, r2, #28
 8002bc6:	d502      	bpl.n	8002bce <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	0710      	lsls	r0, r2, #28
 8002bcc:	d431      	bmi.n	8002c32 <HAL_TIM_IRQHandler+0x8e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	06d2      	lsls	r2, r2, #27
 8002bd2:	d502      	bpl.n	8002bda <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	06d0      	lsls	r0, r2, #27
 8002bd8:	d418      	bmi.n	8002c0c <HAL_TIM_IRQHandler+0x68>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	07d1      	lsls	r1, r2, #31
 8002bde:	d502      	bpl.n	8002be6 <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	07d2      	lsls	r2, r2, #31
 8002be4:	d46b      	bmi.n	8002cbe <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	0610      	lsls	r0, r2, #24
 8002bea:	d502      	bpl.n	8002bf2 <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	0611      	lsls	r1, r2, #24
 8002bf0:	d46d      	bmi.n	8002cce <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	0652      	lsls	r2, r2, #25
 8002bf6:	d502      	bpl.n	8002bfe <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	0650      	lsls	r0, r2, #25
 8002bfc:	d457      	bmi.n	8002cae <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	0691      	lsls	r1, r2, #26
 8002c02:	d502      	bpl.n	8002c0a <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	0692      	lsls	r2, r2, #26
 8002c08:	d449      	bmi.n	8002c9e <HAL_TIM_IRQHandler+0xfa>
 8002c0a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c0c:	f06f 0210 	mvn.w	r2, #16
 8002c10:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c12:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c14:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c16:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c1a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c1e:	d161      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c20:	f7ff ffb8 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7ff ffb9 	bl	8002b9c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	7622      	strb	r2, [r4, #24]
 8002c30:	e7d3      	b.n	8002bda <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c32:	f06f 0208 	mvn.w	r2, #8
 8002c36:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c38:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c3a:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c3c:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c3e:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002c40:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c42:	d155      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c44:	f7ff ffa6 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7ff ffa7 	bl	8002b9c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	2200      	movs	r2, #0
 8002c50:	6823      	ldr	r3, [r4, #0]
 8002c52:	7622      	strb	r2, [r4, #24]
 8002c54:	e7bb      	b.n	8002bce <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c56:	f06f 0204 	mvn.w	r2, #4
 8002c5a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c5c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c5e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c60:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c64:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002c66:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c68:	d13f      	bne.n	8002cea <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6a:	f7ff ff93 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f7ff ff94 	bl	8002b9c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c74:	2200      	movs	r2, #0
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	7622      	strb	r2, [r4, #24]
 8002c7a:	e7a2      	b.n	8002bc2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c7c:	f06f 0202 	mvn.w	r2, #2
 8002c80:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c82:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c84:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c86:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c88:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c8a:	d128      	bne.n	8002cde <HAL_TIM_IRQHandler+0x13a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8c:	f7ff ff82 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c90:	4620      	mov	r0, r4
 8002c92:	f7ff ff83 	bl	8002b9c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	2200      	movs	r2, #0
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	7622      	strb	r2, [r4, #24]
 8002c9c:	e78b      	b.n	8002bb6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c9e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002ca2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ca4:	611a      	str	r2, [r3, #16]
}
 8002ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002caa:	f000 b991 	b.w	8002fd0 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f7ff ff73 	bl	8002ba0 <HAL_TIM_TriggerCallback>
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	e79f      	b.n	8002bfe <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cbe:	f06f 0201 	mvn.w	r2, #1
 8002cc2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	f7fe fb81 	bl	80013cc <HAL_TIM_PeriodElapsedCallback>
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	e78b      	b.n	8002be6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cd2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f000 f97d 	bl	8002fd4 <HAL_TIMEx_BreakCallback>
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	e789      	b.n	8002bf2 <HAL_TIM_IRQHandler+0x4e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002cde:	f7ff ff5b 	bl	8002b98 <HAL_TIM_IC_CaptureCallback>
 8002ce2:	e7d8      	b.n	8002c96 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce4:	f7ff ff58 	bl	8002b98 <HAL_TIM_IC_CaptureCallback>
 8002ce8:	e79f      	b.n	8002c2a <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_IC_CaptureCallback(htim);
 8002cea:	f7ff ff55 	bl	8002b98 <HAL_TIM_IC_CaptureCallback>
 8002cee:	e7c1      	b.n	8002c74 <HAL_TIM_IRQHandler+0xd0>
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf0:	f7ff ff52 	bl	8002b98 <HAL_TIM_IC_CaptureCallback>
 8002cf4:	e7ab      	b.n	8002c4e <HAL_TIM_IRQHandler+0xaa>
 8002cf6:	bf00      	nop

08002cf8 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002cf8:	4a36      	ldr	r2, [pc, #216]	; (8002dd4 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 8002cfa:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002cfc:	4290      	cmp	r0, r2
{
 8002cfe:	b470      	push	{r4, r5, r6}
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002d00:	d054      	beq.n	8002dac <TIM_Base_SetConfig+0xb4>
 8002d02:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d06:	d030      	beq.n	8002d6a <TIM_Base_SetConfig+0x72>
 8002d08:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002d0c:	4290      	cmp	r0, r2
 8002d0e:	d02c      	beq.n	8002d6a <TIM_Base_SetConfig+0x72>
 8002d10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d14:	4290      	cmp	r0, r2
 8002d16:	d028      	beq.n	8002d6a <TIM_Base_SetConfig+0x72>
 8002d18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d1c:	4290      	cmp	r0, r2
 8002d1e:	d024      	beq.n	8002d6a <TIM_Base_SetConfig+0x72>
 8002d20:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002d24:	4290      	cmp	r0, r2
 8002d26:	d020      	beq.n	8002d6a <TIM_Base_SetConfig+0x72>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002d28:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002d2c:	4290      	cmp	r0, r2
 8002d2e:	d030      	beq.n	8002d92 <TIM_Base_SetConfig+0x9a>
 8002d30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d34:	4290      	cmp	r0, r2
 8002d36:	d02c      	beq.n	8002d92 <TIM_Base_SetConfig+0x9a>
 8002d38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d3c:	4290      	cmp	r0, r2
 8002d3e:	d028      	beq.n	8002d92 <TIM_Base_SetConfig+0x9a>
 8002d40:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002d44:	4290      	cmp	r0, r2
 8002d46:	d024      	beq.n	8002d92 <TIM_Base_SetConfig+0x9a>
 8002d48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d4c:	4290      	cmp	r0, r2
 8002d4e:	d020      	beq.n	8002d92 <TIM_Base_SetConfig+0x9a>
 8002d50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d54:	4290      	cmp	r0, r2
 8002d56:	d01c      	beq.n	8002d92 <TIM_Base_SetConfig+0x9a>
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d58:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002d5a:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8002d5c:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8002d5e:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d60:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002d62:	6282      	str	r2, [r0, #40]	; 0x28
}
 8002d64:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8002d66:	6143      	str	r3, [r0, #20]
}
 8002d68:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002d6a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d6c:	68ce      	ldr	r6, [r1, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d6e:	688d      	ldr	r5, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002d70:	680c      	ldr	r4, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d76:	4313      	orrs	r3, r2
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002d78:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7e:	4333      	orrs	r3, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002d80:	4290      	cmp	r0, r2
  TIMx->CR1 = tmpcr1;
 8002d82:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d84:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002d86:	6284      	str	r4, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002d88:	d01d      	beq.n	8002dc6 <TIM_Base_SetConfig+0xce>
  TIMx->EGR = TIM_EGR_UG;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	6143      	str	r3, [r0, #20]
}
 8002d8e:	bc70      	pop	{r4, r5, r6}
 8002d90:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d92:	68cd      	ldr	r5, [r1, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d94:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002d96:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d9c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002d9e:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8002da0:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da2:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002da4:	6282      	str	r2, [r0, #40]	; 0x28
}
 8002da6:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8002da8:	6143      	str	r3, [r0, #20]
}
 8002daa:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002dac:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dae:	68cc      	ldr	r4, [r1, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db0:	688d      	ldr	r5, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002db2:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002db8:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dbe:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8002dc0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc2:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002dc4:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc6:	690b      	ldr	r3, [r1, #16]
 8002dc8:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	6143      	str	r3, [r0, #20]
}
 8002dce:	bc70      	pop	{r4, r5, r6}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40010000 	.word	0x40010000
 8002dd8:	40010400 	.word	0x40010400

08002ddc <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002ddc:	b1b8      	cbz	r0, 8002e0e <HAL_TIM_Base_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002dde:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{ 
 8002de2:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8002de4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002de8:	4604      	mov	r4, r0
 8002dea:	b15b      	cbz	r3, 8002e04 <HAL_TIM_Base_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 8002dec:	2302      	movs	r3, #2
 8002dee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002df2:	6820      	ldr	r0, [r4, #0]
 8002df4:	1d21      	adds	r1, r4, #4
 8002df6:	f7ff ff7f 	bl	8002cf8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002e00:	2000      	movs	r0, #0
 8002e02:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002e04:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002e08:	f7fe fc06 	bl	8001618 <HAL_TIM_Base_MspInit>
 8002e0c:	e7ee      	b.n	8002dec <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8002e0e:	2001      	movs	r0, #1
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop

08002e14 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8002e14:	b1b8      	cbz	r0, 8002e46 <HAL_TIM_PWM_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002e16:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8002e1a:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8002e1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e20:	4604      	mov	r4, r0
 8002e22:	b15b      	cbz	r3, 8002e3c <HAL_TIM_PWM_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002e24:	2302      	movs	r3, #2
 8002e26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002e2a:	6820      	ldr	r0, [r4, #0]
 8002e2c:	1d21      	adds	r1, r4, #4
 8002e2e:	f7ff ff63 	bl	8002cf8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002e38:	2000      	movs	r0, #0
 8002e3a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002e3c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002e40:	f7ff fdc2 	bl	80029c8 <HAL_TIM_PWM_MspInit>
 8002e44:	e7ee      	b.n	8002e24 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8002e46:	2001      	movs	r0, #1
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop

08002e4c <TIM_OC2_SetConfig>:
{
 8002e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e4e:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e50:	f8d1 e008 	ldr.w	lr, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e54:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002e56:	4d14      	ldr	r5, [pc, #80]	; (8002ea8 <TIM_OC2_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e58:	f024 0410 	bic.w	r4, r4, #16
 8002e5c:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8002e5e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002e60:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002e62:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8002e64:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e68:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002e6c:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e6e:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e72:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002e76:	d008      	beq.n	8002e8a <TIM_OC2_SetConfig+0x3e>
 8002e78:	4c0c      	ldr	r4, [pc, #48]	; (8002eac <TIM_OC2_SetConfig+0x60>)
 8002e7a:	42a0      	cmp	r0, r4
 8002e7c:	d005      	beq.n	8002e8a <TIM_OC2_SetConfig+0x3e>
  TIMx->CCR2 = OC_Config->Pulse;
 8002e7e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002e80:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002e82:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002e84:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002e86:	6203      	str	r3, [r0, #32]
}
 8002e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e8a:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e8c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e8e:	698c      	ldr	r4, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e94:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e98:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e9c:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ea2:	ea47 0784 	orr.w	r7, r7, r4, lsl #2
 8002ea6:	e7ea      	b.n	8002e7e <TIM_OC2_SetConfig+0x32>
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40010400 	.word	0x40010400

08002eb0 <HAL_TIM_PWM_ConfigChannel>:
{
 8002eb0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002eb2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d02b      	beq.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x62>
 8002eba:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
 8002eca:	2a0c      	cmp	r2, #12
 8002ecc:	d81a      	bhi.n	8002f04 <HAL_TIM_PWM_ConfigChannel+0x54>
 8002ece:	e8df f002 	tbb	[pc, r2]
 8002ed2:	1935      	.short	0x1935
 8002ed4:	19071919 	.word	0x19071919
 8002ed8:	19471919 	.word	0x19471919
 8002edc:	1919      	.short	0x1919
 8002ede:	22          	.byte	0x22
 8002edf:	00          	.byte	0x00
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	6800      	ldr	r0, [r0, #0]
 8002ee4:	f7ff ffb2 	bl	8002e4c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ee8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eea:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002eec:	6999      	ldr	r1, [r3, #24]
 8002eee:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002ef2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ef4:	6999      	ldr	r1, [r3, #24]
 8002ef6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002efa:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002f02:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002f06:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002f0c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8002f10:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002f12:	2002      	movs	r0, #2
}
 8002f14:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f16:	4629      	mov	r1, r5
 8002f18:	6800      	ldr	r0, [r0, #0]
 8002f1a:	f7ff fd21 	bl	8002960 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f1e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002f20:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f22:	69d9      	ldr	r1, [r3, #28]
 8002f24:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002f28:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f2a:	69d9      	ldr	r1, [r3, #28]
 8002f2c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002f30:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002f38:	61da      	str	r2, [r3, #28]
    break;
 8002f3a:	e7e3      	b.n	8002f04 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	6800      	ldr	r0, [r0, #0]
 8002f40:	f7ff fcac 	bl	800289c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f44:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f46:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f48:	6999      	ldr	r1, [r3, #24]
 8002f4a:	f041 0108 	orr.w	r1, r1, #8
 8002f4e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f50:	6999      	ldr	r1, [r3, #24]
 8002f52:	f021 0104 	bic.w	r1, r1, #4
 8002f56:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	4302      	orrs	r2, r0
 8002f5c:	619a      	str	r2, [r3, #24]
    break;
 8002f5e:	e7d1      	b.n	8002f04 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f60:	4629      	mov	r1, r5
 8002f62:	6800      	ldr	r0, [r0, #0]
 8002f64:	f7ff fcca 	bl	80028fc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f68:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002f6a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f6c:	69d9      	ldr	r1, [r3, #28]
 8002f6e:	f041 0108 	orr.w	r1, r1, #8
 8002f72:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f74:	69d9      	ldr	r1, [r3, #28]
 8002f76:	f021 0104 	bic.w	r1, r1, #4
 8002f7a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	4302      	orrs	r2, r0
 8002f80:	61da      	str	r2, [r3, #28]
    break;
 8002f82:	e7bf      	b.n	8002f04 <HAL_TIM_PWM_ConfigChannel+0x54>

08002f84 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002f84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d01e      	beq.n	8002fca <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8002f8c:	4602      	mov	r2, r0
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8e:	2002      	movs	r0, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002f90:	6813      	ldr	r3, [r2, #0]
{
 8002f92:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002f98:	685c      	ldr	r4, [r3, #4]
 8002f9a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002f9e:	e891 0060 	ldmia.w	r1, {r5, r6}
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002fa2:	605c      	str	r4, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002fa4:	6858      	ldr	r0, [r3, #4]
 8002fa6:	4328      	orrs	r0, r5
 8002fa8:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002faa:	6898      	ldr	r0, [r3, #8]
 8002fac:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8002fb0:	6098      	str	r0, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002fb2:	6899      	ldr	r1, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
 8002fb4:	2400      	movs	r4, #0
  htim->State = HAL_TIM_STATE_READY;
 8002fb6:	2501      	movs	r5, #1
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002fb8:	4331      	orrs	r1, r6
 8002fba:	6099      	str	r1, [r3, #8]
  
  return HAL_OK;
 8002fbc:	4620      	mov	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 8002fbe:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002fc2:	f882 4038 	strb.w	r4, [r2, #56]	; 0x38
} 
 8002fc6:	bc70      	pop	{r4, r5, r6}
 8002fc8:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002fca:	2002      	movs	r0, #2
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop

08002fd0 <HAL_TIMEx_CommutationCallback>:
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop

08002fd4 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop

08002fd8 <allan_variance_update>:
 */

#include "allan_variance.h"

uint8_t allan_variance_update(Allan_Variance *av, Vector *new_data)
{
 8002fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fda:	b08b      	sub	sp, #44	; 0x2c
 8002fdc:	4604      	mov	r4, r0
	//TODO Something does not work here, only one axis (axis[1] - Roll) nicely goes to
	// asymptote
	Vector average_difference;
	Vector average_difference_squared;
	Vector allan_variance;
	vector_clear(&average_difference);
 8002fde:	a801      	add	r0, sp, #4
{
 8002fe0:	460f      	mov	r7, r1
	vector_clear(&average_difference_squared);
	vector_clear(&allan_variance);
 8002fe2:	ae07      	add	r6, sp, #28
	vector_clear(&average_difference);
 8002fe4:	f000 fb48 	bl	8003678 <vector_clear>
	vector_clear(&average_difference_squared);
 8002fe8:	a804      	add	r0, sp, #16
 8002fea:	f000 fb45 	bl	8003678 <vector_clear>
	vector_clear(&allan_variance);
 8002fee:	4630      	mov	r0, r6
 8002ff0:	f000 fb42 	bl	8003678 <vector_clear>

	// sum ALLAN_VARIANCE_SAMPLES_NUMBER measurements
	*av->data_sum = vector_add(av->data_sum, new_data);
 8002ff4:	68e5      	ldr	r5, [r4, #12]
 8002ff6:	4639      	mov	r1, r7
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f000 fb43 	bl	8003684 <vector_add>

	av->num_samples_added++;
 8002ffe:	8963      	ldrh	r3, [r4, #10]

	if (av->num_samples_added == av->num_samples_in_interval) {
 8003000:	88e2      	ldrh	r2, [r4, #6]
	*av->data_sum = vector_add(av->data_sum, new_data);
 8003002:	ed85 0a00 	vstr	s0, [r5]
	av->num_samples_added++;
 8003006:	3301      	adds	r3, #1
 8003008:	b29b      	uxth	r3, r3
	if (av->num_samples_added == av->num_samples_in_interval) {
 800300a:	429a      	cmp	r2, r3
	*av->data_sum = vector_add(av->data_sum, new_data);
 800300c:	edc5 0a01 	vstr	s1, [r5, #4]
 8003010:	ed85 1a02 	vstr	s2, [r5, #8]
	av->num_samples_added++;
 8003014:	8163      	strh	r3, [r4, #10]
	if (av->num_samples_added == av->num_samples_in_interval) {
 8003016:	d002      	beq.n	800301e <allan_variance_update+0x46>
			}
		}
		av->interval_count++;
		return 1;
	}
	return 0;
 8003018:	2000      	movs	r0, #0
}
 800301a:	b00b      	add	sp, #44	; 0x2c
 800301c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*av->data_average[av->interval_count] = vector_divide(av->data_sum, av->num_samples_in_interval);
 800301e:	8923      	ldrh	r3, [r4, #8]
 8003020:	68e0      	ldr	r0, [r4, #12]
 8003022:	ee07 2a90 	vmov	s15, r2
 8003026:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		av->num_samples_added = 0;
 800302a:	2100      	movs	r1, #0
		*av->data_average[av->interval_count] = vector_divide(av->data_sum, av->num_samples_in_interval);
 800302c:	eeb8 0a67 	vcvt.f32.u32	s0, s15
		av->num_samples_added = 0;
 8003030:	8161      	strh	r1, [r4, #10]
		*av->data_average[av->interval_count] = vector_divide(av->data_sum, av->num_samples_in_interval);
 8003032:	695d      	ldr	r5, [r3, #20]
 8003034:	f000 fb62 	bl	80036fc <vector_divide>
		vector_clear(av->data_sum);
 8003038:	68e0      	ldr	r0, [r4, #12]
		*av->data_average[av->interval_count] = vector_divide(av->data_sum, av->num_samples_in_interval);
 800303a:	edc5 0a01 	vstr	s1, [r5, #4]
 800303e:	ed85 0a00 	vstr	s0, [r5]
 8003042:	ed85 1a02 	vstr	s2, [r5, #8]
		vector_clear(av->data_sum);
 8003046:	f000 fb17 	bl	8003678 <vector_clear>
		if (av->interval_count > 0) {
 800304a:	8923      	ldrh	r3, [r4, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d045      	beq.n	80030dc <allan_variance_update+0x104>
			if (av->interval_count > av->num_intervals_to_process) {
 8003050:	88a2      	ldrh	r2, [r4, #4]
 8003052:	429a      	cmp	r2, r3
 8003054:	d3e0      	bcc.n	8003018 <allan_variance_update+0x40>
 8003056:	2501      	movs	r5, #1
 8003058:	eb04 0385 	add.w	r3, r4, r5, lsl #2
				for(uint8_t interval = 1; interval <= av->interval_count; interval++) {
 800305c:	3501      	adds	r5, #1
					average_difference = vector_subtract(av->data_average[interval], av->data_average[interval-1]);
 800305e:	6919      	ldr	r1, [r3, #16]
 8003060:	6958      	ldr	r0, [r3, #20]
 8003062:	f000 fb2d 	bl	80036c0 <vector_subtract>
					average_difference_squared = vector_power(&average_difference, 2);
 8003066:	a801      	add	r0, sp, #4
					average_difference = vector_subtract(av->data_average[interval], av->data_average[interval-1]);
 8003068:	ed8d 0a01 	vstr	s0, [sp, #4]
					average_difference_squared = vector_power(&average_difference, 2);
 800306c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
					average_difference = vector_subtract(av->data_average[interval], av->data_average[interval-1]);
 8003070:	edcd 0a02 	vstr	s1, [sp, #8]
 8003074:	ed8d 1a03 	vstr	s2, [sp, #12]
					average_difference_squared = vector_power(&average_difference, 2);
 8003078:	f000 fb62 	bl	8003740 <vector_power>
					allan_variance = vector_add(&allan_variance, &average_difference_squared);
 800307c:	a904      	add	r1, sp, #16
 800307e:	4630      	mov	r0, r6
					average_difference_squared = vector_power(&average_difference, 2);
 8003080:	edcd 0a05 	vstr	s1, [sp, #20]
 8003084:	ed8d 1a06 	vstr	s2, [sp, #24]
 8003088:	ed8d 0a04 	vstr	s0, [sp, #16]
					allan_variance = vector_add(&allan_variance, &average_difference_squared);
 800308c:	f000 fafa 	bl	8003684 <vector_add>
				for(uint8_t interval = 1; interval <= av->interval_count; interval++) {
 8003090:	8923      	ldrh	r3, [r4, #8]
					allan_variance = vector_add(&allan_variance, &average_difference_squared);
 8003092:	edcd 0a08 	vstr	s1, [sp, #32]
				for(uint8_t interval = 1; interval <= av->interval_count; interval++) {
 8003096:	b2ed      	uxtb	r5, r5
 8003098:	429d      	cmp	r5, r3
					allan_variance = vector_add(&allan_variance, &average_difference_squared);
 800309a:	ed8d 1a09 	vstr	s2, [sp, #36]	; 0x24
 800309e:	ed8d 0a07 	vstr	s0, [sp, #28]
				for(uint8_t interval = 1; interval <= av->interval_count; interval++) {
 80030a2:	d9d9      	bls.n	8003058 <allan_variance_update+0x80>
				allan_variance = vector_divide(&allan_variance, 2*av->interval_count);
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	ee00 3a10 	vmov	s0, r3
 80030aa:	4630      	mov	r0, r6
 80030ac:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80030b0:	f000 fb24 	bl	80036fc <vector_divide>
				*av->allan_variance[av->interval_count] = allan_variance;
 80030b4:	8923      	ldrh	r3, [r4, #8]
				allan_variance = vector_divide(&allan_variance, 2*av->interval_count);
 80030b6:	ed8d 0a07 	vstr	s0, [sp, #28]
 80030ba:	edcd 0a08 	vstr	s1, [sp, #32]
 80030be:	ed8d 1a09 	vstr	s2, [sp, #36]	; 0x24
				*av->allan_variance[av->interval_count] = allan_variance;
 80030c2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80030c6:	eb04 0783 	add.w	r7, r4, r3, lsl #2
				*av->allan_variance_last_updated = allan_variance;
 80030ca:	6925      	ldr	r5, [r4, #16]
				*av->allan_variance[av->interval_count] = allan_variance;
 80030cc:	f8d7 71a4 	ldr.w	r7, [r7, #420]	; 0x1a4
 80030d0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
				*av->allan_variance_last_updated = allan_variance;
 80030d4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80030d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		av->interval_count++;
 80030dc:	3301      	adds	r3, #1
		return 1;
 80030de:	2001      	movs	r0, #1
		av->interval_count++;
 80030e0:	8123      	strh	r3, [r4, #8]
}
 80030e2:	b00b      	add	sp, #44	; 0x2c
 80030e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e6:	bf00      	nop

080030e8 <allan_variance_init>:
		Allan_Variance *av,
		uint16_t sampling_freq_hz,
		uint16_t interval_length_ms,
		uint16_t num_intervals_to_process
		)
{
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	4604      	mov	r4, r0
	av->sampling_freq_hz = sampling_freq_hz;
	av->interval_length_ms = interval_length_ms;
	av->num_intervals_to_process = num_intervals_to_process;

	av->num_samples_in_interval = av->sampling_freq_hz * av->interval_length_ms;
 80030ec:	fb11 f502 	smulbb	r5, r1, r2
	av->interval_count = 0;
 80030f0:	2000      	movs	r0, #0
	av->num_samples_added = 0;

	av->data_sum = vector_new(0);
 80030f2:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8003144 <allan_variance_init+0x5c>
{
 80030f6:	ed2d 8b02 	vpush	{d8}
	av->sampling_freq_hz = sampling_freq_hz;
 80030fa:	8021      	strh	r1, [r4, #0]
	av->num_samples_in_interval = av->sampling_freq_hz * av->interval_length_ms;
 80030fc:	80e5      	strh	r5, [r4, #6]
	av->interval_length_ms = interval_length_ms;
 80030fe:	8062      	strh	r2, [r4, #2]
	av->num_intervals_to_process = num_intervals_to_process;
 8003100:	80a3      	strh	r3, [r4, #4]
	av->interval_count = 0;
 8003102:	8120      	strh	r0, [r4, #8]
	av->num_samples_added = 0;
 8003104:	8160      	strh	r0, [r4, #10]
	av->allan_variance_last_updated = vector_new(0);

	for (uint16_t i = 0; i < NUMBER_OF_INTERVALS_TO_PROCESS; i++) {
		av->data_average[i] = vector_new(0);
 8003106:	eeb0 8a40 	vmov.f32	s16, s0
	av->data_sum = vector_new(0);
 800310a:	f000 faa3 	bl	8003654 <vector_new>
	av->allan_variance_last_updated = vector_new(0);
 800310e:	eeb0 0a48 	vmov.f32	s0, s16
	av->data_sum = vector_new(0);
 8003112:	60e0      	str	r0, [r4, #12]
	av->allan_variance_last_updated = vector_new(0);
 8003114:	f000 fa9e 	bl	8003654 <vector_new>
 8003118:	f504 75d0 	add.w	r5, r4, #416	; 0x1a0
 800311c:	f844 0f10 	str.w	r0, [r4, #16]!
 8003120:	462e      	mov	r6, r5
		av->data_average[i] = vector_new(0);
 8003122:	eeb0 0a48 	vmov.f32	s0, s16
 8003126:	f000 fa95 	bl	8003654 <vector_new>
		av->allan_variance[i] = vector_new(0);
 800312a:	eeb0 0a48 	vmov.f32	s0, s16
		av->data_average[i] = vector_new(0);
 800312e:	f844 0f04 	str.w	r0, [r4, #4]!
		av->allan_variance[i] = vector_new(0);
 8003132:	f000 fa8f 	bl	8003654 <vector_new>
	for (uint16_t i = 0; i < NUMBER_OF_INTERVALS_TO_PROCESS; i++) {
 8003136:	42b4      	cmp	r4, r6
		av->allan_variance[i] = vector_new(0);
 8003138:	f845 0f04 	str.w	r0, [r5, #4]!
	for (uint16_t i = 0; i < NUMBER_OF_INTERVALS_TO_PROCESS; i++) {
 800313c:	d1f1      	bne.n	8003122 <allan_variance_init+0x3a>
	}
}
 800313e:	ecbd 8b02 	vpop	{d8}
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	00000000 	.word	0x00000000

08003148 <allan_variance_get_last_computed_allan_variance>:
	return *av->allan_variance;
}

Vector allan_variance_get_last_computed_allan_variance(const Allan_Variance *av)
{
	return *av->allan_variance_last_updated;
 8003148:	6903      	ldr	r3, [r0, #16]
 800314a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
{
 800314e:	b088      	sub	sp, #32
	return *av->allan_variance_last_updated;
 8003150:	ab08      	add	r3, sp, #32
 8003152:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 8003156:	ed9d 0a05 	vldr	s0, [sp, #20]
 800315a:	eddd 0a06 	vldr	s1, [sp, #24]
 800315e:	ed9d 1a07 	vldr	s2, [sp, #28]
 8003162:	b008      	add	sp, #32
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop

08003168 <flash_memory_wait_for_write_access>:
{
	return spi_transmit_flash_memory(&command, 1);
}

void flash_memory_wait_for_write_access()
{
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	b082      	sub	sp, #8
	uint8_t cmd = M25P16_CMD_READ_STATUS_REGISTER;
 800316c:	ae02      	add	r6, sp, #8
 800316e:	2305      	movs	r3, #5
 8003170:	f806 3d02 	strb.w	r3, [r6, #-2]!
	uint8_t status_register;
	uint16_t iter = 0;
	do {
		HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_RESET); // drive CS low
 8003174:	4d10      	ldr	r5, [pc, #64]	; (80031b8 <flash_memory_wait_for_write_access+0x50>)
		HAL_SPI_Transmit(&hspi3, &cmd, 1, 1000);
 8003176:	4c11      	ldr	r4, [pc, #68]	; (80031bc <flash_memory_wait_for_write_access+0x54>)
		HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_RESET); // drive CS low
 8003178:	2200      	movs	r2, #0
 800317a:	2108      	movs	r1, #8
 800317c:	4628      	mov	r0, r5
 800317e:	f7fe fd51 	bl	8001c24 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &cmd, 1, 1000);
 8003182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003186:	2201      	movs	r2, #1
 8003188:	4631      	mov	r1, r6
 800318a:	4620      	mov	r0, r4
 800318c:	f7ff fa1a 	bl	80025c4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &status_register, 1, 1000);
 8003190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003194:	2201      	movs	r2, #1
 8003196:	f10d 0107 	add.w	r1, sp, #7
 800319a:	4620      	mov	r0, r4
 800319c:	f7ff fad0 	bl	8002740 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_SET); // drive CS high
 80031a0:	2201      	movs	r2, #1
 80031a2:	2108      	movs	r1, #8
 80031a4:	4628      	mov	r0, r5
 80031a6:	f7fe fd3d 	bl	8001c24 <HAL_GPIO_WritePin>
		//TODO ADD TIMEOUT FOR THIS OPERATION
		iter++;
//		if (iter == 10000) break;
	} while ((status_register & M25P16_STATUS_REGISTER_WIP_BIT));
 80031aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031ae:	07db      	lsls	r3, r3, #31
 80031b0:	d4e2      	bmi.n	8003178 <flash_memory_wait_for_write_access+0x10>
}
 80031b2:	b002      	add	sp, #8
 80031b4:	bd70      	pop	{r4, r5, r6, pc}
 80031b6:	bf00      	nop
 80031b8:	40020400 	.word	0x40020400
 80031bc:	20003f78 	.word	0x20003f78

080031c0 <flash_memory_full_erase>:

HAL_StatusTypeDef flash_memory_full_erase()
{
 80031c0:	b500      	push	{lr}
 80031c2:	b083      	sub	sp, #12
 80031c4:	a802      	add	r0, sp, #8
 80031c6:	2306      	movs	r3, #6
 80031c8:	f800 3d02 	strb.w	r3, [r0, #-2]!
	return spi_transmit_flash_memory(&command, 1);
 80031cc:	2101      	movs	r1, #1
 80031ce:	f000 f9ad 	bl	800352c <spi_transmit_flash_memory>
	Status status;
	status = flash_memory_send_command(M25P16_CMD_WRITE_ENABLE);
	if (status != HAL_OK) {
 80031d2:	b930      	cbnz	r0, 80031e2 <flash_memory_full_erase+0x22>
 80031d4:	a802      	add	r0, sp, #8
 80031d6:	23c7      	movs	r3, #199	; 0xc7
 80031d8:	f800 3d01 	strb.w	r3, [r0, #-1]!
	return spi_transmit_flash_memory(&command, 1);
 80031dc:	2101      	movs	r1, #1
 80031de:	f000 f9a5 	bl	800352c <spi_transmit_flash_memory>
	status = flash_memory_send_command(M25P16_CMD_BULK_ERASE);
	if (status != HAL_OK) {
		return status;
	}
	return status;
}
 80031e2:	b003      	add	sp, #12
 80031e4:	f85d fb04 	ldr.w	pc, [sp], #4

080031e8 <flash_memory_write>:

HAL_StatusTypeDef flash_memory_write(uint32_t address, uint8_t *data, uint8_t num_bytes)
{
 80031e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Status status;
	uint8_t address_segmented[3] = {address & 0x00FF0000, address & 0x0000FF00, address & 0x000000FF};

	uint8_t cmd_size = num_bytes + 4;
 80031ec:	1d15      	adds	r5, r2, #4
 80031ee:	b2ed      	uxtb	r5, r5
{
 80031f0:	b082      	sub	sp, #8
 80031f2:	4607      	mov	r7, r0
	uint8_t *cmd = (uint8_t*)malloc(sizeof(uint8_t) * cmd_size);
 80031f4:	4628      	mov	r0, r5
{
 80031f6:	4616      	mov	r6, r2
 80031f8:	4688      	mov	r8, r1
	uint8_t *cmd = (uint8_t*)malloc(sizeof(uint8_t) * cmd_size);
 80031fa:	f002 f95b 	bl	80054b4 <malloc>
 80031fe:	4604      	mov	r4, r0
	cmd[0] = M25P16_CMD_PAGE_PROGRAM;
	memcpy(cmd+1, address_segmented, 3);
 8003200:	2300      	movs	r3, #0
	memcpy(cmd+4, data, num_bytes);
 8003202:	4632      	mov	r2, r6
 8003204:	4641      	mov	r1, r8
	cmd[0] = M25P16_CMD_PAGE_PROGRAM;
 8003206:	2602      	movs	r6, #2
	memcpy(cmd+4, data, num_bytes);
 8003208:	3004      	adds	r0, #4
	memcpy(cmd+1, address_segmented, 3);
 800320a:	7063      	strb	r3, [r4, #1]
 800320c:	70a3      	strb	r3, [r4, #2]
	uint8_t address_segmented[3] = {address & 0x00FF0000, address & 0x0000FF00, address & 0x000000FF};
 800320e:	70e7      	strb	r7, [r4, #3]
	cmd[0] = M25P16_CMD_PAGE_PROGRAM;
 8003210:	7026      	strb	r6, [r4, #0]
	memcpy(cmd+4, data, num_bytes);
 8003212:	f002 f95f 	bl	80054d4 <memcpy>
 8003216:	a802      	add	r0, sp, #8
 8003218:	2306      	movs	r3, #6
 800321a:	f800 3d01 	strb.w	r3, [r0, #-1]!
	return spi_transmit_flash_memory(&command, 1);
 800321e:	2101      	movs	r1, #1
 8003220:	f000 f984 	bl	800352c <spi_transmit_flash_memory>

	status = flash_memory_send_command(M25P16_CMD_WRITE_ENABLE);
	if (status != HAL_OK) {
 8003224:	b120      	cbz	r0, 8003230 <flash_memory_write+0x48>
 8003226:	4606      	mov	r6, r0
	free(cmd);
	if (status != HAL_OK) {
		return status;
	}
	return status;
}
 8003228:	4630      	mov	r0, r6
 800322a:	b002      	add	sp, #8
 800322c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	status = spi_transmit_flash_memory(cmd, cmd_size);
 8003230:	4629      	mov	r1, r5
 8003232:	4620      	mov	r0, r4
 8003234:	f000 f97a 	bl	800352c <spi_transmit_flash_memory>
 8003238:	4606      	mov	r6, r0
	free(cmd);
 800323a:	4620      	mov	r0, r4
 800323c:	f002 f942 	bl	80054c4 <free>
}
 8003240:	4630      	mov	r0, r6
 8003242:	b002      	add	sp, #8
 8003244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003248 <flash_memory_read>:

HAL_StatusTypeDef flash_memory_read(uint32_t address, uint8_t *buffer, uint8_t num_bytes)
{
 8003248:	b510      	push	{r4, lr}
 800324a:	b082      	sub	sp, #8
	Status status;
	uint8_t address_segmented[3] = {address & 0x00FF0000, address & 0x0000FF00, address & 0x000000FF};

	status = spi_receive_flash_memory(M25P16_CMD_READ_DATA_BYTES, address_segmented, buffer, num_bytes);
 800324c:	4613      	mov	r3, r2
	uint8_t address_segmented[3] = {address & 0x00FF0000, address & 0x0000FF00, address & 0x000000FF};
 800324e:	f88d 0006 	strb.w	r0, [sp, #6]
	status = spi_receive_flash_memory(M25P16_CMD_READ_DATA_BYTES, address_segmented, buffer, num_bytes);
 8003252:	460a      	mov	r2, r1
	uint8_t address_segmented[3] = {address & 0x00FF0000, address & 0x0000FF00, address & 0x000000FF};
 8003254:	2400      	movs	r4, #0
	status = spi_receive_flash_memory(M25P16_CMD_READ_DATA_BYTES, address_segmented, buffer, num_bytes);
 8003256:	a901      	add	r1, sp, #4
 8003258:	2003      	movs	r0, #3
	uint8_t address_segmented[3] = {address & 0x00FF0000, address & 0x0000FF00, address & 0x000000FF};
 800325a:	f88d 4004 	strb.w	r4, [sp, #4]
 800325e:	f88d 4005 	strb.w	r4, [sp, #5]
	status = spi_receive_flash_memory(M25P16_CMD_READ_DATA_BYTES, address_segmented, buffer, num_bytes);
 8003262:	f000 f97f 	bl	8003564 <spi_receive_flash_memory>
	if (status != HAL_OK) {
		return status;
	}
	return status;
}
 8003266:	b002      	add	sp, #8
 8003268:	bd10      	pop	{r4, pc}
 800326a:	bf00      	nop

0800326c <flash_memory_init>:

HAL_StatusTypeDef flash_memory_init()
{
 800326c:	b508      	push	{r3, lr}
	Status status;
	flash_memory_wait_for_write_access();
 800326e:	f7ff ff7b 	bl	8003168 <flash_memory_wait_for_write_access>
	status = flash_memory_full_erase();
	if (status != HAL_OK) {
		return status;
	}
	return HAL_OK;
}
 8003272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	status = flash_memory_full_erase();
 8003276:	f7ff bfa3 	b.w	80031c0 <flash_memory_full_erase>
 800327a:	bf00      	nop

0800327c <mpu_6000_read_raw_data>:

#include "mpu6000.h"

Status mpu_6000_read_raw_data(
		Vector *accelerometer_data, Vector *gyroscope_data)
{
 800327c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327e:	b089      	sub	sp, #36	; 0x24
 8003280:	4607      	mov	r7, r0
 8003282:	460d      	mov	r5, r1
	uint8_t raw_data[14];
	Status transmission_status = spi_receive_mpu(ACCEL_XOUT_HIGH_READ, raw_data, 14);
 8003284:	220e      	movs	r2, #14
 8003286:	a904      	add	r1, sp, #16
 8003288:	20bb      	movs	r0, #187	; 0xbb
 800328a:	f000 f933 	bl	80034f4 <spi_receive_mpu>
	if (transmission_status != HAL_OK) {
 800328e:	bb48      	cbnz	r0, 80032e4 <mpu_6000_read_raw_data+0x68>
 8003290:	ae02      	add	r6, sp, #8
 8003292:	ab04      	add	r3, sp, #16
 8003294:	4669      	mov	r1, sp
 8003296:	4632      	mov	r2, r6
 8003298:	f10d 0e16 	add.w	lr, sp, #22
	}

	uint8_t raw_accelerometer_data[6];
	uint8_t raw_gyroscope_data[6];
	for (uint8_t i = 0; i < 6; i++) {
		raw_accelerometer_data[i] = raw_data[i];
 800329c:	f813 4b01 	ldrb.w	r4, [r3], #1
 80032a0:	f801 4b01 	strb.w	r4, [r1], #1
	for (uint8_t i = 0; i < 6; i++) {
 80032a4:	4573      	cmp	r3, lr
		raw_gyroscope_data[i] = raw_data[i + 8];
 80032a6:	79dc      	ldrb	r4, [r3, #7]
 80032a8:	f802 4b01 	strb.w	r4, [r2], #1
	for (uint8_t i = 0; i < 6; i++) {
 80032ac:	d1f6      	bne.n	800329c <mpu_6000_read_raw_data+0x20>
 80032ae:	4629      	mov	r1, r5
 80032b0:	2301      	movs	r3, #1
	}
	for(uint8_t i = 0; i < 3; i++) {
		accelerometer_data->data[i] = (int16_t)(raw_accelerometer_data[2*i] << 8) | (int16_t)(raw_accelerometer_data[2*i+1]);
 80032b2:	eb0d 0203 	add.w	r2, sp, r3
 80032b6:	f81d 4003 	ldrb.w	r4, [sp, r3]
 80032ba:	f912 5c01 	ldrsb.w	r5, [r2, #-1]
		gyroscope_data->data[i] = (int16_t)(raw_accelerometer_data[2*i] << 8) | (int16_t)(raw_gyroscope_data[2*i+1]);
 80032be:	5cf2      	ldrb	r2, [r6, r3]
		accelerometer_data->data[i] = (int16_t)(raw_accelerometer_data[2*i] << 8) | (int16_t)(raw_accelerometer_data[2*i+1]);
 80032c0:	022d      	lsls	r5, r5, #8
 80032c2:	432c      	orrs	r4, r5
 80032c4:	ee07 4a90 	vmov	s15, r4
		gyroscope_data->data[i] = (int16_t)(raw_accelerometer_data[2*i] << 8) | (int16_t)(raw_gyroscope_data[2*i+1]);
 80032c8:	432a      	orrs	r2, r5
		accelerometer_data->data[i] = (int16_t)(raw_accelerometer_data[2*i] << 8) | (int16_t)(raw_accelerometer_data[2*i+1]);
 80032ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		gyroscope_data->data[i] = (int16_t)(raw_accelerometer_data[2*i] << 8) | (int16_t)(raw_gyroscope_data[2*i+1]);
 80032ce:	ee07 2a90 	vmov	s15, r2
 80032d2:	3302      	adds	r3, #2
 80032d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	for(uint8_t i = 0; i < 3; i++) {
 80032d8:	2b07      	cmp	r3, #7
		accelerometer_data->data[i] = (int16_t)(raw_accelerometer_data[2*i] << 8) | (int16_t)(raw_accelerometer_data[2*i+1]);
 80032da:	eca7 7a01 	vstmia	r7!, {s14}
		gyroscope_data->data[i] = (int16_t)(raw_accelerometer_data[2*i] << 8) | (int16_t)(raw_gyroscope_data[2*i+1]);
 80032de:	ece1 7a01 	vstmia	r1!, {s15}
	for(uint8_t i = 0; i < 3; i++) {
 80032e2:	d1e6      	bne.n	80032b2 <mpu_6000_read_raw_data+0x36>
	}
	return transmission_status;
}
 80032e4:	b009      	add	sp, #36	; 0x24
 80032e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032e8 <mpu_6000_init>:

Status mpu_6000_init()
{
 80032e8:	b570      	push	{r4, r5, r6, lr}
 80032ea:	b082      	sub	sp, #8
	uint8_t transmitBuffer[2];
	Status transmission_status;

	// Device reset
	transmitBuffer[0] = PWR_MGMT_1;
	transmitBuffer[1] = 0x80;
 80032ec:	2380      	movs	r3, #128	; 0x80
	transmission_status = spi_transmit_mpu(transmitBuffer, 2);
 80032ee:	a801      	add	r0, sp, #4
	transmitBuffer[0] = PWR_MGMT_1;
 80032f0:	256b      	movs	r5, #107	; 0x6b
	transmission_status = spi_transmit_mpu(transmitBuffer, 2);
 80032f2:	2102      	movs	r1, #2
	transmitBuffer[0] = PWR_MGMT_1;
 80032f4:	f88d 5004 	strb.w	r5, [sp, #4]
	transmitBuffer[1] = 0x80;
 80032f8:	f88d 3005 	strb.w	r3, [sp, #5]
	transmission_status = spi_transmit_mpu(transmitBuffer, 2);
 80032fc:	f000 f8de 	bl	80034bc <spi_transmit_mpu>
	if (transmission_status != HAL_OK) {
 8003300:	4604      	mov	r4, r0
 8003302:	b110      	cbz	r0, 800330a <mpu_6000_init+0x22>
		return transmission_status;
	}
	HAL_Delay(MPU_INIT_TRANSMISSION_DELAY_MS);

	return transmission_status;
}
 8003304:	4620      	mov	r0, r4
 8003306:	b002      	add	sp, #8
 8003308:	bd70      	pop	{r4, r5, r6, pc}
	HAL_Delay(MPU_INIT_TRANSMISSION_DELAY_MS);
 800330a:	2005      	movs	r0, #5
 800330c:	f7fe fae8 	bl	80018e0 <HAL_Delay>
	transmitBuffer[0] = SIGNAL_PATH_RESET;
 8003310:	2268      	movs	r2, #104	; 0x68
	transmitBuffer[1] = 0x07;
 8003312:	2307      	movs	r3, #7
	transmission_status = spi_transmit_mpu(transmitBuffer, 2);
 8003314:	2102      	movs	r1, #2
 8003316:	a801      	add	r0, sp, #4
	transmitBuffer[0] = SIGNAL_PATH_RESET;
 8003318:	f88d 2004 	strb.w	r2, [sp, #4]
	transmitBuffer[1] = 0x07;
 800331c:	f88d 3005 	strb.w	r3, [sp, #5]
	transmission_status = spi_transmit_mpu(transmitBuffer, 2);
 8003320:	f000 f8cc 	bl	80034bc <spi_transmit_mpu>
	if (transmission_status != HAL_OK) {
 8003324:	4604      	mov	r4, r0
 8003326:	2800      	cmp	r0, #0
 8003328:	d1ec      	bne.n	8003304 <mpu_6000_init+0x1c>
	HAL_Delay(MPU_INIT_TRANSMISSION_DELAY_MS);
 800332a:	2005      	movs	r0, #5
 800332c:	f7fe fad8 	bl	80018e0 <HAL_Delay>
	transmission_status = spi_transmit_mpu(transmitBuffer, 2);
 8003330:	2102      	movs	r1, #2
 8003332:	a801      	add	r0, sp, #4
	transmitBuffer[1] = 0x00;
 8003334:	f88d 4005 	strb.w	r4, [sp, #5]
	transmitBuffer[0] = PWR_MGMT_1;
 8003338:	f88d 5004 	strb.w	r5, [sp, #4]
	transmission_status = spi_transmit_mpu(transmitBuffer, 2);
 800333c:	f000 f8be 	bl	80034bc <spi_transmit_mpu>
	if (transmission_status != HAL_OK) {
 8003340:	4604      	mov	r4, r0
 8003342:	2800      	cmp	r0, #0
 8003344:	d1de      	bne.n	8003304 <mpu_6000_init+0x1c>
	HAL_Delay(MPU_INIT_TRANSMISSION_DELAY_MS);
 8003346:	2005      	movs	r0, #5
 8003348:	f7fe faca 	bl	80018e0 <HAL_Delay>
	transmitBuffer[1] = 0x10;
 800334c:	2510      	movs	r5, #16
	transmitBuffer[0] = ACCEL_CONFIG;
 800334e:	231c      	movs	r3, #28
	transmission_status = spi_transmit_mpu(transmitBuffer, 2);
 8003350:	2102      	movs	r1, #2
 8003352:	a801      	add	r0, sp, #4
	transmitBuffer[0] = ACCEL_CONFIG;
 8003354:	f88d 3004 	strb.w	r3, [sp, #4]
	transmitBuffer[1] = 0x10;
 8003358:	f88d 5005 	strb.w	r5, [sp, #5]
	transmission_status = spi_transmit_mpu(transmitBuffer, 2);
 800335c:	f000 f8ae 	bl	80034bc <spi_transmit_mpu>
	if (transmission_status != HAL_OK) {
 8003360:	4604      	mov	r4, r0
 8003362:	2800      	cmp	r0, #0
 8003364:	d1ce      	bne.n	8003304 <mpu_6000_init+0x1c>
	HAL_Delay(MPU_INIT_TRANSMISSION_DELAY_MS);
 8003366:	2005      	movs	r0, #5
	transmitBuffer[1] = DLPF_CFG_94Hz;
 8003368:	2602      	movs	r6, #2
	HAL_Delay(MPU_INIT_TRANSMISSION_DELAY_MS);
 800336a:	f7fe fab9 	bl	80018e0 <HAL_Delay>
	transmitBuffer[0] = CONFIG;
 800336e:	231a      	movs	r3, #26
	transmission_status = spi_transmit_mpu(transmitBuffer, 2);
 8003370:	4631      	mov	r1, r6
 8003372:	a801      	add	r0, sp, #4
	transmitBuffer[1] = DLPF_CFG_94Hz;
 8003374:	f88d 6005 	strb.w	r6, [sp, #5]
	transmitBuffer[0] = CONFIG;
 8003378:	f88d 3004 	strb.w	r3, [sp, #4]
	transmission_status = spi_transmit_mpu(transmitBuffer, 2);
 800337c:	f000 f89e 	bl	80034bc <spi_transmit_mpu>
	if (transmission_status != HAL_OK) {
 8003380:	4604      	mov	r4, r0
 8003382:	2800      	cmp	r0, #0
 8003384:	d1be      	bne.n	8003304 <mpu_6000_init+0x1c>
	HAL_Delay(MPU_INIT_TRANSMISSION_DELAY_MS);
 8003386:	2005      	movs	r0, #5
 8003388:	f7fe faaa 	bl	80018e0 <HAL_Delay>
	transmitBuffer[0] = GYRO_CONFIG;
 800338c:	231b      	movs	r3, #27
	transmission_status = spi_transmit_mpu(transmitBuffer, 2);
 800338e:	4631      	mov	r1, r6
 8003390:	a801      	add	r0, sp, #4
	transmitBuffer[1] = 0x10;
 8003392:	f88d 5005 	strb.w	r5, [sp, #5]
	transmitBuffer[0] = GYRO_CONFIG;
 8003396:	f88d 3004 	strb.w	r3, [sp, #4]
	transmission_status = spi_transmit_mpu(transmitBuffer, 2);
 800339a:	f000 f88f 	bl	80034bc <spi_transmit_mpu>
	if (transmission_status != HAL_OK) {
 800339e:	4604      	mov	r4, r0
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d1af      	bne.n	8003304 <mpu_6000_init+0x1c>
	HAL_Delay(MPU_INIT_TRANSMISSION_DELAY_MS);
 80033a4:	2005      	movs	r0, #5
 80033a6:	f7fe fa9b 	bl	80018e0 <HAL_Delay>
	return transmission_status;
 80033aa:	e7ab      	b.n	8003304 <mpu_6000_init+0x1c>

080033ac <statusLedOn>:
 */

#include "fcm_led.h"

void statusLedOn() {
	HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET); // blue on
 80033ac:	2200      	movs	r2, #0
 80033ae:	2120      	movs	r1, #32
 80033b0:	4801      	ldr	r0, [pc, #4]	; (80033b8 <statusLedOn+0xc>)
 80033b2:	f7fe bc37 	b.w	8001c24 <HAL_GPIO_WritePin>
 80033b6:	bf00      	nop
 80033b8:	40020400 	.word	0x40020400

080033bc <statusLedToggle>:
void statusLedOff() {
	HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_SET); // blue off
}

void statusLedToggle() {
	HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin); // blue toggle
 80033bc:	2120      	movs	r1, #32
 80033be:	4801      	ldr	r0, [pc, #4]	; (80033c4 <statusLedToggle+0x8>)
 80033c0:	f7fe bc34 	b.w	8001c2c <HAL_GPIO_TogglePin>
 80033c4:	40020400 	.word	0x40020400

080033c8 <warningLedOn>:
}

void warningLedOn() {
	HAL_GPIO_WritePin(LED_WARNING_GPIO_Port, LED_WARNING_Pin, GPIO_PIN_RESET); // orange on
 80033c8:	2200      	movs	r2, #0
 80033ca:	2110      	movs	r1, #16
 80033cc:	4801      	ldr	r0, [pc, #4]	; (80033d4 <warningLedOn+0xc>)
 80033ce:	f7fe bc29 	b.w	8001c24 <HAL_GPIO_WritePin>
 80033d2:	bf00      	nop
 80033d4:	40020400 	.word	0x40020400

080033d8 <warningLedOff>:
}

void warningLedOff() {
	HAL_GPIO_WritePin(LED_WARNING_GPIO_Port, LED_WARNING_Pin, GPIO_PIN_SET); // orange off
 80033d8:	2201      	movs	r2, #1
 80033da:	2110      	movs	r1, #16
 80033dc:	4801      	ldr	r0, [pc, #4]	; (80033e4 <warningLedOff+0xc>)
 80033de:	f7fe bc21 	b.w	8001c24 <HAL_GPIO_WritePin>
 80033e2:	bf00      	nop
 80033e4:	40020400 	.word	0x40020400

080033e8 <motors_init>:
{
	motors_set_speed(MOTOR_ALL, MOTOR_LOWEST_ROTATION_SPEED);
}

Status motors_init()
{
 80033e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	motor_timer[0] = &htim3;
 80033ea:	4e19      	ldr	r6, [pc, #100]	; (8003450 <motors_init+0x68>)
	motor_timer[1] = &htim3;
	motor_timer[2] = &htim9;
	motor_timer[3] = &htim9;

	motor_channel[0] = TIM_CHANNEL_3;
 80033ec:	4b19      	ldr	r3, [pc, #100]	; (8003454 <motors_init+0x6c>)
	motor_timer[2] = &htim9;
 80033ee:	4c1a      	ldr	r4, [pc, #104]	; (8003458 <motors_init+0x70>)
	motor_timer[0] = &htim3;
 80033f0:	481a      	ldr	r0, [pc, #104]	; (800345c <motors_init+0x74>)
	motor_timer[2] = &htim9;
 80033f2:	60b4      	str	r4, [r6, #8]
	motor_channel[1] = TIM_CHANNEL_4;
	motor_channel[2] = TIM_CHANNEL_1;
	motor_channel[3] = TIM_CHANNEL_2;
 80033f4:	2504      	movs	r5, #4
	motor_channel[1] = TIM_CHANNEL_4;
 80033f6:	f04f 0e0c 	mov.w	lr, #12
	motor_channel[2] = TIM_CHANNEL_1;
 80033fa:	2700      	movs	r7, #0
	motor_channel[0] = TIM_CHANNEL_3;
 80033fc:	2108      	movs	r1, #8
	motor_timer[3] = &htim9;
 80033fe:	60f4      	str	r4, [r6, #12]
	motor_timer[0] = &htim3;
 8003400:	6030      	str	r0, [r6, #0]
 8003402:	1974      	adds	r4, r6, r5
	motor_timer[1] = &htim3;
 8003404:	6070      	str	r0, [r6, #4]
	motor_channel[3] = TIM_CHANNEL_2;
 8003406:	70dd      	strb	r5, [r3, #3]
 8003408:	3610      	adds	r6, #16
	motor_channel[1] = TIM_CHANNEL_4;
 800340a:	f883 e001 	strb.w	lr, [r3, #1]
	motor_channel[2] = TIM_CHANNEL_1;
 800340e:	709f      	strb	r7, [r3, #2]
	motor_channel[0] = TIM_CHANNEL_3;
 8003410:	7019      	strb	r1, [r3, #0]
 8003412:	1c5d      	adds	r5, r3, #1

	uint8_t i;
	Status status;
	for (i = 0; i < 4; i++) {
		status = HAL_TIM_PWM_Start(motor_timer[i], motor_channel[i]);
 8003414:	f7ff fada 	bl	80029cc <HAL_TIM_PWM_Start>
		if (status != HAL_OK) {
 8003418:	b948      	cbnz	r0, 800342e <motors_init+0x46>
	for (i = 0; i < 4; i++) {
 800341a:	42b4      	cmp	r4, r6
 800341c:	d008      	beq.n	8003430 <motors_init+0x48>
 800341e:	f854 0b04 	ldr.w	r0, [r4], #4
 8003422:	f815 1b01 	ldrb.w	r1, [r5], #1
		status = HAL_TIM_PWM_Start(motor_timer[i], motor_channel[i]);
 8003426:	f7ff fad1 	bl	80029cc <HAL_TIM_PWM_Start>
		if (status != HAL_OK) {
 800342a:	2800      	cmp	r0, #0
 800342c:	d0f5      	beq.n	800341a <motors_init+0x32>
			return status;
		}
	}
	motors_stop();
	return status;
}
 800342e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003430:	4907      	ldr	r1, [pc, #28]	; (8003450 <motors_init+0x68>)
 8003432:	4d08      	ldr	r5, [pc, #32]	; (8003454 <motors_init+0x6c>)
			__HAL_TIM_SET_COMPARE((motor_timer[i]), motor_channel[i], speed);
 8003434:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8003438:	f851 3b04 	ldr.w	r3, [r1], #4
 800343c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	0892      	lsrs	r2, r2, #2
 8003444:	3334      	adds	r3, #52	; 0x34
		for (i = 0; i < 4; i++) {
 8003446:	428c      	cmp	r4, r1
			__HAL_TIM_SET_COMPARE((motor_timer[i]), motor_channel[i], speed);
 8003448:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
		for (i = 0; i < 4; i++) {
 800344c:	d1f4      	bne.n	8003438 <motors_init+0x50>
}
 800344e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003450:	20003e8c 	.word	0x20003e8c
 8003454:	20003f10 	.word	0x20003f10
 8003458:	200040a0 	.word	0x200040a0
 800345c:	20004064 	.word	0x20004064

08003460 <fcm_spi_init>:
 *      Author: Popeye
 */

#include "fcm_spi.h"

void fcm_spi_init() {
 8003460:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(CS_MPU_GPIO_Port, CS_MPU_Pin, GPIO_PIN_SET); // Drive CS MPU high
 8003462:	4c09      	ldr	r4, [pc, #36]	; (8003488 <fcm_spi_init+0x28>)
 8003464:	2201      	movs	r2, #1
 8003466:	4620      	mov	r0, r4
 8003468:	2110      	movs	r1, #16
 800346a:	f7fe fbdb 	bl	8001c24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_RFM22_GPIO_Port, CS_RFM22_Pin, GPIO_PIN_SET); // Drive CS RFM22 high
 800346e:	4620      	mov	r0, r4
 8003470:	2201      	movs	r2, #1
 8003472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003476:	f7fe fbd5 	bl	8001c24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_SET); // Drive CS External flash memory high
 800347a:	2201      	movs	r2, #1
 800347c:	2108      	movs	r1, #8
 800347e:	4803      	ldr	r0, [pc, #12]	; (800348c <fcm_spi_init+0x2c>)
}
 8003480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_SET); // Drive CS External flash memory high
 8003484:	f7fe bbce 	b.w	8001c24 <HAL_GPIO_WritePin>
 8003488:	40020000 	.word	0x40020000
 800348c:	40020400 	.word	0x40020400

08003490 <fcm_spi_receive>:
Status fcm_spi_receive(
		SPI_HandleTypeDef *spi_handle,
		uint8_t address_to_read_from,
		uint8_t *received_data,
		uint8_t num_bytes_to_receive)
{
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	ac02      	add	r4, sp, #8
 8003496:	4615      	mov	r5, r2
 8003498:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800349c:	461e      	mov	r6, r3
	Status transmission_status = HAL_SPI_Transmit(
 800349e:	4621      	mov	r1, r4
 80034a0:	2364      	movs	r3, #100	; 0x64
 80034a2:	2201      	movs	r2, #1
{
 80034a4:	4604      	mov	r4, r0
	Status transmission_status = HAL_SPI_Transmit(
 80034a6:	f7ff f88d 	bl	80025c4 <HAL_SPI_Transmit>
			spi_handle, &address_to_read_from, 1, TRANSMIT_TIMEOUT);
	if (transmission_status != HAL_OK) {
 80034aa:	b928      	cbnz	r0, 80034b8 <fcm_spi_receive+0x28>
		return transmission_status;
	}
	transmission_status = HAL_SPI_Receive(spi_handle, received_data,
 80034ac:	4632      	mov	r2, r6
 80034ae:	4629      	mov	r1, r5
 80034b0:	4620      	mov	r0, r4
 80034b2:	2364      	movs	r3, #100	; 0x64
 80034b4:	f7ff f944 	bl	8002740 <HAL_SPI_Receive>
			num_bytes_to_receive, 100);
	return transmission_status;
}
 80034b8:	b002      	add	sp, #8
 80034ba:	bd70      	pop	{r4, r5, r6, pc}

080034bc <spi_transmit_mpu>:

Status spi_transmit_mpu(uint8_t *data_to_transmit,
		uint8_t num_bytes_to_transmit)
{
 80034bc:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(CS_MPU_GPIO_Port, CS_MPU_Pin, GPIO_PIN_RESET); // Drive CS low
 80034be:	4c0b      	ldr	r4, [pc, #44]	; (80034ec <spi_transmit_mpu+0x30>)
{
 80034c0:	4605      	mov	r5, r0
 80034c2:	460e      	mov	r6, r1
	HAL_GPIO_WritePin(CS_MPU_GPIO_Port, CS_MPU_Pin, GPIO_PIN_RESET); // Drive CS low
 80034c4:	4620      	mov	r0, r4
 80034c6:	2200      	movs	r2, #0
 80034c8:	2110      	movs	r1, #16
 80034ca:	f7fe fbab 	bl	8001c24 <HAL_GPIO_WritePin>
	return HAL_SPI_Transmit(spi_handle, data_to_transmit,
 80034ce:	4632      	mov	r2, r6
 80034d0:	4629      	mov	r1, r5
 80034d2:	2364      	movs	r3, #100	; 0x64
 80034d4:	4806      	ldr	r0, [pc, #24]	; (80034f0 <spi_transmit_mpu+0x34>)
 80034d6:	f7ff f875 	bl	80025c4 <HAL_SPI_Transmit>
	Status transmission_status = fcm_spi_transmit(&hspi1, data_to_transmit, num_bytes_to_transmit);
	HAL_GPIO_WritePin(CS_MPU_GPIO_Port, CS_MPU_Pin, GPIO_PIN_SET); // Drive CS high
 80034da:	2201      	movs	r2, #1
	return HAL_SPI_Transmit(spi_handle, data_to_transmit,
 80034dc:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(CS_MPU_GPIO_Port, CS_MPU_Pin, GPIO_PIN_SET); // Drive CS high
 80034de:	2110      	movs	r1, #16
 80034e0:	4620      	mov	r0, r4
 80034e2:	f7fe fb9f 	bl	8001c24 <HAL_GPIO_WritePin>
	return transmission_status;
}
 80034e6:	4628      	mov	r0, r5
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
 80034ea:	bf00      	nop
 80034ec:	40020000 	.word	0x40020000
 80034f0:	20003fd0 	.word	0x20003fd0

080034f4 <spi_receive_mpu>:

Status spi_receive_mpu(uint8_t address_to_read_from,
		uint8_t *received_data, uint8_t num_bytes_to_receive)
{
 80034f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(CS_MPU_GPIO_Port, CS_MPU_Pin, GPIO_PIN_RESET); // Drive CS low
 80034f6:	4c0b      	ldr	r4, [pc, #44]	; (8003524 <spi_receive_mpu+0x30>)
{
 80034f8:	4605      	mov	r5, r0
 80034fa:	460e      	mov	r6, r1
 80034fc:	4617      	mov	r7, r2
	HAL_GPIO_WritePin(CS_MPU_GPIO_Port, CS_MPU_Pin, GPIO_PIN_RESET); // Drive CS low
 80034fe:	4620      	mov	r0, r4
 8003500:	2200      	movs	r2, #0
 8003502:	2110      	movs	r1, #16
 8003504:	f7fe fb8e 	bl	8001c24 <HAL_GPIO_WritePin>
	Status transmission_status = fcm_spi_receive(
 8003508:	463b      	mov	r3, r7
 800350a:	4632      	mov	r2, r6
 800350c:	4629      	mov	r1, r5
 800350e:	4806      	ldr	r0, [pc, #24]	; (8003528 <spi_receive_mpu+0x34>)
 8003510:	f7ff ffbe 	bl	8003490 <fcm_spi_receive>
			&hspi1, address_to_read_from, received_data, num_bytes_to_receive);
	HAL_GPIO_WritePin(CS_MPU_GPIO_Port, CS_MPU_Pin, GPIO_PIN_SET); // Drive CS high
 8003514:	2201      	movs	r2, #1
	Status transmission_status = fcm_spi_receive(
 8003516:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(CS_MPU_GPIO_Port, CS_MPU_Pin, GPIO_PIN_SET); // Drive CS high
 8003518:	2110      	movs	r1, #16
 800351a:	4620      	mov	r0, r4
 800351c:	f7fe fb82 	bl	8001c24 <HAL_GPIO_WritePin>
	return transmission_status;
}
 8003520:	4628      	mov	r0, r5
 8003522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003524:	40020000 	.word	0x40020000
 8003528:	20003fd0 	.word	0x20003fd0

0800352c <spi_transmit_flash_memory>:

Status spi_transmit_flash_memory(uint8_t *data_to_transmit,
		uint8_t num_bytes_to_transmit)
{
 800352c:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_RESET); // Drive CS low
 800352e:	4c0b      	ldr	r4, [pc, #44]	; (800355c <spi_transmit_flash_memory+0x30>)
{
 8003530:	4605      	mov	r5, r0
 8003532:	460e      	mov	r6, r1
	HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_RESET); // Drive CS low
 8003534:	4620      	mov	r0, r4
 8003536:	2200      	movs	r2, #0
 8003538:	2108      	movs	r1, #8
 800353a:	f7fe fb73 	bl	8001c24 <HAL_GPIO_WritePin>
	return HAL_SPI_Transmit(spi_handle, data_to_transmit,
 800353e:	4632      	mov	r2, r6
 8003540:	4629      	mov	r1, r5
 8003542:	2364      	movs	r3, #100	; 0x64
 8003544:	4806      	ldr	r0, [pc, #24]	; (8003560 <spi_transmit_flash_memory+0x34>)
 8003546:	f7ff f83d 	bl	80025c4 <HAL_SPI_Transmit>
	Status transmission_status = fcm_spi_transmit(&hspi3, data_to_transmit, num_bytes_to_transmit);
	HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_SET); // Drive CS high
 800354a:	2201      	movs	r2, #1
	return HAL_SPI_Transmit(spi_handle, data_to_transmit,
 800354c:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_SET); // Drive CS high
 800354e:	2108      	movs	r1, #8
 8003550:	4620      	mov	r0, r4
 8003552:	f7fe fb67 	bl	8001c24 <HAL_GPIO_WritePin>
	return transmission_status;
}
 8003556:	4628      	mov	r0, r5
 8003558:	bd70      	pop	{r4, r5, r6, pc}
 800355a:	bf00      	nop
 800355c:	40020400 	.word	0x40020400
 8003560:	20003f78 	.word	0x20003f78

08003564 <spi_receive_flash_memory>:

Status spi_receive_flash_memory(uint8_t command, uint8_t *address,
		uint8_t *received_data, uint8_t num_bytes_to_receive)
{
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	4615      	mov	r5, r2
 800356a:	461e      	mov	r6, r3
	uint8_t bytes_to_transmit[4];
	uint8_t num_bytesto_transmit = 1;

	bytes_to_transmit[0] = command;
 800356c:	f88d 0004 	strb.w	r0, [sp, #4]

	if (address != NULL) {
 8003570:	b329      	cbz	r1, 80035be <spi_receive_flash_memory+0x5a>
		bytes_to_transmit[1] = address[0];
 8003572:	7808      	ldrb	r0, [r1, #0]
		bytes_to_transmit[2] = address[1];
 8003574:	784a      	ldrb	r2, [r1, #1]
		bytes_to_transmit[3] = address[2];
 8003576:	788b      	ldrb	r3, [r1, #2]
		bytes_to_transmit[1] = address[0];
 8003578:	f88d 0005 	strb.w	r0, [sp, #5]
		bytes_to_transmit[2] = address[1];
 800357c:	f88d 2006 	strb.w	r2, [sp, #6]
		bytes_to_transmit[3] = address[2];
 8003580:	f88d 3007 	strb.w	r3, [sp, #7]
 8003584:	2404      	movs	r4, #4
		num_bytesto_transmit = 4;
	}

	HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_RESET); // Drive CS low
 8003586:	2200      	movs	r2, #0
 8003588:	2108      	movs	r1, #8
 800358a:	480e      	ldr	r0, [pc, #56]	; (80035c4 <spi_receive_flash_memory+0x60>)
 800358c:	f7fe fb4a 	bl	8001c24 <HAL_GPIO_WritePin>

	// Transmit command code and address (if any)
	Status transmission_status = HAL_SPI_Transmit(
 8003590:	4622      	mov	r2, r4
 8003592:	2364      	movs	r3, #100	; 0x64
 8003594:	a901      	add	r1, sp, #4
 8003596:	480c      	ldr	r0, [pc, #48]	; (80035c8 <spi_receive_flash_memory+0x64>)
 8003598:	f7ff f814 	bl	80025c4 <HAL_SPI_Transmit>
			&hspi3, bytes_to_transmit, num_bytesto_transmit, TRANSMIT_TIMEOUT);
	if (transmission_status != HAL_OK) {
 800359c:	4604      	mov	r4, r0
 800359e:	b958      	cbnz	r0, 80035b8 <spi_receive_flash_memory+0x54>
		return transmission_status;
	}
	// Receive data bytes
	transmission_status = HAL_SPI_Receive(&hspi3, received_data,
 80035a0:	4632      	mov	r2, r6
 80035a2:	4629      	mov	r1, r5
 80035a4:	2364      	movs	r3, #100	; 0x64
 80035a6:	4808      	ldr	r0, [pc, #32]	; (80035c8 <spi_receive_flash_memory+0x64>)
 80035a8:	f7ff f8ca 	bl	8002740 <HAL_SPI_Receive>
			num_bytes_to_receive, 100);

	HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_SET); // Drive CS high
 80035ac:	2201      	movs	r2, #1
	transmission_status = HAL_SPI_Receive(&hspi3, received_data,
 80035ae:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_SET); // Drive CS high
 80035b0:	2108      	movs	r1, #8
 80035b2:	4804      	ldr	r0, [pc, #16]	; (80035c4 <spi_receive_flash_memory+0x60>)
 80035b4:	f7fe fb36 	bl	8001c24 <HAL_GPIO_WritePin>
	return transmission_status;
}
 80035b8:	4620      	mov	r0, r4
 80035ba:	b002      	add	sp, #8
 80035bc:	bd70      	pop	{r4, r5, r6, pc}
 80035be:	2401      	movs	r4, #1
 80035c0:	e7e1      	b.n	8003586 <spi_receive_flash_memory+0x22>
 80035c2:	bf00      	nop
 80035c4:	40020400 	.word	0x40020400
 80035c8:	20003f78 	.word	0x20003f78

080035cc <accelerometer_init>:
 */

#include "accelerometer.h"

void accelerometer_init(Accelerometer *accelero)
{
 80035cc:	b510      	push	{r4, lr}
 80035ce:	4604      	mov	r4, r0
	vector_clear(&accelero->raw_data);
 80035d0:	f000 f852 	bl	8003678 <vector_clear>
	vector_clear(&accelero->acceleration_g);
 80035d4:	f104 000c 	add.w	r0, r4, #12
 80035d8:	f000 f84e 	bl	8003678 <vector_clear>
	vector_clear(&accelero->acceleration_meters_per_second2);
 80035dc:	f104 0018 	add.w	r0, r4, #24
}
 80035e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	vector_clear(&accelero->acceleration_meters_per_second2);
 80035e4:	f000 b848 	b.w	8003678 <vector_clear>

080035e8 <accelerometer_set_raw_data>:

void accelerometer_set_raw_data(Accelerometer *accelero, const Vector *new_raw_data)
{
 80035e8:	4603      	mov	r3, r0
	accelero->raw_data = *new_raw_data;
 80035ea:	c907      	ldmia	r1, {r0, r1, r2}
 80035ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop

080035f4 <gyroscope_init>:
 */

#include "gyroscope.h"

void gyroscope_init(Gyroscope *accelero)
{
 80035f4:	b510      	push	{r4, lr}
 80035f6:	4604      	mov	r4, r0
	vector_clear(&accelero->raw_data);
 80035f8:	f000 f83e 	bl	8003678 <vector_clear>
	vector_clear(&accelero->rotation_radians_per_second);
 80035fc:	f104 000c 	add.w	r0, r4, #12
 8003600:	f000 f83a 	bl	8003678 <vector_clear>
	vector_clear(&accelero->rotation_degrees_per_second);
 8003604:	f104 0018 	add.w	r0, r4, #24
}
 8003608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	vector_clear(&accelero->rotation_degrees_per_second);
 800360c:	f000 b834 	b.w	8003678 <vector_clear>

08003610 <gyroscope_set_raw_data>:

void gyroscope_set_raw_data(Gyroscope *gyro, const Vector *new_raw_data)
{
 8003610:	4603      	mov	r3, r0
	gyro->raw_data = *new_raw_data;
 8003612:	c907      	ldmia	r1, {r0, r1, r2}
 8003614:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop

0800361c <imu_init>:


#include "imu.h"

void imu_init(Imu *imu)
{
 800361c:	b510      	push	{r4, lr}
 800361e:	4604      	mov	r4, r0
	gyroscope_init(&imu->gyro);
 8003620:	f7ff ffe8 	bl	80035f4 <gyroscope_init>
	accelerometer_init(&imu->accelero);
 8003624:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003628:	f7ff ffd0 	bl	80035cc <accelerometer_init>
	vector_clear(&imu->orientation);
 800362c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8003630:	f000 f822 	bl	8003678 <vector_clear>
	mpu_6000_init();
}
 8003634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mpu_6000_init();
 8003638:	f7ff be56 	b.w	80032e8 <mpu_6000_init>

0800363c <imu_set_raw_data>:

void imu_set_raw_data(Imu *imu, Vector *raw_acc, Vector *raw_gyro, Vector *raw_mag)
{
 800363c:	b538      	push	{r3, r4, r5, lr}
 800363e:	4604      	mov	r4, r0
 8003640:	4615      	mov	r5, r2
	accelerometer_set_raw_data(&imu->accelero, raw_acc);
 8003642:	3024      	adds	r0, #36	; 0x24
 8003644:	f7ff ffd0 	bl	80035e8 <accelerometer_set_raw_data>
	gyroscope_set_raw_data(&imu->gyro, raw_gyro);
 8003648:	4629      	mov	r1, r5
 800364a:	4620      	mov	r0, r4
}
 800364c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	gyroscope_set_raw_data(&imu->gyro, raw_gyro);
 8003650:	f7ff bfde 	b.w	8003610 <gyroscope_set_raw_data>

08003654 <vector_new>:

#include "vector.h"
#include "math.h"

Vector *vector_new(vector_base_type fill)
{
 8003654:	b508      	push	{r3, lr}
	Vector *vector = (Vector*)malloc(sizeof(Vector));
 8003656:	200c      	movs	r0, #12
{
 8003658:	ed2d 8b02 	vpush	{d8}
 800365c:	eeb0 8a40 	vmov.f32	s16, s0
	Vector *vector = (Vector*)malloc(sizeof(Vector));
 8003660:	f001 ff28 	bl	80054b4 <malloc>
	for (uint8_t i = 0; i < 3; i++) {
		vector->data[i] = fill;
 8003664:	ed80 8a00 	vstr	s16, [r0]
 8003668:	ed80 8a01 	vstr	s16, [r0, #4]
 800366c:	ed80 8a02 	vstr	s16, [r0, #8]
	}
	return vector;
}
 8003670:	ecbd 8b02 	vpop	{d8}
 8003674:	bd08      	pop	{r3, pc}
 8003676:	bf00      	nop

08003678 <vector_clear>:

void vector_fill(Vector *vector, vector_base_type fill)
{
	for (uint8_t i = 0; i < 3; i++) {
		vector->data[i] = fill;
 8003678:	2300      	movs	r3, #0
 800367a:	6003      	str	r3, [r0, #0]
 800367c:	6043      	str	r3, [r0, #4]
 800367e:	6083      	str	r3, [r0, #8]
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop

08003684 <vector_add>:
	}
	return *destination;
}

Vector vector_add(const Vector *v1, const Vector *v2)
{
 8003684:	b410      	push	{r4}
 8003686:	b08b      	sub	sp, #44	; 0x2c
 8003688:	aa04      	add	r2, sp, #16
 800368a:	f100 040c 	add.w	r4, r0, #12
 800368e:	4613      	mov	r3, r2
	Vector retval;
	for (int i = 0; i < 3; i++) {
		retval.data[i] = v1->data[i] + v2->data[i];
 8003690:	ecf0 7a01 	vldmia	r0!, {s15}
 8003694:	ecb1 7a01 	vldmia	r1!, {s14}
 8003698:	ee77 7a87 	vadd.f32	s15, s15, s14
	for (int i = 0; i < 3; i++) {
 800369c:	42a0      	cmp	r0, r4
		retval.data[i] = v1->data[i] + v2->data[i];
 800369e:	ece3 7a01 	vstmia	r3!, {s15}
	for (int i = 0; i < 3; i++) {
 80036a2:	d1f5      	bne.n	8003690 <vector_add+0xc>
	}
	return retval;
 80036a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80036a6:	ab0a      	add	r3, sp, #40	; 0x28
 80036a8:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 80036ac:	ed9d 0a07 	vldr	s0, [sp, #28]
 80036b0:	eddd 0a08 	vldr	s1, [sp, #32]
 80036b4:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 80036b8:	b00b      	add	sp, #44	; 0x2c
 80036ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <vector_subtract>:

Vector vector_subtract(const Vector *v1, const Vector *v2)
{
 80036c0:	b410      	push	{r4}
 80036c2:	b08b      	sub	sp, #44	; 0x2c
 80036c4:	aa04      	add	r2, sp, #16
 80036c6:	f100 040c 	add.w	r4, r0, #12
 80036ca:	4613      	mov	r3, r2
	Vector retval;
	for (int i = 0; i < 3; i++) {
		retval.data[i] = v1->data[i] - v2->data[i];
 80036cc:	ecf0 7a01 	vldmia	r0!, {s15}
 80036d0:	ecb1 7a01 	vldmia	r1!, {s14}
 80036d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
	for (int i = 0; i < 3; i++) {
 80036d8:	42a0      	cmp	r0, r4
		retval.data[i] = v1->data[i] - v2->data[i];
 80036da:	ece3 7a01 	vstmia	r3!, {s15}
	for (int i = 0; i < 3; i++) {
 80036de:	d1f5      	bne.n	80036cc <vector_subtract+0xc>
	}
	return retval;
 80036e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80036e2:	ab0a      	add	r3, sp, #40	; 0x28
 80036e4:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 80036e8:	ed9d 0a07 	vldr	s0, [sp, #28]
 80036ec:	eddd 0a08 	vldr	s1, [sp, #32]
 80036f0:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 80036f4:	b00b      	add	sp, #44	; 0x2c
 80036f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <vector_divide>:

Vector vector_divide(const Vector *vector, vector_base_type divider)
{
	Vector retval;
	for (int i = 0; i < 3; i++) {
		retval.data[i] = vector->data[i] / divider;
 80036fc:	ed90 7a00 	vldr	s14, [r0]
 8003700:	ed90 6a01 	vldr	s12, [r0, #4]
 8003704:	edd0 6a02 	vldr	s13, [r0, #8]
 8003708:	eec7 7a00 	vdiv.f32	s15, s14, s0
{
 800370c:	b08a      	sub	sp, #40	; 0x28
	}
	return retval;
 800370e:	ab04      	add	r3, sp, #16
		retval.data[i] = vector->data[i] / divider;
 8003710:	ee86 7a00 	vdiv.f32	s14, s12, s0
 8003714:	edcd 7a04 	vstr	s15, [sp, #16]
 8003718:	eec6 7a80 	vdiv.f32	s15, s13, s0
 800371c:	ed8d 7a05 	vstr	s14, [sp, #20]
 8003720:	edcd 7a06 	vstr	s15, [sp, #24]
	return retval;
 8003724:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003728:	ab0a      	add	r3, sp, #40	; 0x28
 800372a:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 800372e:	ed9d 0a07 	vldr	s0, [sp, #28]
 8003732:	eddd 0a08 	vldr	s1, [sp, #32]
 8003736:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 800373a:	b00a      	add	sp, #40	; 0x28
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop

08003740 <vector_power>:

Vector vector_power(const Vector *vector, vector_base_type power)
{
 8003740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003742:	ed2d 8b02 	vpush	{d8}
 8003746:	4604      	mov	r4, r0
 8003748:	b08b      	sub	sp, #44	; 0x2c
 800374a:	ee10 0a10 	vmov	r0, s0
 800374e:	f7fc fef3 	bl	8000538 <__aeabi_f2d>
 8003752:	ae04      	add	r6, sp, #16
 8003754:	ec41 0b18 	vmov	d8, r0, r1
 8003758:	f104 070c 	add.w	r7, r4, #12
 800375c:	4635      	mov	r5, r6
	Vector retval;
	for (int i = 0; i < 3; i++) {
		retval.data[i] = (vector_base_type)pow((double)vector->data[i], (double)power);
 800375e:	f854 0b04 	ldr.w	r0, [r4], #4
 8003762:	f7fc fee9 	bl	8000538 <__aeabi_f2d>
 8003766:	eeb0 1a48 	vmov.f32	s2, s16
 800376a:	eef0 1a68 	vmov.f32	s3, s17
 800376e:	ec41 0b10 	vmov	d0, r0, r1
 8003772:	f002 fad5 	bl	8005d20 <pow>
 8003776:	ec51 0b10 	vmov	r0, r1, d0
 800377a:	f7fd f9e1 	bl	8000b40 <__aeabi_d2f>
	for (int i = 0; i < 3; i++) {
 800377e:	42bc      	cmp	r4, r7
		retval.data[i] = (vector_base_type)pow((double)vector->data[i], (double)power);
 8003780:	f845 0b04 	str.w	r0, [r5], #4
	for (int i = 0; i < 3; i++) {
 8003784:	d1eb      	bne.n	800375e <vector_power+0x1e>
	}
	return retval;
 8003786:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800378a:	ab0a      	add	r3, sp, #40	; 0x28
 800378c:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 8003790:	ed9d 0a07 	vldr	s0, [sp, #28]
 8003794:	eddd 0a08 	vldr	s1, [sp, #32]
 8003798:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 800379c:	b00b      	add	sp, #44	; 0x2c
 800379e:	ecbd 8b02 	vpop	{d8}
 80037a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037a4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80037a6:	f000 ff9d 	bl	80046e4 <vTaskStartScheduler>
  
  return osOK;
}
 80037aa:	2000      	movs	r0, #0
 80037ac:	bd08      	pop	{r3, pc}
 80037ae:	bf00      	nop

080037b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80037b0:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037b2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 80037b6:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80037b8:	2c84      	cmp	r4, #132	; 0x84
{
 80037ba:	4602      	mov	r2, r0
    fpriority += (priority - osPriorityIdle);
 80037bc:	bf14      	ite	ne
 80037be:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80037c0:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037c2:	ad03      	add	r5, sp, #12
{
 80037c4:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037c6:	6840      	ldr	r0, [r0, #4]
 80037c8:	6811      	ldr	r1, [r2, #0]
 80037ca:	8a12      	ldrh	r2, [r2, #16]
 80037cc:	e88d 0030 	stmia.w	sp, {r4, r5}
 80037d0:	f000 fe92 	bl	80044f8 <xTaskCreate>
 80037d4:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80037d6:	bf0c      	ite	eq
 80037d8:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80037da:	2000      	movne	r0, #0
}
 80037dc:	b005      	add	sp, #20
 80037de:	bd30      	pop	{r4, r5, pc}

080037e0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80037e0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80037e2:	2800      	cmp	r0, #0
 80037e4:	bf08      	it	eq
 80037e6:	2001      	moveq	r0, #1
 80037e8:	f001 f948 	bl	8004a7c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80037ec:	2000      	movs	r0, #0
 80037ee:	bd08      	pop	{r3, pc}

080037f0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80037f0:	b500      	push	{lr}
 80037f2:	b083      	sub	sp, #12
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 80037f4:	6803      	ldr	r3, [r0, #0]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	f1a1 0201 	sub.w	r2, r1, #1
 80037fe:	fab2 f282 	clz	r2, r2
 8003802:	0952      	lsrs	r2, r2, #5
 8003804:	2101      	movs	r1, #1
 8003806:	4803      	ldr	r0, [pc, #12]	; (8003814 <osTimerCreate+0x24>)
 8003808:	f001 fcac 	bl	8005164 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 800380c:	b003      	add	sp, #12
 800380e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003812:	bf00      	nop
 8003814:	08006f38 	.word	0x08006f38

08003818 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003818:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800381a:	f001 fac3 	bl	8004da4 <xTaskGetSchedulerState>
 800381e:	2801      	cmp	r0, #1
 8003820:	d003      	beq.n	800382a <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003826:	f000 ba0d 	b.w	8003c44 <xPortSysTickHandler>
 800382a:	bd08      	pop	{r3, pc}

0800382c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800382c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800382e:	4b11      	ldr	r3, [pc, #68]	; (8003874 <prvInsertBlockIntoFreeList+0x48>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4282      	cmp	r2, r0
 8003834:	d201      	bcs.n	800383a <prvInsertBlockIntoFreeList+0xe>
 8003836:	4613      	mov	r3, r2
 8003838:	e7fa      	b.n	8003830 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800383a:	685c      	ldr	r4, [r3, #4]
 800383c:	1919      	adds	r1, r3, r4
 800383e:	4288      	cmp	r0, r1
 8003840:	d103      	bne.n	800384a <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003842:	6841      	ldr	r1, [r0, #4]
 8003844:	4421      	add	r1, r4
 8003846:	6059      	str	r1, [r3, #4]
 8003848:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800384a:	6844      	ldr	r4, [r0, #4]
 800384c:	1901      	adds	r1, r0, r4
 800384e:	428a      	cmp	r2, r1
 8003850:	d109      	bne.n	8003866 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003852:	4909      	ldr	r1, [pc, #36]	; (8003878 <prvInsertBlockIntoFreeList+0x4c>)
 8003854:	6809      	ldr	r1, [r1, #0]
 8003856:	428a      	cmp	r2, r1
 8003858:	d005      	beq.n	8003866 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800385a:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003860:	4421      	add	r1, r4
 8003862:	6041      	str	r1, [r0, #4]
 8003864:	e000      	b.n	8003868 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003866:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003868:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800386a:	bf18      	it	ne
 800386c:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800386e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	20003d04 	.word	0x20003d04
 8003878:	200000f4 	.word	0x200000f4

0800387c <pvPortMalloc>:
{
 800387c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003880:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003882:	f000 ff6f 	bl	8004764 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003886:	4843      	ldr	r0, [pc, #268]	; (8003994 <pvPortMalloc+0x118>)
 8003888:	6803      	ldr	r3, [r0, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d05c      	beq.n	8003948 <pvPortMalloc+0xcc>
 800388e:	4b42      	ldr	r3, [pc, #264]	; (8003998 <pvPortMalloc+0x11c>)
 8003890:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003892:	422c      	tst	r4, r5
 8003894:	d151      	bne.n	800393a <pvPortMalloc+0xbe>
			if( xWantedSize > 0 )
 8003896:	2c00      	cmp	r4, #0
 8003898:	d04f      	beq.n	800393a <pvPortMalloc+0xbe>
				xWantedSize += xHeapStructSize;
 800389a:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800389e:	0759      	lsls	r1, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038a0:	bf1c      	itt	ne
 80038a2:	f023 0307 	bicne.w	r3, r3, #7
 80038a6:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d046      	beq.n	800393a <pvPortMalloc+0xbe>
 80038ac:	4f3b      	ldr	r7, [pc, #236]	; (800399c <pvPortMalloc+0x120>)
 80038ae:	683e      	ldr	r6, [r7, #0]
 80038b0:	42b3      	cmp	r3, r6
 80038b2:	d842      	bhi.n	800393a <pvPortMalloc+0xbe>
				pxBlock = xStart.pxNextFreeBlock;
 80038b4:	493a      	ldr	r1, [pc, #232]	; (80039a0 <pvPortMalloc+0x124>)
 80038b6:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038b8:	e006      	b.n	80038c8 <pvPortMalloc+0x4c>
 80038ba:	f8d4 e000 	ldr.w	lr, [r4]
 80038be:	f1be 0f00 	cmp.w	lr, #0
 80038c2:	d004      	beq.n	80038ce <pvPortMalloc+0x52>
 80038c4:	4621      	mov	r1, r4
 80038c6:	4674      	mov	r4, lr
 80038c8:	6862      	ldr	r2, [r4, #4]
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d8f5      	bhi.n	80038ba <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80038ce:	6800      	ldr	r0, [r0, #0]
 80038d0:	4284      	cmp	r4, r0
 80038d2:	d032      	beq.n	800393a <pvPortMalloc+0xbe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038d4:	6820      	ldr	r0, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038d6:	f8d1 8000 	ldr.w	r8, [r1]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038da:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038dc:	1ad1      	subs	r1, r2, r3
 80038de:	2910      	cmp	r1, #16
 80038e0:	d910      	bls.n	8003904 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038e2:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038e4:	0742      	lsls	r2, r0, #29
 80038e6:	d008      	beq.n	80038fa <pvPortMalloc+0x7e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	e7fe      	b.n	80038f8 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038fa:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80038fc:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038fe:	f7ff ff95 	bl	800382c <prvInsertBlockIntoFreeList>
 8003902:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003904:	4827      	ldr	r0, [pc, #156]	; (80039a4 <pvPortMalloc+0x128>)
 8003906:	6801      	ldr	r1, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003908:	1ab6      	subs	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 800390a:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800390c:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800390e:	428e      	cmp	r6, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003910:	6062      	str	r2, [r4, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003912:	f108 0808 	add.w	r8, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8003916:	6023      	str	r3, [r4, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003918:	bf38      	it	cc
 800391a:	6006      	strcc	r6, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800391c:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 800391e:	f000 ffd7 	bl	80048d0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003922:	f018 0f07 	tst.w	r8, #7
 8003926:	d00c      	beq.n	8003942 <pvPortMalloc+0xc6>
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	e7fe      	b.n	8003938 <pvPortMalloc+0xbc>
	( void ) xTaskResumeAll();
 800393a:	f000 ffc9 	bl	80048d0 <xTaskResumeAll>
 800393e:	f04f 0800 	mov.w	r8, #0
}
 8003942:	4640      	mov	r0, r8
 8003944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 8003948:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <pvPortMalloc+0x12c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800394a:	0755      	lsls	r5, r2, #29
 800394c:	d01f      	beq.n	800398e <pvPortMalloc+0x112>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800394e:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003950:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003954:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
 8003958:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800395a:	460a      	mov	r2, r1
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800395c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800395e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003960:	f023 0307 	bic.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003964:	4e0d      	ldr	r6, [pc, #52]	; (800399c <pvPortMalloc+0x120>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003966:	4d0e      	ldr	r5, [pc, #56]	; (80039a0 <pvPortMalloc+0x124>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003968:	f8df e038 	ldr.w	lr, [pc, #56]	; 80039a4 <pvPortMalloc+0x128>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800396c:	4f0a      	ldr	r7, [pc, #40]	; (8003998 <pvPortMalloc+0x11c>)
	pxEnd = ( void * ) uxAddress;
 800396e:	6003      	str	r3, [r0, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003970:	1a99      	subs	r1, r3, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003972:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003974:	2600      	movs	r6, #0
 8003976:	e885 0044 	stmia.w	r5, {r2, r6}
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800397a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	pxEnd->xBlockSize = 0;
 800397e:	605e      	str	r6, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003980:	601e      	str	r6, [r3, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003982:	f8ce 1000 	str.w	r1, [lr]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003986:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003988:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	e781      	b.n	8003892 <pvPortMalloc+0x16>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800398e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003992:	e7e3      	b.n	800395c <pvPortMalloc+0xe0>
 8003994:	200000f4 	.word	0x200000f4
 8003998:	20003cf8 	.word	0x20003cf8
 800399c:	20003cfc 	.word	0x20003cfc
 80039a0:	20003d04 	.word	0x20003d04
 80039a4:	20003d00 	.word	0x20003d00
 80039a8:	200000f8 	.word	0x200000f8

080039ac <vPortFree>:
	if( pv != NULL )
 80039ac:	b1d0      	cbz	r0, 80039e4 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80039ae:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <vPortFree+0x68>)
 80039b0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	4213      	tst	r3, r2
 80039b8:	d108      	bne.n	80039cc <vPortFree+0x20>
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	e7fe      	b.n	80039ca <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039cc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80039d0:	b149      	cbz	r1, 80039e6 <vPortFree+0x3a>
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	e7fe      	b.n	80039e2 <vPortFree+0x36>
 80039e4:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039e6:	ea23 0302 	bic.w	r3, r3, r2
{
 80039ea:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039ec:	f840 3c04 	str.w	r3, [r0, #-4]
 80039f0:	4604      	mov	r4, r0
				vTaskSuspendAll();
 80039f2:	f000 feb7 	bl	8004764 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80039f6:	4a08      	ldr	r2, [pc, #32]	; (8003a18 <vPortFree+0x6c>)
 80039f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80039fc:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039fe:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a02:	440b      	add	r3, r1
 8003a04:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a06:	f7ff ff11 	bl	800382c <prvInsertBlockIntoFreeList>
}
 8003a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003a0e:	f000 bf5f 	b.w	80048d0 <xTaskResumeAll>
 8003a12:	bf00      	nop
 8003a14:	20003cf8 	.word	0x20003cf8
 8003a18:	20003cfc 	.word	0x20003cfc

08003a1c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a1c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a20:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a24:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a26:	6081      	str	r1, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a28:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a2c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a2e:	6103      	str	r3, [r0, #16]
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop

08003a34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	6103      	str	r3, [r0, #16]
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop

08003a3c <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003a3c:	e890 000c 	ldmia.w	r0, {r2, r3}
{
 8003a40:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a42:	689c      	ldr	r4, [r3, #8]
 8003a44:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a46:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8003a48:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8003a4a:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a4c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a4e:	6099      	str	r1, [r3, #8]
}
 8003a50:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a54:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003a56:	6002      	str	r2, [r0, #0]
}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop

08003a5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a5c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a5e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a60:	1c6b      	adds	r3, r5, #1
 8003a62:	d011      	beq.n	8003a88 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a64:	f100 0208 	add.w	r2, r0, #8
 8003a68:	e000      	b.n	8003a6c <vListInsert+0x10>
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	6853      	ldr	r3, [r2, #4]
 8003a6e:	681c      	ldr	r4, [r3, #0]
 8003a70:	42a5      	cmp	r5, r4
 8003a72:	d2fa      	bcs.n	8003a6a <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003a74:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a76:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8003a78:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a7a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a7c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a7e:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a80:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003a82:	6004      	str	r4, [r0, #0]
}
 8003a84:	bc30      	pop	{r4, r5}
 8003a86:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a88:	6902      	ldr	r2, [r0, #16]
 8003a8a:	6853      	ldr	r3, [r2, #4]
 8003a8c:	e7f2      	b.n	8003a74 <vListInsert+0x18>
 8003a8e:	bf00      	nop

08003a90 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a90:	6843      	ldr	r3, [r0, #4]
 8003a92:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003a94:	6902      	ldr	r2, [r0, #16]
{
 8003a96:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a98:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a9a:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a9c:	6854      	ldr	r4, [r2, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a9e:	604b      	str	r3, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8003aa0:	6813      	ldr	r3, [r2, #0]
	if( pxList->pxIndex == pxItemToRemove )
 8003aa2:	42a0      	cmp	r0, r4
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003aa4:	bf08      	it	eq
 8003aa6:	6051      	streq	r1, [r2, #4]
	( pxList->uxNumberOfItems )--;
 8003aa8:	3b01      	subs	r3, #1
	pxItemToRemove->pvContainer = NULL;
 8003aaa:	2100      	movs	r1, #0
 8003aac:	6101      	str	r1, [r0, #16]

	return pxList->uxNumberOfItems;
}
 8003aae:	f85d 4b04 	ldr.w	r4, [sp], #4
	( pxList->uxNumberOfItems )--;
 8003ab2:	6013      	str	r3, [r2, #0]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	4770      	bx	lr

08003ab8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <prvTaskExitError+0x2c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	d008      	beq.n	8003ad2 <prvTaskExitError+0x1a>
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	e7fe      	b.n	8003ad0 <prvTaskExitError+0x18>
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	e7fe      	b.n	8003ae2 <prvTaskExitError+0x2a>
 8003ae4:	20000008 	.word	0x20000008

08003ae8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003ae8:	4806      	ldr	r0, [pc, #24]	; (8003b04 <prvPortStartFirstTask+0x1c>)
 8003aea:	6800      	ldr	r0, [r0, #0]
 8003aec:	6800      	ldr	r0, [r0, #0]
 8003aee:	f380 8808 	msr	MSP, r0
 8003af2:	b662      	cpsie	i
 8003af4:	b661      	cpsie	f
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	df00      	svc	0
 8003b00:	bf00      	nop
 8003b02:	0000      	.short	0x0000
 8003b04:	e000ed08 	.word	0xe000ed08

08003b08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b18 <vPortEnableVFP+0x10>
 8003b0c:	6801      	ldr	r1, [r0, #0]
 8003b0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b12:	6001      	str	r1, [r0, #0]
 8003b14:	4770      	bx	lr
 8003b16:	0000      	.short	0x0000
 8003b18:	e000ed88 	.word	0xe000ed88

08003b1c <pxPortInitialiseStack>:
{
 8003b1c:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b1e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b22:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b26:	4c07      	ldr	r4, [pc, #28]	; (8003b44 <pxPortInitialiseStack+0x28>)
 8003b28:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003b2c:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b30:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b34:	e900 0022 	stmdb	r0, {r1, r5}
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003b38:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003b3c:	bc30      	pop	{r4, r5}
 8003b3e:	3844      	subs	r0, #68	; 0x44
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	08003ab9 	.word	0x08003ab9
	...

08003b50 <SVC_Handler>:
	__asm volatile (
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <pxCurrentTCBConst2>)
 8003b52:	6819      	ldr	r1, [r3, #0]
 8003b54:	6808      	ldr	r0, [r1, #0]
 8003b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b5a:	f380 8809 	msr	PSP, r0
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f04f 0000 	mov.w	r0, #0
 8003b66:	f380 8811 	msr	BASEPRI, r0
 8003b6a:	4770      	bx	lr
 8003b6c:	f3af 8000 	nop.w

08003b70 <pxCurrentTCBConst2>:
 8003b70:	20003d14 	.word	0x20003d14

08003b74 <vPortEnterCritical>:
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003b84:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <vPortEnterCritical+0x3c>)
 8003b86:	6813      	ldr	r3, [r2, #0]
 8003b88:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8003b8a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003b8c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003b8e:	d000      	beq.n	8003b92 <vPortEnterCritical+0x1e>
 8003b90:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <vPortEnterCritical+0x40>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003b9a:	d0f9      	beq.n	8003b90 <vPortEnterCritical+0x1c>
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	e7fe      	b.n	8003bac <vPortEnterCritical+0x38>
 8003bae:	bf00      	nop
 8003bb0:	20000008 	.word	0x20000008
 8003bb4:	e000ed04 	.word	0xe000ed04

08003bb8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003bb8:	4a08      	ldr	r2, [pc, #32]	; (8003bdc <vPortExitCritical+0x24>)
 8003bba:	6813      	ldr	r3, [r2, #0]
 8003bbc:	b943      	cbnz	r3, 8003bd0 <vPortExitCritical+0x18>
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	e7fe      	b.n	8003bce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003bd4:	b90b      	cbnz	r3, 8003bda <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	4770      	bx	lr
 8003bdc:	20000008 	.word	0x20000008

08003be0 <PendSV_Handler>:
	__asm volatile
 8003be0:	f3ef 8009 	mrs	r0, PSP
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <pxCurrentTCBConst>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	f01e 0f10 	tst.w	lr, #16
 8003bf0:	bf08      	it	eq
 8003bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bfa:	6010      	str	r0, [r2, #0]
 8003bfc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c04:	f380 8811 	msr	BASEPRI, r0
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f000 ffa2 	bl	8004b58 <vTaskSwitchContext>
 8003c14:	f04f 0000 	mov.w	r0, #0
 8003c18:	f380 8811 	msr	BASEPRI, r0
 8003c1c:	bc08      	pop	{r3}
 8003c1e:	6819      	ldr	r1, [r3, #0]
 8003c20:	6808      	ldr	r0, [r1, #0]
 8003c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c26:	f01e 0f10 	tst.w	lr, #16
 8003c2a:	bf08      	it	eq
 8003c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c30:	f380 8809 	msr	PSP, r0
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	f3af 8000 	nop.w

08003c40 <pxCurrentTCBConst>:
 8003c40:	20003d14 	.word	0x20003d14

08003c44 <xPortSysTickHandler>:
{
 8003c44:	b508      	push	{r3, lr}
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003c56:	f000 fd93 	bl	8004780 <xTaskIncrementTick>
 8003c5a:	b118      	cbz	r0, 8003c64 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c5c:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <xPortSysTickHandler+0x28>)
 8003c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c62:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003c64:	2300      	movs	r3, #0
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	bd08      	pop	{r3, pc}
 8003c6c:	e000ed04 	.word	0xe000ed04

08003c70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <vPortSetupTimerInterrupt+0x1c>)
 8003c72:	4907      	ldr	r1, [pc, #28]	; (8003c90 <vPortSetupTimerInterrupt+0x20>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4807      	ldr	r0, [pc, #28]	; (8003c94 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c78:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c7a:	fba1 1303 	umull	r1, r3, r1, r3
 8003c7e:	099b      	lsrs	r3, r3, #6
 8003c80:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c82:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c84:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c86:	6011      	str	r1, [r2, #0]
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000000 	.word	0x20000000
 8003c90:	10624dd3 	.word	0x10624dd3
 8003c94:	e000e014 	.word	0xe000e014
 8003c98:	e000e010 	.word	0xe000e010

08003c9c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c9c:	4b31      	ldr	r3, [pc, #196]	; (8003d64 <xPortStartScheduler+0xc8>)
 8003c9e:	4a32      	ldr	r2, [pc, #200]	; (8003d68 <xPortStartScheduler+0xcc>)
 8003ca0:	6819      	ldr	r1, [r3, #0]
 8003ca2:	4291      	cmp	r1, r2
 8003ca4:	d04c      	beq.n	8003d40 <xPortStartScheduler+0xa4>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <xPortStartScheduler+0xd0>)
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d051      	beq.n	8003d52 <xPortStartScheduler+0xb6>
{
 8003cae:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cb0:	4b2f      	ldr	r3, [pc, #188]	; (8003d70 <xPortStartScheduler+0xd4>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cb2:	4c30      	ldr	r4, [pc, #192]	; (8003d74 <xPortStartScheduler+0xd8>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cb4:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cb6:	4830      	ldr	r0, [pc, #192]	; (8003d78 <xPortStartScheduler+0xdc>)
{
 8003cb8:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cba:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cbc:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cbe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cc0:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cca:	f89d 2003 	ldrb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cce:	f89d 1003 	ldrb.w	r1, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cd2:	f002 0250 	and.w	r2, r2, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cd6:	2307      	movs	r3, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cd8:	0609      	lsls	r1, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cda:	7022      	strb	r2, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cdc:	6003      	str	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cde:	d50e      	bpl.n	8003cfe <xPortStartScheduler+0x62>
 8003ce0:	2306      	movs	r3, #6
 8003ce2:	e000      	b.n	8003ce6 <xPortStartScheduler+0x4a>
 8003ce4:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ce6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003cea:	0052      	lsls	r2, r2, #1
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cf2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003cf6:	0612      	lsls	r2, r2, #24
 8003cf8:	f103 31ff 	add.w	r1, r3, #4294967295
 8003cfc:	d4f2      	bmi.n	8003ce4 <xPortStartScheduler+0x48>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003cfe:	9901      	ldr	r1, [sp, #4]
 8003d00:	4c1b      	ldr	r4, [pc, #108]	; (8003d70 <xPortStartScheduler+0xd4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d02:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <xPortStartScheduler+0xe0>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d04:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d06:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d0c:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d0e:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d10:	6813      	ldr	r3, [r2, #0]
 8003d12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d18:	6813      	ldr	r3, [r2, #0]
 8003d1a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d1e:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 8003d20:	f7ff ffa6 	bl	8003c70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003d24:	4b16      	ldr	r3, [pc, #88]	; (8003d80 <xPortStartScheduler+0xe4>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8003d2a:	f7ff feed 	bl	8003b08 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d2e:	4a15      	ldr	r2, [pc, #84]	; (8003d84 <xPortStartScheduler+0xe8>)
 8003d30:	6813      	ldr	r3, [r2, #0]
 8003d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003d36:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8003d38:	f7ff fed6 	bl	8003ae8 <prvPortStartFirstTask>
	prvTaskExitError();
 8003d3c:	f7ff febc 	bl	8003ab8 <prvTaskExitError>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	e7fe      	b.n	8003d50 <xPortStartScheduler+0xb4>
 8003d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	e7fe      	b.n	8003d62 <xPortStartScheduler+0xc6>
 8003d64:	e000ed00 	.word	0xe000ed00
 8003d68:	410fc271 	.word	0x410fc271
 8003d6c:	410fc270 	.word	0x410fc270
 8003d70:	e000e400 	.word	0xe000e400
 8003d74:	20003d0c 	.word	0x20003d0c
 8003d78:	20003d10 	.word	0x20003d10
 8003d7c:	e000ed20 	.word	0xe000ed20
 8003d80:	20000008 	.word	0x20000008
 8003d84:	e000ef34 	.word	0xe000ef34

08003d88 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8003d88:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003d8c:	2b0f      	cmp	r3, #15
 8003d8e:	d90e      	bls.n	8003dae <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d90:	4910      	ldr	r1, [pc, #64]	; (8003dd4 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003d92:	4a11      	ldr	r2, [pc, #68]	; (8003dd8 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d94:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003d96:	7812      	ldrb	r2, [r2, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d908      	bls.n	8003dae <vPortValidateInterruptPriority+0x26>
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	e7fe      	b.n	8003dac <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003dae:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <vPortValidateInterruptPriority+0x54>)
 8003db0:	4a0b      	ldr	r2, [pc, #44]	; (8003de0 <vPortValidateInterruptPriority+0x58>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d908      	bls.n	8003dd0 <vPortValidateInterruptPriority+0x48>
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	e7fe      	b.n	8003dce <vPortValidateInterruptPriority+0x46>
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	e000e3f0 	.word	0xe000e3f0
 8003dd8:	20003d0c 	.word	0x20003d0c
 8003ddc:	e000ed0c 	.word	0xe000ed0c
 8003de0:	20003d10 	.word	0x20003d10

08003de4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003de8:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dea:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8003dec:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dee:	b932      	cbnz	r2, 8003dfe <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003df0:	6805      	ldr	r5, [r0, #0]
 8003df2:	bb3d      	cbnz	r5, 8003e44 <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003df4:	6840      	ldr	r0, [r0, #4]
 8003df6:	f001 f831 	bl	8004e5c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003dfa:	6065      	str	r5, [r4, #4]
 8003dfc:	e025      	b.n	8003e4a <prvCopyDataToQueue+0x66>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003dfe:	b96d      	cbnz	r5, 8003e1c <prvCopyDataToQueue+0x38>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003e00:	6880      	ldr	r0, [r0, #8]
 8003e02:	f001 fb67 	bl	80054d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003e06:	68a3      	ldr	r3, [r4, #8]
 8003e08:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e0a:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003e0c:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e0e:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003e10:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e12:	d317      	bcc.n	8003e44 <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8003e18:	4628      	mov	r0, r5
 8003e1a:	e016      	b.n	8003e4a <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1c:	68c0      	ldr	r0, [r0, #12]
 8003e1e:	f001 fb59 	bl	80054d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003e22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e24:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e26:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003e28:	425b      	negs	r3, r3
 8003e2a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e2c:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003e2e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e30:	d202      	bcs.n	8003e38 <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003e32:	6862      	ldr	r2, [r4, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e38:	2d02      	cmp	r5, #2
 8003e3a:	d103      	bne.n	8003e44 <prvCopyDataToQueue+0x60>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e3c:	b126      	cbz	r6, 8003e48 <prvCopyDataToQueue+0x64>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e3e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8003e40:	2000      	movs	r0, #0
 8003e42:	e002      	b.n	8003e4a <prvCopyDataToQueue+0x66>
 8003e44:	2000      	movs	r0, #0
 8003e46:	e000      	b.n	8003e4a <prvCopyDataToQueue+0x66>
 8003e48:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8003e4a:	3601      	adds	r6, #1
 8003e4c:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}

08003e50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e50:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003e52:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e54:	b172      	cbz	r2, 8003e74 <prvCopyDataFromQueue+0x24>
{
 8003e56:	b410      	push	{r4}
 8003e58:	4608      	mov	r0, r1
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e5a:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e5c:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e5e:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e60:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e62:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003e64:	bf24      	itt	cs
 8003e66:	6819      	ldrcs	r1, [r3, #0]
 8003e68:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e6a:	68d9      	ldr	r1, [r3, #12]
	}
}
 8003e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e70:	f001 bb30 	b.w	80054d4 <memcpy>
 8003e74:	4770      	bx	lr
	...

08003e78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e7c:	f7ff fe7a 	bl	8003b74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e80:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8003e84:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e86:	2c00      	cmp	r4, #0
 8003e88:	dd16      	ble.n	8003eb8 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e8c:	b1a3      	cbz	r3, 8003eb8 <prvUnlockQueue+0x40>
 8003e8e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8003e92:	e005      	b.n	8003ea0 <prvUnlockQueue+0x28>
 8003e94:	3c01      	subs	r4, #1
 8003e96:	b2e3      	uxtb	r3, r4
 8003e98:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e9a:	b16b      	cbz	r3, 8003eb8 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e9e:	b15b      	cbz	r3, 8003eb8 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f000 fecb 	bl	8004c3c <xTaskRemoveFromEventList>
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	d0f4      	beq.n	8003e94 <prvUnlockQueue+0x1c>
 8003eaa:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003eac:	f000 ff5e 	bl	8004d6c <vTaskMissedYield>
 8003eb0:	b2e3      	uxtb	r3, r4
 8003eb2:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f1      	bne.n	8003e9c <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003eb8:	23ff      	movs	r3, #255	; 0xff
 8003eba:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ebe:	f7ff fe7b 	bl	8003bb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ec2:	f7ff fe57 	bl	8003b74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ec6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8003eca:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ecc:	2c00      	cmp	r4, #0
 8003ece:	dd16      	ble.n	8003efe <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ed0:	692b      	ldr	r3, [r5, #16]
 8003ed2:	b1a3      	cbz	r3, 8003efe <prvUnlockQueue+0x86>
 8003ed4:	f105 0610 	add.w	r6, r5, #16
 8003ed8:	e005      	b.n	8003ee6 <prvUnlockQueue+0x6e>
 8003eda:	3c01      	subs	r4, #1
 8003edc:	b2e3      	uxtb	r3, r4
 8003ede:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ee0:	b16b      	cbz	r3, 8003efe <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ee2:	692b      	ldr	r3, [r5, #16]
 8003ee4:	b15b      	cbz	r3, 8003efe <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee6:	4630      	mov	r0, r6
 8003ee8:	f000 fea8 	bl	8004c3c <xTaskRemoveFromEventList>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d0f4      	beq.n	8003eda <prvUnlockQueue+0x62>
 8003ef0:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 8003ef2:	f000 ff3b 	bl	8004d6c <vTaskMissedYield>
 8003ef6:	b2e3      	uxtb	r3, r4
 8003ef8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f1      	bne.n	8003ee2 <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003efe:	23ff      	movs	r3, #255	; 0xff
 8003f00:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8003f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003f08:	f7ff be56 	b.w	8003bb8 <vPortExitCritical>

08003f0c <xQueueGenericReset>:
{
 8003f0c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8003f0e:	b1e0      	cbz	r0, 8003f4a <xQueueGenericReset+0x3e>
 8003f10:	4604      	mov	r4, r0
 8003f12:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8003f14:	f7ff fe2e 	bl	8003b74 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f1a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003f1c:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f1e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f20:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f24:	1acb      	subs	r3, r1, r3
 8003f26:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f28:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f2a:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8003f2c:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f2e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f30:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f32:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f36:	6062      	str	r2, [r4, #4]
		pxQueue->cTxLock = queueUNLOCKED;
 8003f38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003f3c:	bb05      	cbnz	r5, 8003f80 <xQueueGenericReset+0x74>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f3e:	6923      	ldr	r3, [r4, #16]
 8003f40:	b963      	cbnz	r3, 8003f5c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8003f42:	f7ff fe39 	bl	8003bb8 <vPortExitCritical>
}
 8003f46:	2001      	movs	r0, #1
 8003f48:	bd38      	pop	{r3, r4, r5, pc}
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	e7fe      	b.n	8003f5a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f5c:	f104 0010 	add.w	r0, r4, #16
 8003f60:	f000 fe6c 	bl	8004c3c <xTaskRemoveFromEventList>
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d0ec      	beq.n	8003f42 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <xQueueGenericReset+0x8c>)
 8003f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8003f78:	f7ff fe1e 	bl	8003bb8 <vPortExitCritical>
}
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f80:	f104 0010 	add.w	r0, r4, #16
 8003f84:	f7ff fd4a 	bl	8003a1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f8c:	f7ff fd46 	bl	8003a1c <vListInitialise>
	taskEXIT_CRITICAL();
 8003f90:	f7ff fe12 	bl	8003bb8 <vPortExitCritical>
}
 8003f94:	2001      	movs	r0, #1
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	e000ed04 	.word	0xe000ed04

08003f9c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f9c:	b940      	cbnz	r0, 8003fb0 <xQueueGenericCreate+0x14>
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	e7fe      	b.n	8003fae <xQueueGenericCreate+0x12>
	{
 8003fb0:	b570      	push	{r4, r5, r6, lr}
 8003fb2:	4606      	mov	r6, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fb4:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003fb8:	3048      	adds	r0, #72	; 0x48
 8003fba:	460d      	mov	r5, r1
 8003fbc:	f7ff fc5e 	bl	800387c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	b138      	cbz	r0, 8003fd4 <xQueueGenericCreate+0x38>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fc4:	b945      	cbnz	r5, 8003fd8 <xQueueGenericCreate+0x3c>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fc6:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003fc8:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fca:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fcc:	2101      	movs	r1, #1
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f7ff ff9c 	bl	8003f0c <xQueueGenericReset>
	}
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003fd8:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fdc:	6003      	str	r3, [r0, #0]
 8003fde:	e7f3      	b.n	8003fc8 <xQueueGenericCreate+0x2c>

08003fe0 <xQueueGenericSend>:
{
 8003fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	f000 80a7 	beq.w	800413c <xQueueGenericSend+0x15c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fee:	2900      	cmp	r1, #0
 8003ff0:	f000 8097 	beq.w	8004122 <xQueueGenericSend+0x142>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	f000 8087 	beq.w	8004108 <xQueueGenericSend+0x128>
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	461f      	mov	r7, r3
 8003ffe:	4689      	mov	r9, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004000:	f000 fed0 	bl	8004da4 <xTaskGetSchedulerState>
 8004004:	b950      	cbnz	r0, 800401c <xQueueGenericSend+0x3c>
 8004006:	9e01      	ldr	r6, [sp, #4]
 8004008:	b14e      	cbz	r6, 800401e <xQueueGenericSend+0x3e>
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	e7fe      	b.n	800401a <xQueueGenericSend+0x3a>
 800401c:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800401e:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004022:	f8df a138 	ldr.w	sl, [pc, #312]	; 800415c <xQueueGenericSend+0x17c>
 8004026:	e027      	b.n	8004078 <xQueueGenericSend+0x98>
		taskEXIT_CRITICAL();
 8004028:	f7ff fdc6 	bl	8003bb8 <vPortExitCritical>
		vTaskSuspendAll();
 800402c:	f000 fb9a 	bl	8004764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004030:	f7ff fda0 	bl	8003b74 <vPortEnterCritical>
 8004034:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004038:	2bff      	cmp	r3, #255	; 0xff
 800403a:	bf08      	it	eq
 800403c:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8004040:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004044:	2bff      	cmp	r3, #255	; 0xff
 8004046:	bf08      	it	eq
 8004048:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800404c:	f7ff fdb4 	bl	8003bb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004050:	a901      	add	r1, sp, #4
 8004052:	a802      	add	r0, sp, #8
 8004054:	f000 fe46 	bl	8004ce4 <xTaskCheckForTimeOut>
 8004058:	2800      	cmp	r0, #0
 800405a:	d178      	bne.n	800414e <xQueueGenericSend+0x16e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800405c:	f7ff fd8a 	bl	8003b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004060:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004062:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004064:	429a      	cmp	r2, r3
 8004066:	d017      	beq.n	8004098 <xQueueGenericSend+0xb8>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004068:	f7ff fda6 	bl	8003bb8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800406c:	4620      	mov	r0, r4
 800406e:	f7ff ff03 	bl	8003e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004072:	f000 fc2d 	bl	80048d0 <xTaskResumeAll>
 8004076:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004078:	f7ff fd7c 	bl	8003b74 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800407c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800407e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004080:	429a      	cmp	r2, r3
 8004082:	d326      	bcc.n	80040d2 <xQueueGenericSend+0xf2>
 8004084:	2f02      	cmp	r7, #2
 8004086:	d024      	beq.n	80040d2 <xQueueGenericSend+0xf2>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004088:	9d01      	ldr	r5, [sp, #4]
 800408a:	b1e5      	cbz	r5, 80040c6 <xQueueGenericSend+0xe6>
				else if( xEntryTimeSet == pdFALSE )
 800408c:	2e00      	cmp	r6, #0
 800408e:	d1cb      	bne.n	8004028 <xQueueGenericSend+0x48>
					vTaskSetTimeOutState( &xTimeOut );
 8004090:	a802      	add	r0, sp, #8
 8004092:	f000 fe17 	bl	8004cc4 <vTaskSetTimeOutState>
 8004096:	e7c7      	b.n	8004028 <xQueueGenericSend+0x48>
	taskEXIT_CRITICAL();
 8004098:	f7ff fd8e 	bl	8003bb8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800409c:	9901      	ldr	r1, [sp, #4]
 800409e:	f104 0010 	add.w	r0, r4, #16
 80040a2:	f000 fd91 	bl	8004bc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7ff fee6 	bl	8003e78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040ac:	f000 fc10 	bl	80048d0 <xTaskResumeAll>
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d1e0      	bne.n	8004076 <xQueueGenericSend+0x96>
					portYIELD_WITHIN_API();
 80040b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80040b8:	f8ca 3000 	str.w	r3, [sl]
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	e7d7      	b.n	8004076 <xQueueGenericSend+0x96>
					taskEXIT_CRITICAL();
 80040c6:	f7ff fd77 	bl	8003bb8 <vPortExitCritical>
					return errQUEUE_FULL;
 80040ca:	4628      	mov	r0, r5
}
 80040cc:	b004      	add	sp, #16
 80040ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040d2:	463a      	mov	r2, r7
 80040d4:	4649      	mov	r1, r9
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7ff fe84 	bl	8003de4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040de:	b963      	cbnz	r3, 80040fa <xQueueGenericSend+0x11a>
					else if( xYieldRequired != pdFALSE )
 80040e0:	b138      	cbz	r0, 80040f2 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80040e2:	4b1e      	ldr	r3, [pc, #120]	; (800415c <xQueueGenericSend+0x17c>)
 80040e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80040f2:	f7ff fd61 	bl	8003bb8 <vPortExitCritical>
				return pdPASS;
 80040f6:	2001      	movs	r0, #1
 80040f8:	e7e8      	b.n	80040cc <xQueueGenericSend+0xec>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040fe:	f000 fd9d 	bl	8004c3c <xTaskRemoveFromEventList>
 8004102:	2800      	cmp	r0, #0
 8004104:	d1ed      	bne.n	80040e2 <xQueueGenericSend+0x102>
 8004106:	e7f4      	b.n	80040f2 <xQueueGenericSend+0x112>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004108:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800410a:	2a01      	cmp	r2, #1
 800410c:	f43f af75 	beq.w	8003ffa <xQueueGenericSend+0x1a>
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	e7fe      	b.n	8004120 <xQueueGenericSend+0x140>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004122:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004124:	2a00      	cmp	r2, #0
 8004126:	f43f af65 	beq.w	8003ff4 <xQueueGenericSend+0x14>
 800412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	e7fe      	b.n	800413a <xQueueGenericSend+0x15a>
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	e7fe      	b.n	800414c <xQueueGenericSend+0x16c>
			prvUnlockQueue( pxQueue );
 800414e:	4620      	mov	r0, r4
 8004150:	f7ff fe92 	bl	8003e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004154:	f000 fbbc 	bl	80048d0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8004158:	2000      	movs	r0, #0
 800415a:	e7b7      	b.n	80040cc <xQueueGenericSend+0xec>
 800415c:	e000ed04 	.word	0xe000ed04

08004160 <xQueueGenericSendFromISR>:
{
 8004160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8004164:	b1f0      	cbz	r0, 80041a4 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004166:	2900      	cmp	r1, #0
 8004168:	d041      	beq.n	80041ee <xQueueGenericSendFromISR+0x8e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800416a:	2b02      	cmp	r3, #2
 800416c:	d033      	beq.n	80041d6 <xQueueGenericSendFromISR+0x76>
 800416e:	4604      	mov	r4, r0
 8004170:	461f      	mov	r7, r3
 8004172:	4690      	mov	r8, r2
 8004174:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004176:	f7ff fe07 	bl	8003d88 <vPortValidateInterruptPriority>
	__asm volatile
 800417a:	f3ef 8611 	mrs	r6, BASEPRI
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800418e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004190:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004192:	429a      	cmp	r2, r3
 8004194:	d30f      	bcc.n	80041b6 <xQueueGenericSendFromISR+0x56>
 8004196:	2f02      	cmp	r7, #2
 8004198:	d00d      	beq.n	80041b6 <xQueueGenericSendFromISR+0x56>
			xReturn = errQUEUE_FULL;
 800419a:	2000      	movs	r0, #0
	__asm volatile
 800419c:	f386 8811 	msr	BASEPRI, r6
}
 80041a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	e7fe      	b.n	80041b4 <xQueueGenericSendFromISR+0x54>
			const int8_t cTxLock = pxQueue->cTxLock;
 80041b6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041ba:	463a      	mov	r2, r7
 80041bc:	4649      	mov	r1, r9
			const int8_t cTxLock = pxQueue->cTxLock;
 80041be:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041c0:	4620      	mov	r0, r4
 80041c2:	f7ff fe0f 	bl	8003de4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80041c6:	1c6b      	adds	r3, r5, #1
 80041c8:	d01d      	beq.n	8004206 <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041ca:	1c6b      	adds	r3, r5, #1
 80041cc:	b25b      	sxtb	r3, r3
 80041ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80041d2:	2001      	movs	r0, #1
 80041d4:	e7e2      	b.n	800419c <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041d6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80041d8:	2c01      	cmp	r4, #1
 80041da:	d0c8      	beq.n	800416e <xQueueGenericSendFromISR+0xe>
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	e7fe      	b.n	80041ec <xQueueGenericSendFromISR+0x8c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041ee:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80041f0:	2c00      	cmp	r4, #0
 80041f2:	d0ba      	beq.n	800416a <xQueueGenericSendFromISR+0xa>
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	e7fe      	b.n	8004204 <xQueueGenericSendFromISR+0xa4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0e2      	beq.n	80041d2 <xQueueGenericSendFromISR+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800420c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004210:	f000 fd14 	bl	8004c3c <xTaskRemoveFromEventList>
 8004214:	2800      	cmp	r0, #0
 8004216:	d0dc      	beq.n	80041d2 <xQueueGenericSendFromISR+0x72>
							if( pxHigherPriorityTaskWoken != NULL )
 8004218:	f1b8 0f00 	cmp.w	r8, #0
 800421c:	d0d9      	beq.n	80041d2 <xQueueGenericSendFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800421e:	2001      	movs	r0, #1
 8004220:	f8c8 0000 	str.w	r0, [r8]
 8004224:	e7ba      	b.n	800419c <xQueueGenericSendFromISR+0x3c>
 8004226:	bf00      	nop

08004228 <xQueueGenericReceive>:
{
 8004228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004230:	2800      	cmp	r0, #0
 8004232:	f000 808d 	beq.w	8004350 <xQueueGenericReceive+0x128>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004236:	2900      	cmp	r1, #0
 8004238:	f000 80bb 	beq.w	80043b2 <xQueueGenericReceive+0x18a>
 800423c:	4604      	mov	r4, r0
 800423e:	4699      	mov	r9, r3
 8004240:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004242:	f000 fdaf 	bl	8004da4 <xTaskGetSchedulerState>
 8004246:	b950      	cbnz	r0, 800425e <xQueueGenericReceive+0x36>
 8004248:	9d01      	ldr	r5, [sp, #4]
 800424a:	b14d      	cbz	r5, 8004260 <xQueueGenericReceive+0x38>
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	e7fe      	b.n	800425c <xQueueGenericReceive+0x34>
 800425e:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
 8004260:	f7ff fc88 	bl	8003b74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004264:	6ba6      	ldr	r6, [r4, #56]	; 0x38
					portYIELD_WITHIN_API();
 8004266:	f8df a164 	ldr.w	sl, [pc, #356]	; 80043cc <xQueueGenericReceive+0x1a4>
		prvLockQueue( pxQueue );
 800426a:	2700      	movs	r7, #0
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800426c:	2e00      	cmp	r6, #0
 800426e:	d143      	bne.n	80042f8 <xQueueGenericReceive+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004270:	9b01      	ldr	r3, [sp, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d07d      	beq.n	8004372 <xQueueGenericReceive+0x14a>
				else if( xEntryTimeSet == pdFALSE )
 8004276:	b915      	cbnz	r5, 800427e <xQueueGenericReceive+0x56>
					vTaskSetTimeOutState( &xTimeOut );
 8004278:	a802      	add	r0, sp, #8
 800427a:	f000 fd23 	bl	8004cc4 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800427e:	f7ff fc9b 	bl	8003bb8 <vPortExitCritical>
		vTaskSuspendAll();
 8004282:	f000 fa6f 	bl	8004764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004286:	f7ff fc75 	bl	8003b74 <vPortEnterCritical>
 800428a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800428e:	2bff      	cmp	r3, #255	; 0xff
 8004290:	bf08      	it	eq
 8004292:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8004296:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800429a:	2bff      	cmp	r3, #255	; 0xff
 800429c:	bf08      	it	eq
 800429e:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80042a2:	f7ff fc89 	bl	8003bb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042a6:	a901      	add	r1, sp, #4
 80042a8:	a802      	add	r0, sp, #8
 80042aa:	f000 fd1b 	bl	8004ce4 <xTaskCheckForTimeOut>
 80042ae:	2800      	cmp	r0, #0
 80042b0:	d141      	bne.n	8004336 <xQueueGenericReceive+0x10e>
	taskENTER_CRITICAL();
 80042b2:	f7ff fc5f 	bl	8003b74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d133      	bne.n	8004324 <xQueueGenericReceive+0xfc>
	taskEXIT_CRITICAL();
 80042bc:	f7ff fc7c 	bl	8003bb8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d04d      	beq.n	8004362 <xQueueGenericReceive+0x13a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042c6:	9901      	ldr	r1, [sp, #4]
 80042c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042cc:	f000 fc7c 	bl	8004bc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042d0:	4620      	mov	r0, r4
 80042d2:	f7ff fdd1 	bl	8003e78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042d6:	f000 fafb 	bl	80048d0 <xTaskResumeAll>
 80042da:	b938      	cbnz	r0, 80042ec <xQueueGenericReceive+0xc4>
					portYIELD_WITHIN_API();
 80042dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042e0:	f8ca 3000 	str.w	r3, [sl]
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80042ee:	f7ff fc41 	bl	8003b74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042f2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042f4:	2e00      	cmp	r6, #0
 80042f6:	d0bb      	beq.n	8004270 <xQueueGenericReceive+0x48>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042f8:	4641      	mov	r1, r8
 80042fa:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80042fc:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042fe:	f7ff fda7 	bl	8003e50 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8004302:	f1b9 0f00 	cmp.w	r9, #0
 8004306:	d13a      	bne.n	800437e <xQueueGenericReceive+0x156>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004308:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800430a:	3e01      	subs	r6, #1
 800430c:	63a6      	str	r6, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800430e:	b913      	cbnz	r3, 8004316 <xQueueGenericReceive+0xee>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004310:	f000 fdfe 	bl	8004f10 <pvTaskIncrementMutexHeldCount>
 8004314:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004316:	6923      	ldr	r3, [r4, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d143      	bne.n	80043a4 <xQueueGenericReceive+0x17c>
				taskEXIT_CRITICAL();
 800431c:	f7ff fc4c 	bl	8003bb8 <vPortExitCritical>
				return pdPASS;
 8004320:	2001      	movs	r0, #1
 8004322:	e029      	b.n	8004378 <xQueueGenericReceive+0x150>
	taskEXIT_CRITICAL();
 8004324:	f7ff fc48 	bl	8003bb8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004328:	4620      	mov	r0, r4
 800432a:	f7ff fda5 	bl	8003e78 <prvUnlockQueue>
 800432e:	2501      	movs	r5, #1
				( void ) xTaskResumeAll();
 8004330:	f000 face 	bl	80048d0 <xTaskResumeAll>
 8004334:	e7db      	b.n	80042ee <xQueueGenericReceive+0xc6>
			prvUnlockQueue( pxQueue );
 8004336:	4620      	mov	r0, r4
 8004338:	f7ff fd9e 	bl	8003e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800433c:	f000 fac8 	bl	80048d0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8004340:	f7ff fc18 	bl	8003b74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004344:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004346:	b1a3      	cbz	r3, 8004372 <xQueueGenericReceive+0x14a>
	taskEXIT_CRITICAL();
 8004348:	f7ff fc36 	bl	8003bb8 <vPortExitCritical>
 800434c:	2501      	movs	r5, #1
 800434e:	e7ce      	b.n	80042ee <xQueueGenericReceive+0xc6>
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	e7fe      	b.n	8004360 <xQueueGenericReceive+0x138>
						taskENTER_CRITICAL();
 8004362:	f7ff fc07 	bl	8003b74 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004366:	6860      	ldr	r0, [r4, #4]
 8004368:	f000 fd2c 	bl	8004dc4 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800436c:	f7ff fc24 	bl	8003bb8 <vPortExitCritical>
 8004370:	e7a9      	b.n	80042c6 <xQueueGenericReceive+0x9e>
					taskEXIT_CRITICAL();
 8004372:	f7ff fc21 	bl	8003bb8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004376:	2000      	movs	r0, #0
}
 8004378:	b004      	add	sp, #16
 800437a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800437e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004380:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0ca      	beq.n	800431c <xQueueGenericReceive+0xf4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004386:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800438a:	f000 fc57 	bl	8004c3c <xTaskRemoveFromEventList>
 800438e:	2800      	cmp	r0, #0
 8004390:	d0c4      	beq.n	800431c <xQueueGenericReceive+0xf4>
							queueYIELD_IF_USING_PREEMPTION();
 8004392:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <xQueueGenericReceive+0x1a4>)
 8004394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	e7bb      	b.n	800431c <xQueueGenericReceive+0xf4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a4:	f104 0010 	add.w	r0, r4, #16
 80043a8:	f000 fc48 	bl	8004c3c <xTaskRemoveFromEventList>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d1f0      	bne.n	8004392 <xQueueGenericReceive+0x16a>
 80043b0:	e7b4      	b.n	800431c <xQueueGenericReceive+0xf4>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80043b4:	2a00      	cmp	r2, #0
 80043b6:	f43f af41 	beq.w	800423c <xQueueGenericReceive+0x14>
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	e7fe      	b.n	80043ca <xQueueGenericReceive+0x1a2>
 80043cc:	e000ed04 	.word	0xe000ed04

080043d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80043d0:	b430      	push	{r4, r5}
 80043d2:	4a08      	ldr	r2, [pc, #32]	; (80043f4 <vQueueAddToRegistry+0x24>)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043d4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80043d6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80043da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80043de:	b124      	cbz	r4, 80043ea <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043e0:	3301      	adds	r3, #1
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d1f7      	bne.n	80043d6 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80043e6:	bc30      	pop	{r4, r5}
 80043e8:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 80043ea:	6068      	str	r0, [r5, #4]
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80043ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	}
 80043f0:	bc30      	pop	{r4, r5}
 80043f2:	4770      	bx	lr
 80043f4:	200040e0 	.word	0x200040e0

080043f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	4604      	mov	r4, r0
 80043fc:	460d      	mov	r5, r1
 80043fe:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004400:	f7ff fbb8 	bl	8003b74 <vPortEnterCritical>
 8004404:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004408:	2bff      	cmp	r3, #255	; 0xff
 800440a:	bf04      	itt	eq
 800440c:	2300      	moveq	r3, #0
 800440e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8004412:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004416:	2bff      	cmp	r3, #255	; 0xff
 8004418:	bf04      	itt	eq
 800441a:	2300      	moveq	r3, #0
 800441c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8004420:	f7ff fbca 	bl	8003bb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004424:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004426:	b92b      	cbnz	r3, 8004434 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004428:	4632      	mov	r2, r6
 800442a:	4629      	mov	r1, r5
 800442c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004430:	f000 fbe4 	bl	8004bfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004434:	4620      	mov	r0, r4
	}
 8004436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800443a:	f7ff bd1d 	b.w	8003e78 <prvUnlockQueue>
 800443e:	bf00      	nop

08004440 <prvResetNextTaskUnblockTime.part.1>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004440:	4a03      	ldr	r2, [pc, #12]	; (8004450 <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004442:	4b04      	ldr	r3, [pc, #16]	; (8004454 <prvResetNextTaskUnblockTime.part.1+0x14>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004444:	6812      	ldr	r2, [r2, #0]
 8004446:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004448:	68d2      	ldr	r2, [r2, #12]
 800444a:	6852      	ldr	r2, [r2, #4]
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	4770      	bx	lr
 8004450:	20003d18 	.word	0x20003d18
 8004454:	20003df0 	.word	0x20003df0

08004458 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800445a:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800445c:	4d1b      	ldr	r5, [pc, #108]	; (80044cc <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800445e:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004460:	682b      	ldr	r3, [r5, #0]
{
 8004462:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004464:	1d18      	adds	r0, r3, #4
{
 8004466:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004468:	f7ff fb12 	bl	8003a90 <uxListRemove>
 800446c:	b940      	cbnz	r0, 8004480 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800446e:	682b      	ldr	r3, [r5, #0]
 8004470:	4917      	ldr	r1, [pc, #92]	; (80044d0 <prvAddCurrentTaskToDelayedList+0x78>)
 8004472:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004474:	680b      	ldr	r3, [r1, #0]
 8004476:	2201      	movs	r2, #1
 8004478:	4082      	lsls	r2, r0
 800447a:	ea23 0302 	bic.w	r3, r3, r2
 800447e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004480:	1c63      	adds	r3, r4, #1
 8004482:	d018      	beq.n	80044b6 <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004484:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004486:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
 8004488:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800448a:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800448c:	d80b      	bhi.n	80044a6 <prvAddCurrentTaskToDelayedList+0x4e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	6829      	ldr	r1, [r5, #0]
 8004494:	3104      	adds	r1, #4
 8004496:	f7ff fae1 	bl	8003a5c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800449a:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <prvAddCurrentTaskToDelayedList+0x80>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 80044a0:	bf38      	it	cc
 80044a2:	601c      	strcc	r4, [r3, #0]
 80044a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044a6:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <prvAddCurrentTaskToDelayedList+0x84>)
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044b0:	3104      	adds	r1, #4
 80044b2:	f7ff bad3 	b.w	8003a5c <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044b6:	2f00      	cmp	r7, #0
 80044b8:	d0e4      	beq.n	8004484 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ba:	6829      	ldr	r1, [r5, #0]
 80044bc:	4808      	ldr	r0, [pc, #32]	; (80044e0 <prvAddCurrentTaskToDelayedList+0x88>)
 80044be:	3104      	adds	r1, #4
}
 80044c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044c4:	f7ff baba 	b.w	8003a3c <vListInsertEnd>
 80044c8:	20003e38 	.word	0x20003e38
 80044cc:	20003d14 	.word	0x20003d14
 80044d0:	20003dc0 	.word	0x20003dc0
 80044d4:	20003d18 	.word	0x20003d18
 80044d8:	20003df0 	.word	0x20003df0
 80044dc:	20003d1c 	.word	0x20003d1c
 80044e0:	20003e10 	.word	0x20003e10

080044e4 <prvTaskIsTaskSuspended.part.0>:
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	e7fe      	b.n	80044f4 <prvTaskIsTaskSuspended.part.0+0x10>
 80044f6:	bf00      	nop

080044f8 <xTaskCreate>:
	{
 80044f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044fc:	ea4f 0882 	mov.w	r8, r2, lsl #2
	{
 8004500:	4606      	mov	r6, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004502:	4640      	mov	r0, r8
	{
 8004504:	4689      	mov	r9, r1
 8004506:	461f      	mov	r7, r3
 8004508:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450a:	f7ff f9b7 	bl	800387c <pvPortMalloc>
			if( pxStack != NULL )
 800450e:	2800      	cmp	r0, #0
 8004510:	f000 8092 	beq.w	8004638 <xTaskCreate+0x140>
 8004514:	4682      	mov	sl, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004516:	2064      	movs	r0, #100	; 0x64
 8004518:	f7ff f9b0 	bl	800387c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800451c:	4604      	mov	r4, r0
 800451e:	2800      	cmp	r0, #0
 8004520:	f000 8097 	beq.w	8004652 <xTaskCreate+0x15a>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004524:	4642      	mov	r2, r8
					pxNewTCB->pxStack = pxStack;
 8004526:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800452a:	21a5      	movs	r1, #165	; 0xa5
 800452c:	4650      	mov	r0, sl
 800452e:	f000 ffdc 	bl	80054ea <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004532:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004534:	f1a8 0804 	sub.w	r8, r8, #4
 8004538:	4498      	add	r8, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800453a:	f028 0807 	bic.w	r8, r8, #7
 800453e:	f109 33ff 	add.w	r3, r9, #4294967295
 8004542:	f109 011f 	add.w	r1, r9, #31
 8004546:	f104 0233 	add.w	r2, r4, #51	; 0x33
 800454a:	e001      	b.n	8004550 <xTaskCreate+0x58>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800454c:	428b      	cmp	r3, r1
 800454e:	d006      	beq.n	800455e <xTaskCreate+0x66>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004550:	7858      	ldrb	r0, [r3, #1]
 8004552:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8004556:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800455a:	2800      	cmp	r0, #0
 800455c:	d1f6      	bne.n	800454c <xTaskCreate+0x54>
 800455e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004560:	2b06      	cmp	r3, #6
 8004562:	bf28      	it	cs
 8004564:	2306      	movcs	r3, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004566:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800456a:	f104 0a04 	add.w	sl, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800456e:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004570:	6563      	str	r3, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004572:	4650      	mov	r0, sl
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004574:	f884 b053 	strb.w	fp, [r4, #83]	; 0x53
		pxNewTCB->uxMutexesHeld = 0;
 8004578:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
 800457c:	4699      	mov	r9, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800457e:	f7ff fa59 	bl	8003a34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004582:	f104 0018 	add.w	r0, r4, #24
 8004586:	f7ff fa55 	bl	8003a34 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458a:	f1c9 0307 	rsb	r3, r9, #7
		pxNewTCB->ulNotifiedValue = 0;
 800458e:	f8c4 b05c 	str.w	fp, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004592:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004594:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004596:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800459a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800459c:	463a      	mov	r2, r7
 800459e:	4631      	mov	r1, r6
 80045a0:	4640      	mov	r0, r8
 80045a2:	f7ff fabb 	bl	8003b1c <pxPortInitialiseStack>
 80045a6:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80045a8:	b105      	cbz	r5, 80045ac <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045aa:	602c      	str	r4, [r5, #0]
	taskENTER_CRITICAL();
 80045ac:	f7ff fae2 	bl	8003b74 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80045b0:	4a3e      	ldr	r2, [pc, #248]	; (80046ac <xTaskCreate+0x1b4>)
		if( pxCurrentTCB == NULL )
 80045b2:	4e3f      	ldr	r6, [pc, #252]	; (80046b0 <xTaskCreate+0x1b8>)
		uxCurrentNumberOfTasks++;
 80045b4:	6813      	ldr	r3, [r2, #0]
 80045b6:	3301      	adds	r3, #1
 80045b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045ba:	6833      	ldr	r3, [r6, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d03f      	beq.n	8004640 <xTaskCreate+0x148>
			if( xSchedulerRunning == pdFALSE )
 80045c0:	4f3c      	ldr	r7, [pc, #240]	; (80046b4 <xTaskCreate+0x1bc>)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	b363      	cbz	r3, 8004620 <xTaskCreate+0x128>
 80045c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80045c8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80046d8 <xTaskCreate+0x1e0>
		uxTaskNumber++;
 80045cc:	4a3a      	ldr	r2, [pc, #232]	; (80046b8 <xTaskCreate+0x1c0>)
		prvAddTaskToReadyList( pxNewTCB );
 80045ce:	f8df e10c 	ldr.w	lr, [pc, #268]	; 80046dc <xTaskCreate+0x1e4>
		uxTaskNumber++;
 80045d2:	6810      	ldr	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80045d4:	f8de c000 	ldr.w	ip, [lr]
 80045d8:	2501      	movs	r5, #1
		uxTaskNumber++;
 80045da:	4428      	add	r0, r5
 80045dc:	6010      	str	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80045de:	fa05 f203 	lsl.w	r2, r5, r3
 80045e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045e6:	ea42 020c 	orr.w	r2, r2, ip
 80045ea:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 80045ee:	4651      	mov	r1, sl
 80045f0:	f8ce 2000 	str.w	r2, [lr]
 80045f4:	f7ff fa22 	bl	8003a3c <vListInsertEnd>
	taskEXIT_CRITICAL();
 80045f8:	f7ff fade 	bl	8003bb8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	b1c3      	cbz	r3, 8004632 <xTaskCreate+0x13a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004600:	6832      	ldr	r2, [r6, #0]
 8004602:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004604:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004606:	429a      	cmp	r2, r3
 8004608:	d213      	bcs.n	8004632 <xTaskCreate+0x13a>
			taskYIELD_IF_USING_PREEMPTION();
 800460a:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <xTaskCreate+0x1c4>)
 800460c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800461a:	4628      	mov	r0, r5
 800461c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004620:	6832      	ldr	r2, [r6, #0]
 8004622:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004624:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004626:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80046d8 <xTaskCreate+0x1e0>
 800462a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800462c:	bf98      	it	ls
 800462e:	6034      	strls	r4, [r6, #0]
 8004630:	e7cc      	b.n	80045cc <xTaskCreate+0xd4>
			xReturn = pdPASS;
 8004632:	4628      	mov	r0, r5
	}
 8004634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004638:	f04f 30ff 	mov.w	r0, #4294967295
 800463c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 8004640:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004642:	6813      	ldr	r3, [r2, #0]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d00b      	beq.n	8004660 <xTaskCreate+0x168>
 8004648:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800464a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80046d8 <xTaskCreate+0x1e0>
 800464e:	4f19      	ldr	r7, [pc, #100]	; (80046b4 <xTaskCreate+0x1bc>)
 8004650:	e7bc      	b.n	80045cc <xTaskCreate+0xd4>
					vPortFree( pxStack );
 8004652:	4650      	mov	r0, sl
 8004654:	f7ff f9aa 	bl	80039ac <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004660:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80046d8 <xTaskCreate+0x1e0>
 8004664:	4645      	mov	r5, r8
 8004666:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800466a:	4628      	mov	r0, r5
 800466c:	3514      	adds	r5, #20
 800466e:	f7ff f9d5 	bl	8003a1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004672:	42af      	cmp	r7, r5
 8004674:	d1f9      	bne.n	800466a <xTaskCreate+0x172>
	vListInitialise( &xDelayedTaskList1 );
 8004676:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80046e0 <xTaskCreate+0x1e8>
	vListInitialise( &xDelayedTaskList2 );
 800467a:	4d11      	ldr	r5, [pc, #68]	; (80046c0 <xTaskCreate+0x1c8>)
 800467c:	4f0d      	ldr	r7, [pc, #52]	; (80046b4 <xTaskCreate+0x1bc>)
	vListInitialise( &xDelayedTaskList1 );
 800467e:	4648      	mov	r0, r9
 8004680:	f7ff f9cc 	bl	8003a1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004684:	4628      	mov	r0, r5
 8004686:	f7ff f9c9 	bl	8003a1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800468a:	480e      	ldr	r0, [pc, #56]	; (80046c4 <xTaskCreate+0x1cc>)
 800468c:	f7ff f9c6 	bl	8003a1c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004690:	480d      	ldr	r0, [pc, #52]	; (80046c8 <xTaskCreate+0x1d0>)
 8004692:	f7ff f9c3 	bl	8003a1c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004696:	480d      	ldr	r0, [pc, #52]	; (80046cc <xTaskCreate+0x1d4>)
 8004698:	f7ff f9c0 	bl	8003a1c <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800469c:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <xTaskCreate+0x1d8>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800469e:	4a0d      	ldr	r2, [pc, #52]	; (80046d4 <xTaskCreate+0x1dc>)
 80046a0:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046a4:	601d      	str	r5, [r3, #0]
 80046a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80046a8:	e790      	b.n	80045cc <xTaskCreate+0xd4>
 80046aa:	bf00      	nop
 80046ac:	20003dac 	.word	0x20003dac
 80046b0:	20003d14 	.word	0x20003d14
 80046b4:	20003e0c 	.word	0x20003e0c
 80046b8:	20003dbc 	.word	0x20003dbc
 80046bc:	e000ed04 	.word	0xe000ed04
 80046c0:	20003dd8 	.word	0x20003dd8
 80046c4:	20003df8 	.word	0x20003df8
 80046c8:	20003e24 	.word	0x20003e24
 80046cc:	20003e10 	.word	0x20003e10
 80046d0:	20003d1c 	.word	0x20003d1c
 80046d4:	20003d18 	.word	0x20003d18
 80046d8:	20003d20 	.word	0x20003d20
 80046dc:	20003dc0 	.word	0x20003dc0
 80046e0:	20003dc4 	.word	0x20003dc4

080046e4 <vTaskStartScheduler>:
{
 80046e4:	b530      	push	{r4, r5, lr}
 80046e6:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80046e8:	4b18      	ldr	r3, [pc, #96]	; (800474c <vTaskStartScheduler+0x68>)
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	2400      	movs	r4, #0
 80046ee:	9400      	str	r4, [sp, #0]
 80046f0:	4623      	mov	r3, r4
 80046f2:	2280      	movs	r2, #128	; 0x80
 80046f4:	4916      	ldr	r1, [pc, #88]	; (8004750 <vTaskStartScheduler+0x6c>)
 80046f6:	4817      	ldr	r0, [pc, #92]	; (8004754 <vTaskStartScheduler+0x70>)
 80046f8:	f7ff fefe 	bl	80044f8 <xTaskCreate>
		if( xReturn == pdPASS )
 80046fc:	2801      	cmp	r0, #1
 80046fe:	d00c      	beq.n	800471a <vTaskStartScheduler+0x36>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004700:	3001      	adds	r0, #1
 8004702:	d001      	beq.n	8004708 <vTaskStartScheduler+0x24>
}
 8004704:	b003      	add	sp, #12
 8004706:	bd30      	pop	{r4, r5, pc}
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	e7fe      	b.n	8004718 <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
 800471a:	f000 fcfb 	bl	8005114 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800471e:	2801      	cmp	r0, #1
 8004720:	d1ee      	bne.n	8004700 <vTaskStartScheduler+0x1c>
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004732:	4909      	ldr	r1, [pc, #36]	; (8004758 <vTaskStartScheduler+0x74>)
		xSchedulerRunning = pdTRUE;
 8004734:	4a09      	ldr	r2, [pc, #36]	; (800475c <vTaskStartScheduler+0x78>)
		xTickCount = ( TickType_t ) 0U;
 8004736:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <vTaskStartScheduler+0x7c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8004738:	f04f 35ff 	mov.w	r5, #4294967295
 800473c:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800473e:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8004740:	601c      	str	r4, [r3, #0]
}
 8004742:	b003      	add	sp, #12
 8004744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004748:	f7ff baa8 	b.w	8003c9c <xPortStartScheduler>
 800474c:	20003dec 	.word	0x20003dec
 8004750:	08006f34 	.word	0x08006f34
 8004754:	08004ac9 	.word	0x08004ac9
 8004758:	20003df0 	.word	0x20003df0
 800475c:	20003e0c 	.word	0x20003e0c
 8004760:	20003e38 	.word	0x20003e38

08004764 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004764:	4a02      	ldr	r2, [pc, #8]	; (8004770 <vTaskSuspendAll+0xc>)
 8004766:	6813      	ldr	r3, [r2, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	20003db8 	.word	0x20003db8

08004774 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004774:	4b01      	ldr	r3, [pc, #4]	; (800477c <xTaskGetTickCount+0x8>)
 8004776:	6818      	ldr	r0, [r3, #0]
}
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20003e38 	.word	0x20003e38

08004780 <xTaskIncrementTick>:
{
 8004780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004784:	4b47      	ldr	r3, [pc, #284]	; (80048a4 <xTaskIncrementTick+0x124>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d153      	bne.n	8004834 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 800478c:	4b46      	ldr	r3, [pc, #280]	; (80048a8 <xTaskIncrementTick+0x128>)
 800478e:	681e      	ldr	r6, [r3, #0]
 8004790:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8004792:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8004794:	2e00      	cmp	r6, #0
 8004796:	d05a      	beq.n	800484e <xTaskIncrementTick+0xce>
 8004798:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80048c8 <xTaskIncrementTick+0x148>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800479c:	f8db 2000 	ldr.w	r2, [fp]
 80047a0:	4296      	cmp	r6, r2
 80047a2:	d361      	bcc.n	8004868 <xTaskIncrementTick+0xe8>
 80047a4:	4d41      	ldr	r5, [pc, #260]	; (80048ac <xTaskIncrementTick+0x12c>)
 80047a6:	4f42      	ldr	r7, [pc, #264]	; (80048b0 <xTaskIncrementTick+0x130>)
 80047a8:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80048cc <xTaskIncrementTick+0x14c>
 80047ac:	2400      	movs	r4, #0
 80047ae:	e02e      	b.n	800480e <xTaskIncrementTick+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047b0:	682a      	ldr	r2, [r5, #0]
 80047b2:	68d2      	ldr	r2, [r2, #12]
 80047b4:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047bc:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 80047c0:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047c2:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 80047c4:	d364      	bcc.n	8004890 <xTaskIncrementTick+0x110>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047c6:	f7ff f963 	bl	8003a90 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047ca:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047ce:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047d2:	b109      	cbz	r1, 80047d8 <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047d4:	f7ff f95c 	bl	8003a90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047d8:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <xTaskIncrementTick+0x134>)
 80047da:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2201      	movs	r2, #1
 80047e2:	fa02 fe00 	lsl.w	lr, r2, r0
 80047e6:	ea4e 0e03 	orr.w	lr, lr, r3
 80047ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80047ee:	4b31      	ldr	r3, [pc, #196]	; (80048b4 <xTaskIncrementTick+0x134>)
 80047f0:	4651      	mov	r1, sl
 80047f2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80047f6:	f8c3 e000 	str.w	lr, [r3]
 80047fa:	f7ff f91f 	bl	8003a3c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047fe:	f8d8 0000 	ldr.w	r0, [r8]
 8004802:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8004806:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004808:	4291      	cmp	r1, r2
 800480a:	bf28      	it	cs
 800480c:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800480e:	682a      	ldr	r2, [r5, #0]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	2a00      	cmp	r2, #0
 8004814:	d1cc      	bne.n	80047b0 <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004816:	f04f 32ff 	mov.w	r2, #4294967295
 800481a:	f8cb 2000 	str.w	r2, [fp]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800481e:	f8d8 3000 	ldr.w	r3, [r8]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004828:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 800482c:	2b02      	cmp	r3, #2
 800482e:	bf28      	it	cs
 8004830:	2401      	movcs	r4, #1
 8004832:	e004      	b.n	800483e <xTaskIncrementTick+0xbe>
		++uxPendedTicks;
 8004834:	4a20      	ldr	r2, [pc, #128]	; (80048b8 <xTaskIncrementTick+0x138>)
 8004836:	6813      	ldr	r3, [r2, #0]
 8004838:	3301      	adds	r3, #1
 800483a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800483c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800483e:	4b1f      	ldr	r3, [pc, #124]	; (80048bc <xTaskIncrementTick+0x13c>)
 8004840:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8004842:	2b00      	cmp	r3, #0
 8004844:	bf18      	it	ne
 8004846:	2401      	movne	r4, #1
}
 8004848:	4620      	mov	r0, r4
 800484a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800484e:	4d17      	ldr	r5, [pc, #92]	; (80048ac <xTaskIncrementTick+0x12c>)
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	b16b      	cbz	r3, 8004872 <xTaskIncrementTick+0xf2>
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	e7fe      	b.n	8004866 <xTaskIncrementTick+0xe6>
 8004868:	4f11      	ldr	r7, [pc, #68]	; (80048b0 <xTaskIncrementTick+0x130>)
 800486a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80048cc <xTaskIncrementTick+0x14c>
BaseType_t xSwitchRequired = pdFALSE;
 800486e:	2400      	movs	r4, #0
 8004870:	e7d5      	b.n	800481e <xTaskIncrementTick+0x9e>
			taskSWITCH_DELAYED_LISTS();
 8004872:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <xTaskIncrementTick+0x140>)
 8004874:	6829      	ldr	r1, [r5, #0]
 8004876:	4a13      	ldr	r2, [pc, #76]	; (80048c4 <xTaskIncrementTick+0x144>)
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	6028      	str	r0, [r5, #0]
 800487c:	6019      	str	r1, [r3, #0]
 800487e:	6813      	ldr	r3, [r2, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	b12b      	cbz	r3, 8004896 <xTaskIncrementTick+0x116>
 800488a:	f7ff fdd9 	bl	8004440 <prvResetNextTaskUnblockTime.part.1>
 800488e:	e783      	b.n	8004798 <xTaskIncrementTick+0x18>
						xNextTaskUnblockTime = xItemValue;
 8004890:	f8cb 1000 	str.w	r1, [fp]
						break;
 8004894:	e7c3      	b.n	800481e <xTaskIncrementTick+0x9e>
		xNextTaskUnblockTime = portMAX_DELAY;
 8004896:	f8df b030 	ldr.w	fp, [pc, #48]	; 80048c8 <xTaskIncrementTick+0x148>
 800489a:	f04f 32ff 	mov.w	r2, #4294967295
 800489e:	f8cb 2000 	str.w	r2, [fp]
 80048a2:	e77b      	b.n	800479c <xTaskIncrementTick+0x1c>
 80048a4:	20003db8 	.word	0x20003db8
 80048a8:	20003e38 	.word	0x20003e38
 80048ac:	20003d18 	.word	0x20003d18
 80048b0:	20003d20 	.word	0x20003d20
 80048b4:	20003dc0 	.word	0x20003dc0
 80048b8:	20003db4 	.word	0x20003db4
 80048bc:	20003e3c 	.word	0x20003e3c
 80048c0:	20003d1c 	.word	0x20003d1c
 80048c4:	20003df4 	.word	0x20003df4
 80048c8:	20003df0 	.word	0x20003df0
 80048cc:	20003d14 	.word	0x20003d14

080048d0 <xTaskResumeAll>:
{
 80048d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 80048d4:	4c37      	ldr	r4, [pc, #220]	; (80049b4 <xTaskResumeAll+0xe4>)
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	b943      	cbnz	r3, 80048ec <xTaskResumeAll+0x1c>
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	e7fe      	b.n	80048ea <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80048ec:	f7ff f942 	bl	8003b74 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048f6:	6824      	ldr	r4, [r4, #0]
 80048f8:	2c00      	cmp	r4, #0
 80048fa:	d151      	bne.n	80049a0 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048fc:	4b2e      	ldr	r3, [pc, #184]	; (80049b8 <xTaskResumeAll+0xe8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d04d      	beq.n	80049a0 <xTaskResumeAll+0xd0>
 8004904:	4d2d      	ldr	r5, [pc, #180]	; (80049bc <xTaskResumeAll+0xec>)
 8004906:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80049d4 <xTaskResumeAll+0x104>
					prvAddTaskToReadyList( pxTCB );
 800490a:	4e2d      	ldr	r6, [pc, #180]	; (80049c0 <xTaskResumeAll+0xf0>)
 800490c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80049d8 <xTaskResumeAll+0x108>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004910:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80049dc <xTaskResumeAll+0x10c>
 8004914:	e01f      	b.n	8004956 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004916:	f8da 300c 	ldr.w	r3, [sl, #12]
 800491a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800491c:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004920:	f104 0018 	add.w	r0, r4, #24
 8004924:	f7ff f8b4 	bl	8003a90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004928:	4640      	mov	r0, r8
 800492a:	f7ff f8b1 	bl	8003a90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800492e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004930:	6832      	ldr	r2, [r6, #0]
 8004932:	fa07 f300 	lsl.w	r3, r7, r0
 8004936:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800493a:	4313      	orrs	r3, r2
 800493c:	4641      	mov	r1, r8
 800493e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8004942:	6033      	str	r3, [r6, #0]
 8004944:	f7ff f87a 	bl	8003a3c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004948:	f8db 3000 	ldr.w	r3, [fp]
 800494c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8004952:	bf28      	it	cs
 8004954:	602f      	strcs	r7, [r5, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004956:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 800495a:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1da      	bne.n	8004916 <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 8004960:	b13c      	cbz	r4, 8004972 <xTaskResumeAll+0xa2>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004962:	4b18      	ldr	r3, [pc, #96]	; (80049c4 <xTaskResumeAll+0xf4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	bb03      	cbnz	r3, 80049ac <xTaskResumeAll+0xdc>
		xNextTaskUnblockTime = portMAX_DELAY;
 800496a:	4b17      	ldr	r3, [pc, #92]	; (80049c8 <xTaskResumeAll+0xf8>)
 800496c:	f04f 32ff 	mov.w	r2, #4294967295
 8004970:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004972:	4e16      	ldr	r6, [pc, #88]	; (80049cc <xTaskResumeAll+0xfc>)
 8004974:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004976:	b13c      	cbz	r4, 8004988 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 8004978:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800497a:	f7ff ff01 	bl	8004780 <xTaskIncrementTick>
 800497e:	b100      	cbz	r0, 8004982 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8004980:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004982:	3c01      	subs	r4, #1
 8004984:	d1f9      	bne.n	800497a <xTaskResumeAll+0xaa>
						uxPendedTicks = 0;
 8004986:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	b14b      	cbz	r3, 80049a0 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 800498c:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <xTaskResumeAll+0x100>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800499c:	2401      	movs	r4, #1
 800499e:	e000      	b.n	80049a2 <xTaskResumeAll+0xd2>
BaseType_t xAlreadyYielded = pdFALSE;
 80049a0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80049a2:	f7ff f909 	bl	8003bb8 <vPortExitCritical>
}
 80049a6:	4620      	mov	r0, r4
 80049a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ac:	f7ff fd48 	bl	8004440 <prvResetNextTaskUnblockTime.part.1>
 80049b0:	e7df      	b.n	8004972 <xTaskResumeAll+0xa2>
 80049b2:	bf00      	nop
 80049b4:	20003db8 	.word	0x20003db8
 80049b8:	20003dac 	.word	0x20003dac
 80049bc:	20003e3c 	.word	0x20003e3c
 80049c0:	20003dc0 	.word	0x20003dc0
 80049c4:	20003d18 	.word	0x20003d18
 80049c8:	20003df0 	.word	0x20003df0
 80049cc:	20003db4 	.word	0x20003db4
 80049d0:	e000ed04 	.word	0xe000ed04
 80049d4:	20003df8 	.word	0x20003df8
 80049d8:	20003d20 	.word	0x20003d20
 80049dc:	20003d14 	.word	0x20003d14

080049e0 <vTaskDelayUntil>:
	{
 80049e0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 80049e2:	b1a8      	cbz	r0, 8004a10 <vTaskDelayUntil+0x30>
		configASSERT( ( xTimeIncrement > 0U ) );
 80049e4:	b941      	cbnz	r1, 80049f8 <vTaskDelayUntil+0x18>
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	e7fe      	b.n	80049f6 <vTaskDelayUntil+0x16>
		configASSERT( uxSchedulerSuspended == 0 );
 80049f8:	4c1d      	ldr	r4, [pc, #116]	; (8004a70 <vTaskDelayUntil+0x90>)
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	b18b      	cbz	r3, 8004a22 <vTaskDelayUntil+0x42>
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	e7fe      	b.n	8004a0e <vTaskDelayUntil+0x2e>
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	e7fe      	b.n	8004a20 <vTaskDelayUntil+0x40>
 8004a22:	4602      	mov	r2, r0
	++uxSchedulerSuspended;
 8004a24:	6820      	ldr	r0, [r4, #0]
			const TickType_t xConstTickCount = xTickCount;
 8004a26:	4d13      	ldr	r5, [pc, #76]	; (8004a74 <vTaskDelayUntil+0x94>)
	++uxSchedulerSuspended;
 8004a28:	3001      	adds	r0, #1
 8004a2a:	6020      	str	r0, [r4, #0]
 8004a2c:	460b      	mov	r3, r1
			const TickType_t xConstTickCount = xTickCount;
 8004a2e:	6828      	ldr	r0, [r5, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004a30:	6811      	ldr	r1, [r2, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 8004a32:	4288      	cmp	r0, r1
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004a34:	440b      	add	r3, r1
			if( xConstTickCount < *pxPreviousWakeTime )
 8004a36:	d214      	bcs.n	8004a62 <vTaskDelayUntil+0x82>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004a38:	4299      	cmp	r1, r3
 8004a3a:	d916      	bls.n	8004a6a <vTaskDelayUntil+0x8a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004a3c:	4298      	cmp	r0, r3
 8004a3e:	d214      	bcs.n	8004a6a <vTaskDelayUntil+0x8a>
			*pxPreviousWakeTime = xTimeToWake;
 8004a40:	6013      	str	r3, [r2, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004a42:	1a18      	subs	r0, r3, r0
 8004a44:	2100      	movs	r1, #0
 8004a46:	f7ff fd07 	bl	8004458 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8004a4a:	f7ff ff41 	bl	80048d0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004a4e:	b958      	cbnz	r0, 8004a68 <vTaskDelayUntil+0x88>
			portYIELD_WITHIN_API();
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <vTaskDelayUntil+0x98>)
 8004a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
	}
 8004a60:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004a62:	4299      	cmp	r1, r3
 8004a64:	d8ec      	bhi.n	8004a40 <vTaskDelayUntil+0x60>
 8004a66:	e7e9      	b.n	8004a3c <vTaskDelayUntil+0x5c>
 8004a68:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	e7ed      	b.n	8004a4a <vTaskDelayUntil+0x6a>
 8004a6e:	bf00      	nop
 8004a70:	20003db8 	.word	0x20003db8
 8004a74:	20003e38 	.word	0x20003e38
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <vTaskDelay>:
	{
 8004a7c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a7e:	b158      	cbz	r0, 8004a98 <vTaskDelay+0x1c>
			configASSERT( uxSchedulerSuspended == 0 );
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <vTaskDelay+0x44>)
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	b189      	cbz	r1, 8004aaa <vTaskDelay+0x2e>
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	e7fe      	b.n	8004a96 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <vTaskDelay+0x48>)
 8004a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	bd08      	pop	{r3, pc}
	++uxSchedulerSuspended;
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	3201      	adds	r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ab0:	f7ff fcd2 	bl	8004458 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004ab4:	f7ff ff0c 	bl	80048d0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d0ed      	beq.n	8004a98 <vTaskDelay+0x1c>
 8004abc:	bd08      	pop	{r3, pc}
 8004abe:	bf00      	nop
 8004ac0:	20003db8 	.word	0x20003db8
 8004ac4:	e000ed04 	.word	0xe000ed04

08004ac8 <prvIdleTask>:
{
 8004ac8:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8004acc:	4c1c      	ldr	r4, [pc, #112]	; (8004b40 <prvIdleTask+0x78>)
 8004ace:	4e1d      	ldr	r6, [pc, #116]	; (8004b44 <prvIdleTask+0x7c>)
 8004ad0:	4d1d      	ldr	r5, [pc, #116]	; (8004b48 <prvIdleTask+0x80>)
 8004ad2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8004b50 <prvIdleTask+0x88>
				taskYIELD();
 8004ad6:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8004b54 <prvIdleTask+0x8c>
 8004ada:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 8004ade:	e006      	b.n	8004aee <prvIdleTask+0x26>
	++uxSchedulerSuspended;
 8004ae0:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004ae2:	6837      	ldr	r7, [r6, #0]
	++uxSchedulerSuspended;
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
 8004ae8:	f7ff fef2 	bl	80048d0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8004aec:	b96f      	cbnz	r7, 8004b0a <prvIdleTask+0x42>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aee:	682b      	ldr	r3, [r5, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1f5      	bne.n	8004ae0 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004af4:	f8d8 3000 	ldr.w	r3, [r8]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d9f8      	bls.n	8004aee <prvIdleTask+0x26>
				taskYIELD();
 8004afc:	f8ca 9000 	str.w	r9, [sl]
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	e7f1      	b.n	8004aee <prvIdleTask+0x26>
				taskENTER_CRITICAL();
 8004b0a:	f7ff f833 	bl	8003b74 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b0e:	68f3      	ldr	r3, [r6, #12]
 8004b10:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b14:	f10b 0004 	add.w	r0, fp, #4
 8004b18:	f7fe ffba 	bl	8003a90 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <prvIdleTask+0x84>)
 8004b1e:	4a0b      	ldr	r2, [pc, #44]	; (8004b4c <prvIdleTask+0x84>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004b26:	682b      	ldr	r3, [r5, #0]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 8004b2c:	f7ff f844 	bl	8003bb8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8004b30:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 8004b34:	f7fe ff3a 	bl	80039ac <vPortFree>
			vPortFree( pxTCB );
 8004b38:	4658      	mov	r0, fp
 8004b3a:	f7fe ff37 	bl	80039ac <vPortFree>
 8004b3e:	e7d6      	b.n	8004aee <prvIdleTask+0x26>
 8004b40:	20003db8 	.word	0x20003db8
 8004b44:	20003e24 	.word	0x20003e24
 8004b48:	20003db0 	.word	0x20003db0
 8004b4c:	20003dac 	.word	0x20003dac
 8004b50:	20003d20 	.word	0x20003d20
 8004b54:	e000ed04 	.word	0xe000ed04

08004b58 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b58:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <vTaskSwitchContext+0x5c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	bb33      	cbnz	r3, 8004bac <vTaskSwitchContext+0x54>
		xYieldPending = pdFALSE;
 8004b5e:	4916      	ldr	r1, [pc, #88]	; (8004bb8 <vTaskSwitchContext+0x60>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b60:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <vTaskSwitchContext+0x64>)
		xYieldPending = pdFALSE;
 8004b62:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b64:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004b66:	fab3 f383 	clz	r3, r3
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f1c3 031f 	rsb	r3, r3, #31
 8004b70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4912      	ldr	r1, [pc, #72]	; (8004bc0 <vTaskSwitchContext+0x68>)
 8004b78:	58ca      	ldr	r2, [r1, r3]
 8004b7a:	18c8      	adds	r0, r1, r3
 8004b7c:	b942      	cbnz	r2, 8004b90 <vTaskSwitchContext+0x38>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	e7fe      	b.n	8004b8e <vTaskSwitchContext+0x36>
 8004b90:	6842      	ldr	r2, [r0, #4]
 8004b92:	3308      	adds	r3, #8
 8004b94:	6852      	ldr	r2, [r2, #4]
 8004b96:	6042      	str	r2, [r0, #4]
 8004b98:	440b      	add	r3, r1
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	bf08      	it	eq
 8004b9e:	6852      	ldreq	r2, [r2, #4]
 8004ba0:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <vTaskSwitchContext+0x6c>)
 8004ba2:	bf08      	it	eq
 8004ba4:	6042      	streq	r2, [r0, #4]
 8004ba6:	68d2      	ldr	r2, [r2, #12]
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	4770      	bx	lr
		xYieldPending = pdTRUE;
 8004bac:	4b02      	ldr	r3, [pc, #8]	; (8004bb8 <vTaskSwitchContext+0x60>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	4770      	bx	lr
 8004bb4:	20003db8 	.word	0x20003db8
 8004bb8:	20003e3c 	.word	0x20003e3c
 8004bbc:	20003dc0 	.word	0x20003dc0
 8004bc0:	20003d20 	.word	0x20003d20
 8004bc4:	20003d14 	.word	0x20003d14

08004bc8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8004bc8:	b160      	cbz	r0, 8004be4 <vTaskPlaceOnEventList+0x1c>
{
 8004bca:	b510      	push	{r4, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <vTaskPlaceOnEventList+0x30>)
 8004bce:	460c      	mov	r4, r1
 8004bd0:	6819      	ldr	r1, [r3, #0]
 8004bd2:	3118      	adds	r1, #24
 8004bd4:	f7fe ff42 	bl	8003a5c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bd8:	4620      	mov	r0, r4
 8004bda:	2101      	movs	r1, #1
}
 8004bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004be0:	f7ff bc3a 	b.w	8004458 <prvAddCurrentTaskToDelayedList>
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	e7fe      	b.n	8004bf4 <vTaskPlaceOnEventList+0x2c>
 8004bf6:	bf00      	nop
 8004bf8:	20003d14 	.word	0x20003d14

08004bfc <vTaskPlaceOnEventListRestricted>:
	{
 8004bfc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8004bfe:	b188      	cbz	r0, 8004c24 <vTaskPlaceOnEventListRestricted+0x28>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c00:	4b0d      	ldr	r3, [pc, #52]	; (8004c38 <vTaskPlaceOnEventListRestricted+0x3c>)
 8004c02:	460d      	mov	r5, r1
 8004c04:	6819      	ldr	r1, [r3, #0]
 8004c06:	4614      	mov	r4, r2
 8004c08:	3118      	adds	r1, #24
 8004c0a:	f7fe ff17 	bl	8003a3c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8004c0e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c10:	bf08      	it	eq
 8004c12:	4628      	moveq	r0, r5
 8004c14:	4621      	mov	r1, r4
 8004c16:	bf18      	it	ne
 8004c18:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8004c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c20:	f7ff bc1a 	b.w	8004458 <prvAddCurrentTaskToDelayedList>
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	e7fe      	b.n	8004c34 <vTaskPlaceOnEventListRestricted+0x38>
 8004c36:	bf00      	nop
 8004c38:	20003d14 	.word	0x20003d14

08004c3c <xTaskRemoveFromEventList>:
{
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c3e:	68c3      	ldr	r3, [r0, #12]
 8004c40:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004c42:	b32c      	cbz	r4, 8004c90 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c44:	f104 0518 	add.w	r5, r4, #24
 8004c48:	4628      	mov	r0, r5
 8004c4a:	f7fe ff21 	bl	8003a90 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c4e:	4b17      	ldr	r3, [pc, #92]	; (8004cac <xTaskRemoveFromEventList+0x70>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	bb33      	cbnz	r3, 8004ca2 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c54:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c56:	4d16      	ldr	r5, [pc, #88]	; (8004cb0 <xTaskRemoveFromEventList+0x74>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f7fe ff19 	bl	8003a90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c60:	682f      	ldr	r7, [r5, #0]
 8004c62:	4814      	ldr	r0, [pc, #80]	; (8004cb4 <xTaskRemoveFromEventList+0x78>)
 8004c64:	2301      	movs	r3, #1
 8004c66:	4093      	lsls	r3, r2
 8004c68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004c6c:	433b      	orrs	r3, r7
 8004c6e:	4631      	mov	r1, r6
 8004c70:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8004c74:	602b      	str	r3, [r5, #0]
 8004c76:	f7fe fee1 	bl	8003a3c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c7a:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <xTaskRemoveFromEventList+0x7c>)
 8004c7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004c84:	bf83      	ittte	hi
 8004c86:	4b0d      	ldrhi	r3, [pc, #52]	; (8004cbc <xTaskRemoveFromEventList+0x80>)
 8004c88:	2001      	movhi	r0, #1
 8004c8a:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8004c8c:	2000      	movls	r0, #0
}
 8004c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	e7fe      	b.n	8004ca0 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	4806      	ldr	r0, [pc, #24]	; (8004cc0 <xTaskRemoveFromEventList+0x84>)
 8004ca6:	f7fe fec9 	bl	8003a3c <vListInsertEnd>
 8004caa:	e7e6      	b.n	8004c7a <xTaskRemoveFromEventList+0x3e>
 8004cac:	20003db8 	.word	0x20003db8
 8004cb0:	20003dc0 	.word	0x20003dc0
 8004cb4:	20003d20 	.word	0x20003d20
 8004cb8:	20003d14 	.word	0x20003d14
 8004cbc:	20003e3c 	.word	0x20003e3c
 8004cc0:	20003df8 	.word	0x20003df8

08004cc4 <vTaskSetTimeOutState>:
{
 8004cc4:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8004cc6:	b130      	cbz	r0, 8004cd6 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cc8:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <vTaskSetTimeOutState+0x18>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cca:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <vTaskSetTimeOutState+0x1c>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ccc:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	e880 000c 	stmia.w	r0, {r2, r3}
 8004cd4:	bd08      	pop	{r3, pc}
 8004cd6:	f7ff fc05 	bl	80044e4 <prvTaskIsTaskSuspended.part.0>
 8004cda:	bf00      	nop
 8004cdc:	20003df4 	.word	0x20003df4
 8004ce0:	20003e38 	.word	0x20003e38

08004ce4 <xTaskCheckForTimeOut>:
{
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8004ce6:	b370      	cbz	r0, 8004d46 <xTaskCheckForTimeOut+0x62>
	configASSERT( pxTicksToWait );
 8004ce8:	b321      	cbz	r1, 8004d34 <xTaskCheckForTimeOut+0x50>
 8004cea:	460d      	mov	r5, r1
 8004cec:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004cee:	f7fe ff41 	bl	8003b74 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8004cf2:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8004cf4:	481b      	ldr	r0, [pc, #108]	; (8004d64 <xTaskCheckForTimeOut+0x80>)
			if( *pxTicksToWait == portMAX_DELAY )
 8004cf6:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8004cf8:	6801      	ldr	r1, [r0, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8004cfa:	d02d      	beq.n	8004d58 <xTaskCheckForTimeOut+0x74>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cfc:	4e1a      	ldr	r6, [pc, #104]	; (8004d68 <xTaskCheckForTimeOut+0x84>)
 8004cfe:	6827      	ldr	r7, [r4, #0]
 8004d00:	6832      	ldr	r2, [r6, #0]
 8004d02:	4297      	cmp	r7, r2
 8004d04:	6862      	ldr	r2, [r4, #4]
 8004d06:	d006      	beq.n	8004d16 <xTaskCheckForTimeOut+0x32>
 8004d08:	4291      	cmp	r1, r2
 8004d0a:	d304      	bcc.n	8004d16 <xTaskCheckForTimeOut+0x32>
			xReturn = pdTRUE;
 8004d0c:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 8004d0e:	f7fe ff53 	bl	8003bb8 <vPortExitCritical>
}
 8004d12:	4628      	mov	r0, r5
 8004d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d16:	1a8f      	subs	r7, r1, r2
 8004d18:	42bb      	cmp	r3, r7
 8004d1a:	d9f7      	bls.n	8004d0c <xTaskCheckForTimeOut+0x28>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8004d1c:	1a5b      	subs	r3, r3, r1
 8004d1e:	4413      	add	r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d20:	6831      	ldr	r1, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d22:	6802      	ldr	r2, [r0, #0]
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8004d24:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 8004d26:	2500      	movs	r5, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d28:	e884 0006 	stmia.w	r4, {r1, r2}
	taskEXIT_CRITICAL();
 8004d2c:	f7fe ff44 	bl	8003bb8 <vPortExitCritical>
}
 8004d30:	4628      	mov	r0, r5
 8004d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	e7fe      	b.n	8004d44 <xTaskCheckForTimeOut+0x60>
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	e7fe      	b.n	8004d56 <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 8004d58:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 8004d5a:	f7fe ff2d 	bl	8003bb8 <vPortExitCritical>
}
 8004d5e:	4628      	mov	r0, r5
 8004d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20003e38 	.word	0x20003e38
 8004d68:	20003df4 	.word	0x20003df4

08004d6c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004d6c:	4b01      	ldr	r3, [pc, #4]	; (8004d74 <vTaskMissedYield+0x8>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	4770      	bx	lr
 8004d74:	20003e3c 	.word	0x20003e3c

08004d78 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 8004d78:	b160      	cbz	r0, 8004d94 <uxTaskGetStackHighWaterMark+0x1c>
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004d7a:	6b01      	ldr	r1, [r0, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004d7c:	780b      	ldrb	r3, [r1, #0]
 8004d7e:	2ba5      	cmp	r3, #165	; 0xa5
 8004d80:	d10b      	bne.n	8004d9a <uxTaskGetStackHighWaterMark+0x22>
 8004d82:	1c4b      	adds	r3, r1, #1
 8004d84:	1a58      	subs	r0, r3, r1
 8004d86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d8a:	2aa5      	cmp	r2, #165	; 0xa5
 8004d8c:	d0fa      	beq.n	8004d84 <uxTaskGetStackHighWaterMark+0xc>
 8004d8e:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8004d92:	4770      	bx	lr
		pxTCB = prvGetTCBFromHandle( xTask );
 8004d94:	4b02      	ldr	r3, [pc, #8]	; (8004da0 <uxTaskGetStackHighWaterMark+0x28>)
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	e7ef      	b.n	8004d7a <uxTaskGetStackHighWaterMark+0x2>
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004d9a:	2000      	movs	r0, #0
	}
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20003d14 	.word	0x20003d14

08004da4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <xTaskGetSchedulerState+0x18>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	b133      	cbz	r3, 8004db8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004daa:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <xTaskGetSchedulerState+0x1c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004db0:	bf0c      	ite	eq
 8004db2:	2002      	moveq	r0, #2
 8004db4:	2000      	movne	r0, #0
 8004db6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004db8:	2001      	movs	r0, #1
	}
 8004dba:	4770      	bx	lr
 8004dbc:	20003e0c 	.word	0x20003e0c
 8004dc0:	20003db8 	.word	0x20003db8

08004dc4 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d041      	beq.n	8004e4c <vTaskPriorityInherit+0x88>
	{
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004dca:	4c21      	ldr	r4, [pc, #132]	; (8004e50 <vTaskPriorityInherit+0x8c>)
 8004dcc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004dce:	6822      	ldr	r2, [r4, #0]
 8004dd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d212      	bcs.n	8004dfc <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004dd6:	6982      	ldr	r2, [r0, #24]
 8004dd8:	2a00      	cmp	r2, #0
 8004dda:	db04      	blt.n	8004de6 <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ddc:	6822      	ldr	r2, [r4, #0]
 8004dde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004de0:	f1c2 0207 	rsb	r2, r2, #7
 8004de4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004de6:	4d1b      	ldr	r5, [pc, #108]	; (8004e54 <vTaskPriorityInherit+0x90>)
 8004de8:	6942      	ldr	r2, [r0, #20]
 8004dea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004dee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d003      	beq.n	8004dfe <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	62c3      	str	r3, [r0, #44]	; 0x2c
 8004dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dfe:	1d07      	adds	r7, r0, #4
 8004e00:	4606      	mov	r6, r0
 8004e02:	4638      	mov	r0, r7
 8004e04:	f7fe fe44 	bl	8003a90 <uxListRemove>
 8004e08:	b9f0      	cbnz	r0, 8004e48 <vTaskPriorityInherit+0x84>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e0a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004e0c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004e10:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8004e14:	b9c2      	cbnz	r2, 8004e48 <vTaskPriorityInherit+0x84>
 8004e16:	4a10      	ldr	r2, [pc, #64]	; (8004e58 <vTaskPriorityInherit+0x94>)
 8004e18:	2001      	movs	r0, #1
 8004e1a:	6811      	ldr	r1, [r2, #0]
 8004e1c:	fa00 f303 	lsl.w	r3, r0, r3
 8004e20:	ea21 0303 	bic.w	r3, r1, r3
 8004e24:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e26:	6823      	ldr	r3, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
 8004e28:	6814      	ldr	r4, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e2a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004e2c:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004e2e:	2301      	movs	r3, #1
 8004e30:	4083      	lsls	r3, r0
 8004e32:	4323      	orrs	r3, r4
 8004e34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004e38:	4639      	mov	r1, r7
 8004e3a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8004e3e:	6013      	str	r3, [r2, #0]
	}
 8004e40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
					prvAddTaskToReadyList( pxTCB );
 8004e44:	f7fe bdfa 	b.w	8003a3c <vListInsertEnd>
 8004e48:	4a03      	ldr	r2, [pc, #12]	; (8004e58 <vTaskPriorityInherit+0x94>)
 8004e4a:	e7ec      	b.n	8004e26 <vTaskPriorityInherit+0x62>
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20003d14 	.word	0x20003d14
 8004e54:	20003d20 	.word	0x20003d20
 8004e58:	20003dc0 	.word	0x20003dc0

08004e5c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8004e5c:	b308      	cbz	r0, 8004ea2 <xTaskPriorityDisinherit+0x46>
	{
 8004e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8004e60:	4b28      	ldr	r3, [pc, #160]	; (8004f04 <xTaskPriorityDisinherit+0xa8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4298      	cmp	r0, r3
 8004e66:	d008      	beq.n	8004e7a <xTaskPriorityDisinherit+0x1e>
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	e7fe      	b.n	8004e78 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e7a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004e7c:	b943      	cbnz	r3, 8004e90 <xTaskPriorityDisinherit+0x34>
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	e7fe      	b.n	8004e8e <xTaskPriorityDisinherit+0x32>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e90:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004e92:	6d42      	ldr	r2, [r0, #84]	; 0x54
			( pxTCB->uxMutexesHeld )--;
 8004e94:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e96:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8004e98:	6583      	str	r3, [r0, #88]	; 0x58
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e9a:	d000      	beq.n	8004e9e <xTaskPriorityDisinherit+0x42>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e9c:	b11b      	cbz	r3, 8004ea6 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ea2:	2000      	movs	r0, #0
	}
 8004ea4:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ea6:	1d07      	adds	r7, r0, #4
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	4638      	mov	r0, r7
 8004eac:	f7fe fdf0 	bl	8003a90 <uxListRemove>
 8004eb0:	b1c0      	cbz	r0, 8004ee4 <xTaskPriorityDisinherit+0x88>
 8004eb2:	4815      	ldr	r0, [pc, #84]	; (8004f08 <xTaskPriorityDisinherit+0xac>)
 8004eb4:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <xTaskPriorityDisinherit+0xb0>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004eb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
					prvAddTaskToReadyList( pxTCB );
 8004eb8:	f8d2 c000 	ldr.w	ip, [r2]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ebc:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004ebe:	2501      	movs	r5, #1
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ec0:	f1c3 0e07 	rsb	lr, r3, #7
					prvAddTaskToReadyList( pxTCB );
 8004ec4:	fa05 f603 	lsl.w	r6, r5, r3
 8004ec8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ecc:	ea46 060c 	orr.w	r6, r6, ip
 8004ed0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004ed4:	4639      	mov	r1, r7
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed6:	f8c4 e018 	str.w	lr, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004eda:	6016      	str	r6, [r2, #0]
 8004edc:	f7fe fdae 	bl	8003a3c <vListInsertEnd>
					xReturn = pdTRUE;
 8004ee0:	4628      	mov	r0, r5
	}
 8004ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ee4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004ee6:	4808      	ldr	r0, [pc, #32]	; (8004f08 <xTaskPriorityDisinherit+0xac>)
 8004ee8:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <xTaskPriorityDisinherit+0xb0>)
 8004eea:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004eee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1df      	bne.n	8004eb6 <xTaskPriorityDisinherit+0x5a>
 8004ef6:	6813      	ldr	r3, [r2, #0]
 8004ef8:	2501      	movs	r5, #1
 8004efa:	408d      	lsls	r5, r1
 8004efc:	ea23 0305 	bic.w	r3, r3, r5
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e7d8      	b.n	8004eb6 <xTaskPriorityDisinherit+0x5a>
 8004f04:	20003d14 	.word	0x20003d14
 8004f08:	20003d20 	.word	0x20003d20
 8004f0c:	20003dc0 	.word	0x20003dc0

08004f10 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <pvTaskIncrementMutexHeldCount+0x14>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	b11a      	cbz	r2, 8004f1e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004f16:	6819      	ldr	r1, [r3, #0]
 8004f18:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8004f1a:	3201      	adds	r2, #1
 8004f1c:	658a      	str	r2, [r1, #88]	; 0x58
		return pxCurrentTCB;
 8004f1e:	6818      	ldr	r0, [r3, #0]
	}
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20003d14 	.word	0x20003d14

08004f28 <ulTaskNotifyTake>:
	{
 8004f28:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004f2a:	4c17      	ldr	r4, [pc, #92]	; (8004f88 <ulTaskNotifyTake+0x60>)
	{
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8004f30:	f7fe fe20 	bl	8003b74 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f38:	b923      	cbnz	r3, 8004f44 <ulTaskNotifyTake+0x1c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8004f42:	b9ad      	cbnz	r5, 8004f70 <ulTaskNotifyTake+0x48>
		taskEXIT_CRITICAL();
 8004f44:	f7fe fe38 	bl	8003bb8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8004f48:	f7fe fe14 	bl	8003b74 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
			if( ulReturn != 0UL )
 8004f50:	b11d      	cbz	r5, 8004f5a <ulTaskNotifyTake+0x32>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004f52:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8004f54:	b94e      	cbnz	r6, 8004f6a <ulTaskNotifyTake+0x42>
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 8004f56:	1e6a      	subs	r2, r5, #1
 8004f58:	65da      	str	r2, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 8004f62:	f7fe fe29 	bl	8003bb8 <vPortExitCritical>
	}
 8004f66:	4628      	mov	r0, r5
 8004f68:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f6e:	e7f4      	b.n	8004f5a <ulTaskNotifyTake+0x32>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f70:	4628      	mov	r0, r5
 8004f72:	f7ff fa71 	bl	8004458 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8004f76:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <ulTaskNotifyTake+0x64>)
 8004f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	e7dd      	b.n	8004f44 <ulTaskNotifyTake+0x1c>
 8004f88:	20003d14 	.word	0x20003d14
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <xTaskGenericNotify>:
	{
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8004f92:	b1e8      	cbz	r0, 8004fd0 <xTaskGenericNotify+0x40>
 8004f94:	461d      	mov	r5, r3
 8004f96:	4604      	mov	r4, r0
 8004f98:	4616      	mov	r6, r2
 8004f9a:	460f      	mov	r7, r1
		taskENTER_CRITICAL();
 8004f9c:	f7fe fdea 	bl	8003b74 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8004fa0:	b10d      	cbz	r5, 8004fa6 <xTaskGenericNotify+0x16>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004fa2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004fa4:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004fa6:	f894 5060 	ldrb.w	r5, [r4, #96]	; 0x60
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004faa:	2202      	movs	r2, #2
			switch( eAction )
 8004fac:	1e73      	subs	r3, r6, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004fae:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004fb0:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			switch( eAction )
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d804      	bhi.n	8004fc2 <xTaskGenericNotify+0x32>
 8004fb8:	e8df f003 	tbb	[pc, r3]
 8004fbc:	3b023337 	.word	0x3b023337
						pxTCB->ulNotifiedValue = ulValue;
 8004fc0:	65e7      	str	r7, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004fc2:	2d01      	cmp	r5, #1
 8004fc4:	d00d      	beq.n	8004fe2 <xTaskGenericNotify+0x52>
	{
 8004fc6:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8004fc8:	f7fe fdf6 	bl	8003bb8 <vPortExitCritical>
	}
 8004fcc:	4628      	mov	r0, r5
 8004fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	e7fe      	b.n	8004fe0 <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fe2:	1d27      	adds	r7, r4, #4
				prvAddTaskToReadyList( pxTCB );
 8004fe4:	4e1f      	ldr	r6, [pc, #124]	; (8005064 <xTaskGenericNotify+0xd4>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	f7fe fd52 	bl	8003a90 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004fec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fee:	f8d6 e000 	ldr.w	lr, [r6]
 8004ff2:	481d      	ldr	r0, [pc, #116]	; (8005068 <xTaskGenericNotify+0xd8>)
 8004ff4:	fa05 f203 	lsl.w	r2, r5, r3
 8004ff8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ffc:	ea42 020e 	orr.w	r2, r2, lr
 8005000:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005004:	4639      	mov	r1, r7
 8005006:	6032      	str	r2, [r6, #0]
 8005008:	f7fe fd18 	bl	8003a3c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800500c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800500e:	b1bb      	cbz	r3, 8005040 <xTaskGenericNotify+0xb0>
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	e7fe      	b.n	8005020 <xTaskGenericNotify+0x90>
					( pxTCB->ulNotifiedValue )++;
 8005022:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005024:	3301      	adds	r3, #1
 8005026:	65e3      	str	r3, [r4, #92]	; 0x5c
					break;
 8005028:	e7cb      	b.n	8004fc2 <xTaskGenericNotify+0x32>
					pxTCB->ulNotifiedValue |= ulValue;
 800502a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800502c:	431f      	orrs	r7, r3
 800502e:	65e7      	str	r7, [r4, #92]	; 0x5c
					break;
 8005030:	e7c7      	b.n	8004fc2 <xTaskGenericNotify+0x32>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005032:	2d02      	cmp	r5, #2
 8005034:	d1c4      	bne.n	8004fc0 <xTaskGenericNotify+0x30>
						xReturn = pdFAIL;
 8005036:	2500      	movs	r5, #0
		taskEXIT_CRITICAL();
 8005038:	f7fe fdbe 	bl	8003bb8 <vPortExitCritical>
	}
 800503c:	4628      	mov	r0, r5
 800503e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005040:	4b0a      	ldr	r3, [pc, #40]	; (800506c <xTaskGenericNotify+0xdc>)
 8005042:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	429a      	cmp	r2, r3
 800504a:	d9bc      	bls.n	8004fc6 <xTaskGenericNotify+0x36>
					taskYIELD_IF_USING_PREEMPTION();
 800504c:	4b08      	ldr	r3, [pc, #32]	; (8005070 <xTaskGenericNotify+0xe0>)
 800504e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 800505c:	f7fe fdac 	bl	8003bb8 <vPortExitCritical>
	}
 8005060:	4628      	mov	r0, r5
 8005062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005064:	20003dc0 	.word	0x20003dc0
 8005068:	20003d20 	.word	0x20003d20
 800506c:	20003d14 	.word	0x20003d14
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8005076:	4c10      	ldr	r4, [pc, #64]	; (80050b8 <prvCheckForValidListAndQueue+0x44>)
	taskENTER_CRITICAL();
 8005078:	f7fe fd7c 	bl	8003b74 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800507c:	6825      	ldr	r5, [r4, #0]
 800507e:	b11d      	cbz	r5, 8005088 <prvCheckForValidListAndQueue+0x14>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8005080:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8005084:	f7fe bd98 	b.w	8003bb8 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8005088:	4f0c      	ldr	r7, [pc, #48]	; (80050bc <prvCheckForValidListAndQueue+0x48>)
			vListInitialise( &xActiveTimerList2 );
 800508a:	4e0d      	ldr	r6, [pc, #52]	; (80050c0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList1 );
 800508c:	4638      	mov	r0, r7
 800508e:	f7fe fcc5 	bl	8003a1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005092:	4630      	mov	r0, r6
 8005094:	f7fe fcc2 	bl	8003a1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005098:	4a0a      	ldr	r2, [pc, #40]	; (80050c4 <prvCheckForValidListAndQueue+0x50>)
			pxOverflowTimerList = &xActiveTimerList2;
 800509a:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <prvCheckForValidListAndQueue+0x54>)
			pxCurrentTimerList = &xActiveTimerList1;
 800509c:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800509e:	210c      	movs	r1, #12
 80050a0:	462a      	mov	r2, r5
 80050a2:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80050a4:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80050a6:	f7fe ff79 	bl	8003f9c <xQueueGenericCreate>
 80050aa:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d0e7      	beq.n	8005080 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050b0:	4906      	ldr	r1, [pc, #24]	; (80050cc <prvCheckForValidListAndQueue+0x58>)
 80050b2:	f7ff f98d 	bl	80043d0 <vQueueAddToRegistry>
 80050b6:	e7e3      	b.n	8005080 <prvCheckForValidListAndQueue+0xc>
 80050b8:	20003e74 	.word	0x20003e74
 80050bc:	20003e48 	.word	0x20003e48
 80050c0:	20003e5c 	.word	0x20003e5c
 80050c4:	20003e40 	.word	0x20003e40
 80050c8:	20003e44 	.word	0x20003e44
 80050cc:	08006f3c 	.word	0x08006f3c

080050d0 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80050d0:	4291      	cmp	r1, r2
{
 80050d2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050d4:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050d6:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
 80050d8:	d805      	bhi.n	80050e6 <prvInsertTimerInActiveList+0x16>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050da:	6981      	ldr	r1, [r0, #24]
 80050dc:	1ad2      	subs	r2, r2, r3
 80050de:	428a      	cmp	r2, r1
 80050e0:	d30c      	bcc.n	80050fc <prvInsertTimerInActiveList+0x2c>
			xProcessTimerNow = pdTRUE;
 80050e2:	2001      	movs	r0, #1
}
 80050e4:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d201      	bcs.n	80050ee <prvInsertTimerInActiveList+0x1e>
 80050ea:	4299      	cmp	r1, r3
 80050ec:	d2f9      	bcs.n	80050e2 <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050ee:	4b07      	ldr	r3, [pc, #28]	; (800510c <prvInsertTimerInActiveList+0x3c>)
 80050f0:	1d01      	adds	r1, r0, #4
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	f7fe fcb2 	bl	8003a5c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80050f8:	2000      	movs	r0, #0
 80050fa:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050fc:	4b04      	ldr	r3, [pc, #16]	; (8005110 <prvInsertTimerInActiveList+0x40>)
 80050fe:	1d01      	adds	r1, r0, #4
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	f7fe fcab 	bl	8003a5c <vListInsert>
 8005106:	2000      	movs	r0, #0
 8005108:	bd08      	pop	{r3, pc}
 800510a:	bf00      	nop
 800510c:	20003e40 	.word	0x20003e40
 8005110:	20003e44 	.word	0x20003e44

08005114 <xTimerCreateTimerTask>:
{
 8005114:	b500      	push	{lr}
 8005116:	b083      	sub	sp, #12
	prvCheckForValidListAndQueue();
 8005118:	f7ff ffac 	bl	8005074 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800511c:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <xTimerCreateTimerTask+0x40>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	b173      	cbz	r3, 8005140 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
 8005122:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <xTimerCreateTimerTask+0x44>)
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	2301      	movs	r3, #1
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800512e:	2300      	movs	r3, #0
 8005130:	490a      	ldr	r1, [pc, #40]	; (800515c <xTimerCreateTimerTask+0x48>)
 8005132:	480b      	ldr	r0, [pc, #44]	; (8005160 <xTimerCreateTimerTask+0x4c>)
 8005134:	f7ff f9e0 	bl	80044f8 <xTaskCreate>
	configASSERT( xReturn );
 8005138:	b110      	cbz	r0, 8005140 <xTimerCreateTimerTask+0x2c>
}
 800513a:	b003      	add	sp, #12
 800513c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	e7fe      	b.n	8005150 <xTimerCreateTimerTask+0x3c>
 8005152:	bf00      	nop
 8005154:	20003e74 	.word	0x20003e74
 8005158:	20003e78 	.word	0x20003e78
 800515c:	08006f44 	.word	0x08006f44
 8005160:	080052a5 	.word	0x080052a5

08005164 <xTimerCreate>:
	{
 8005164:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8005168:	4681      	mov	r9, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800516a:	2028      	movs	r0, #40	; 0x28
	{
 800516c:	460d      	mov	r5, r1
 800516e:	4616      	mov	r6, r2
 8005170:	461f      	mov	r7, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8005172:	f7fe fb83 	bl	800387c <pvPortMalloc>
		if( pxNewTimer != NULL )
 8005176:	4604      	mov	r4, r0
 8005178:	b1a8      	cbz	r0, 80051a6 <xTimerCreate+0x42>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800517a:	b945      	cbnz	r5, 800518e <xTimerCreate+0x2a>
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	e7fe      	b.n	800518c <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 800518e:	f7ff ff71 	bl	8005074 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005192:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8005194:	f8c4 9000 	str.w	r9, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005198:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800519a:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800519c:	6227      	str	r7, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800519e:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80051a0:	1d20      	adds	r0, r4, #4
 80051a2:	f7fe fc47 	bl	8003a34 <vListInitialiseItem>
	}
 80051a6:	4620      	mov	r0, r4
 80051a8:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}

080051ac <xTimerGenericCommand>:
	configASSERT( xTimer );
 80051ac:	b330      	cbz	r0, 80051fc <xTimerGenericCommand+0x50>
{
 80051ae:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 80051b0:	4d17      	ldr	r5, [pc, #92]	; (8005210 <xTimerGenericCommand+0x64>)
 80051b2:	4604      	mov	r4, r0
 80051b4:	6828      	ldr	r0, [r5, #0]
{
 80051b6:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 80051b8:	b180      	cbz	r0, 80051dc <xTimerGenericCommand+0x30>
 80051ba:	4616      	mov	r6, r2
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051bc:	2905      	cmp	r1, #5
 80051be:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 80051c0:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051c2:	9602      	str	r6, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80051c4:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051c6:	dc0b      	bgt.n	80051e0 <xTimerGenericCommand+0x34>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051c8:	f7ff fdec 	bl	8004da4 <xTaskGetSchedulerState>
 80051cc:	2802      	cmp	r0, #2
 80051ce:	d00d      	beq.n	80051ec <xTimerGenericCommand+0x40>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051d0:	2300      	movs	r3, #0
 80051d2:	6828      	ldr	r0, [r5, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	a901      	add	r1, sp, #4
 80051d8:	f7fe ff02 	bl	8003fe0 <xQueueGenericSend>
}
 80051dc:	b004      	add	sp, #16
 80051de:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051e0:	2300      	movs	r3, #0
 80051e2:	a901      	add	r1, sp, #4
 80051e4:	f7fe ffbc 	bl	8004160 <xQueueGenericSendFromISR>
}
 80051e8:	b004      	add	sp, #16
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051ec:	6828      	ldr	r0, [r5, #0]
 80051ee:	9a08      	ldr	r2, [sp, #32]
 80051f0:	2300      	movs	r3, #0
 80051f2:	a901      	add	r1, sp, #4
 80051f4:	f7fe fef4 	bl	8003fe0 <xQueueGenericSend>
}
 80051f8:	b004      	add	sp, #16
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	e7fe      	b.n	800520c <xTimerGenericCommand+0x60>
 800520e:	bf00      	nop
 8005210:	20003e74 	.word	0x20003e74

08005214 <prvSwitchTimerLists>:
{
 8005214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005218:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80052a0 <prvSwitchTimerLists+0x8c>
 800521c:	b083      	sub	sp, #12
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800521e:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005222:	e00c      	b.n	800523e <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005224:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005226:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005228:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800522a:	1d25      	adds	r5, r4, #4
 800522c:	4628      	mov	r0, r5
 800522e:	f7fe fc2f 	bl	8003a90 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005234:	4620      	mov	r0, r4
 8005236:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005238:	69e3      	ldr	r3, [r4, #28]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d00c      	beq.n	8005258 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800523e:	f8d9 3000 	ldr.w	r3, [r9]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	2a00      	cmp	r2, #0
 8005246:	d1ed      	bne.n	8005224 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 8005248:	4a14      	ldr	r2, [pc, #80]	; (800529c <prvSwitchTimerLists+0x88>)
 800524a:	6811      	ldr	r1, [r2, #0]
 800524c:	f8c9 1000 	str.w	r1, [r9]
	pxOverflowTimerList = pxTemp;
 8005250:	6013      	str	r3, [r2, #0]
}
 8005252:	b003      	add	sp, #12
 8005254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005258:	69a6      	ldr	r6, [r4, #24]
 800525a:	eb07 0e06 	add.w	lr, r7, r6
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800525e:	2300      	movs	r3, #0
			if( xReloadTime > xNextExpireTime )
 8005260:	4577      	cmp	r7, lr
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005262:	463a      	mov	r2, r7
 8005264:	4619      	mov	r1, r3
 8005266:	4620      	mov	r0, r4
			if( xReloadTime > xNextExpireTime )
 8005268:	d208      	bcs.n	800527c <prvSwitchTimerLists+0x68>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800526a:	f8c4 e004 	str.w	lr, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800526e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005270:	f8d9 0000 	ldr.w	r0, [r9]
 8005274:	4629      	mov	r1, r5
 8005276:	f7fe fbf1 	bl	8003a5c <vListInsert>
 800527a:	e7e0      	b.n	800523e <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800527c:	f8cd 8000 	str.w	r8, [sp]
 8005280:	f7ff ff94 	bl	80051ac <xTimerGenericCommand>
				configASSERT( xResult );
 8005284:	2800      	cmp	r0, #0
 8005286:	d1da      	bne.n	800523e <prvSwitchTimerLists+0x2a>
 8005288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	e7fe      	b.n	8005298 <prvSwitchTimerLists+0x84>
 800529a:	bf00      	nop
 800529c:	20003e44 	.word	0x20003e44
 80052a0:	20003e40 	.word	0x20003e40

080052a4 <prvTimerTask>:
{
 80052a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a8:	4f6b      	ldr	r7, [pc, #428]	; (8005458 <prvTimerTask+0x1b4>)
 80052aa:	4d6c      	ldr	r5, [pc, #432]	; (800545c <prvTimerTask+0x1b8>)
 80052ac:	4c6c      	ldr	r4, [pc, #432]	; (8005460 <prvTimerTask+0x1bc>)
 80052ae:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8005468 <prvTimerTask+0x1c4>
 80052b2:	b087      	sub	sp, #28
 80052b4:	f04f 0801 	mov.w	r8, #1
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052b8:	683b      	ldr	r3, [r7, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052ba:	681e      	ldr	r6, [r3, #0]
 80052bc:	2e00      	cmp	r6, #0
 80052be:	d047      	beq.n	8005350 <prvTimerTask+0xac>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 80052c4:	f7ff fa4e 	bl	8004764 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80052c8:	f7ff fa54 	bl	8004774 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80052cc:	682a      	ldr	r2, [r5, #0]
 80052ce:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 80052d0:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80052d2:	d34e      	bcc.n	8005372 <prvTimerTask+0xce>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052d4:	4286      	cmp	r6, r0
	xLastTime = xTimeNow;
 80052d6:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052d8:	d955      	bls.n	8005386 <prvTimerTask+0xe2>
 80052da:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052dc:	eba6 010a 	sub.w	r1, r6, sl
 80052e0:	6820      	ldr	r0, [r4, #0]
 80052e2:	f7ff f889 	bl	80043f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052e6:	f7ff faf3 	bl	80048d0 <xTaskResumeAll>
 80052ea:	b938      	cbnz	r0, 80052fc <prvTimerTask+0x58>
					portYIELD_WITHIN_API();
 80052ec:	4a5d      	ldr	r2, [pc, #372]	; (8005464 <prvTimerTask+0x1c0>)
 80052ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052fc:	2300      	movs	r3, #0
 80052fe:	461a      	mov	r2, r3
 8005300:	a903      	add	r1, sp, #12
 8005302:	6820      	ldr	r0, [r4, #0]
 8005304:	f7fe ff90 	bl	8004228 <xQueueGenericReceive>
 8005308:	2800      	cmp	r0, #0
 800530a:	d0d5      	beq.n	80052b8 <prvTimerTask+0x14>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800530c:	9b03      	ldr	r3, [sp, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	dbf4      	blt.n	80052fc <prvTimerTask+0x58>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005312:	9e05      	ldr	r6, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8005314:	6973      	ldr	r3, [r6, #20]
 8005316:	b113      	cbz	r3, 800531e <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005318:	1d30      	adds	r0, r6, #4
 800531a:	f7fe fbb9 	bl	8003a90 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800531e:	f7ff fa29 	bl	8004774 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005322:	682b      	ldr	r3, [r5, #0]
 8005324:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8005326:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8005328:	d32a      	bcc.n	8005380 <prvTimerTask+0xdc>
 800532a:	9b03      	ldr	r3, [sp, #12]
	xLastTime = xTimeNow;
 800532c:	f8c5 a000 	str.w	sl, [r5]
 8005330:	2b09      	cmp	r3, #9
 8005332:	d8e3      	bhi.n	80052fc <prvTimerTask+0x58>
 8005334:	fa08 f303 	lsl.w	r3, r8, r3
 8005338:	f413 7b04 	ands.w	fp, r3, #528	; 0x210
 800533c:	d178      	bne.n	8005430 <prvTimerTask+0x18c>
 800533e:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8005342:	d14f      	bne.n	80053e4 <prvTimerTask+0x140>
 8005344:	069b      	lsls	r3, r3, #26
 8005346:	d5d9      	bpl.n	80052fc <prvTimerTask+0x58>
						vPortFree( pxTimer );
 8005348:	4630      	mov	r0, r6
 800534a:	f7fe fb2f 	bl	80039ac <vPortFree>
 800534e:	e7d5      	b.n	80052fc <prvTimerTask+0x58>
	vTaskSuspendAll();
 8005350:	f7ff fa08 	bl	8004764 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8005354:	f7ff fa0e 	bl	8004774 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005358:	682a      	ldr	r2, [r5, #0]
 800535a:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 800535c:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 800535e:	d808      	bhi.n	8005372 <prvTimerTask+0xce>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005360:	f8d9 2000 	ldr.w	r2, [r9]
	xLastTime = xTimeNow;
 8005364:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	fab2 f282 	clz	r2, r2
 800536e:	0952      	lsrs	r2, r2, #5
 8005370:	e7b4      	b.n	80052dc <prvTimerTask+0x38>
		prvSwitchTimerLists();
 8005372:	f7ff ff4f 	bl	8005214 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8005376:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 800537a:	f7ff faa9 	bl	80048d0 <xTaskResumeAll>
 800537e:	e7bd      	b.n	80052fc <prvTimerTask+0x58>
		prvSwitchTimerLists();
 8005380:	f7ff ff48 	bl	8005214 <prvSwitchTimerLists>
 8005384:	e7d1      	b.n	800532a <prvTimerTask+0x86>
				( void ) xTaskResumeAll();
 8005386:	f7ff faa3 	bl	80048d0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	68d2      	ldr	r2, [r2, #12]
 800538e:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005392:	f10b 0004 	add.w	r0, fp, #4
 8005396:	f7fe fb7b 	bl	8003a90 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800539a:	f8db 201c 	ldr.w	r2, [fp, #28]
 800539e:	2a01      	cmp	r2, #1
 80053a0:	d004      	beq.n	80053ac <prvTimerTask+0x108>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053a2:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 80053a6:	4658      	mov	r0, fp
 80053a8:	4798      	blx	r3
 80053aa:	e7a7      	b.n	80052fc <prvTimerTask+0x58>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80053ac:	f8db 1018 	ldr.w	r1, [fp, #24]
 80053b0:	4652      	mov	r2, sl
 80053b2:	4431      	add	r1, r6
 80053b4:	4633      	mov	r3, r6
 80053b6:	4658      	mov	r0, fp
 80053b8:	f7ff fe8a 	bl	80050d0 <prvInsertTimerInActiveList>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d0f0      	beq.n	80053a2 <prvTimerTask+0xfe>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053c0:	2300      	movs	r3, #0
 80053c2:	4632      	mov	r2, r6
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	4619      	mov	r1, r3
 80053c8:	4658      	mov	r0, fp
 80053ca:	f7ff feef 	bl	80051ac <xTimerGenericCommand>
			configASSERT( xResult );
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d1e7      	bne.n	80053a2 <prvTimerTask+0xfe>
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	e7fe      	b.n	80053e2 <prvTimerTask+0x13e>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053e4:	9b04      	ldr	r3, [sp, #16]
 80053e6:	69b1      	ldr	r1, [r6, #24]
 80053e8:	4652      	mov	r2, sl
 80053ea:	4419      	add	r1, r3
 80053ec:	4630      	mov	r0, r6
 80053ee:	f7ff fe6f 	bl	80050d0 <prvInsertTimerInActiveList>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d082      	beq.n	80052fc <prvTimerTask+0x58>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80053f8:	4630      	mov	r0, r6
 80053fa:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80053fc:	69f3      	ldr	r3, [r6, #28]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	f47f af7c 	bne.w	80052fc <prvTimerTask+0x58>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005404:	69b3      	ldr	r3, [r6, #24]
 8005406:	9a04      	ldr	r2, [sp, #16]
 8005408:	f8cd b000 	str.w	fp, [sp]
 800540c:	441a      	add	r2, r3
 800540e:	4630      	mov	r0, r6
 8005410:	465b      	mov	r3, fp
 8005412:	4659      	mov	r1, fp
 8005414:	f7ff feca 	bl	80051ac <xTimerGenericCommand>
							configASSERT( xResult );
 8005418:	2800      	cmp	r0, #0
 800541a:	f47f af6f 	bne.w	80052fc <prvTimerTask+0x58>
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	e7fe      	b.n	800542e <prvTimerTask+0x18a>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005430:	9904      	ldr	r1, [sp, #16]
 8005432:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005434:	b131      	cbz	r1, 8005444 <prvTimerTask+0x1a0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005436:	4451      	add	r1, sl
 8005438:	4630      	mov	r0, r6
 800543a:	4653      	mov	r3, sl
 800543c:	4652      	mov	r2, sl
 800543e:	f7ff fe47 	bl	80050d0 <prvInsertTimerInActiveList>
 8005442:	e75b      	b.n	80052fc <prvTimerTask+0x58>
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	e7fe      	b.n	8005454 <prvTimerTask+0x1b0>
 8005456:	bf00      	nop
 8005458:	20003e40 	.word	0x20003e40
 800545c:	20003e70 	.word	0x20003e70
 8005460:	20003e74 	.word	0x20003e74
 8005464:	e000ed04 	.word	0xe000ed04
 8005468:	20003e44 	.word	0x20003e44

0800546c <__libc_init_array>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	4e0d      	ldr	r6, [pc, #52]	; (80054a4 <__libc_init_array+0x38>)
 8005470:	4c0d      	ldr	r4, [pc, #52]	; (80054a8 <__libc_init_array+0x3c>)
 8005472:	1ba4      	subs	r4, r4, r6
 8005474:	10a4      	asrs	r4, r4, #2
 8005476:	2500      	movs	r5, #0
 8005478:	42a5      	cmp	r5, r4
 800547a:	d109      	bne.n	8005490 <__libc_init_array+0x24>
 800547c:	4e0b      	ldr	r6, [pc, #44]	; (80054ac <__libc_init_array+0x40>)
 800547e:	4c0c      	ldr	r4, [pc, #48]	; (80054b0 <__libc_init_array+0x44>)
 8005480:	f001 fcc6 	bl	8006e10 <_init>
 8005484:	1ba4      	subs	r4, r4, r6
 8005486:	10a4      	asrs	r4, r4, #2
 8005488:	2500      	movs	r5, #0
 800548a:	42a5      	cmp	r5, r4
 800548c:	d105      	bne.n	800549a <__libc_init_array+0x2e>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005494:	4798      	blx	r3
 8005496:	3501      	adds	r5, #1
 8005498:	e7ee      	b.n	8005478 <__libc_init_array+0xc>
 800549a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800549e:	4798      	blx	r3
 80054a0:	3501      	adds	r5, #1
 80054a2:	e7f2      	b.n	800548a <__libc_init_array+0x1e>
 80054a4:	08006fd0 	.word	0x08006fd0
 80054a8:	08006fd0 	.word	0x08006fd0
 80054ac:	08006fd0 	.word	0x08006fd0
 80054b0:	08006fd4 	.word	0x08006fd4

080054b4 <malloc>:
 80054b4:	4b02      	ldr	r3, [pc, #8]	; (80054c0 <malloc+0xc>)
 80054b6:	4601      	mov	r1, r0
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	f000 b86d 	b.w	8005598 <_malloc_r>
 80054be:	bf00      	nop
 80054c0:	2000000c 	.word	0x2000000c

080054c4 <free>:
 80054c4:	4b02      	ldr	r3, [pc, #8]	; (80054d0 <free+0xc>)
 80054c6:	4601      	mov	r1, r0
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	f000 b817 	b.w	80054fc <_free_r>
 80054ce:	bf00      	nop
 80054d0:	2000000c 	.word	0x2000000c

080054d4 <memcpy>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	1e43      	subs	r3, r0, #1
 80054d8:	440a      	add	r2, r1
 80054da:	4291      	cmp	r1, r2
 80054dc:	d100      	bne.n	80054e0 <memcpy+0xc>
 80054de:	bd10      	pop	{r4, pc}
 80054e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054e8:	e7f7      	b.n	80054da <memcpy+0x6>

080054ea <memset>:
 80054ea:	4402      	add	r2, r0
 80054ec:	4603      	mov	r3, r0
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d100      	bne.n	80054f4 <memset+0xa>
 80054f2:	4770      	bx	lr
 80054f4:	f803 1b01 	strb.w	r1, [r3], #1
 80054f8:	e7f9      	b.n	80054ee <memset+0x4>
	...

080054fc <_free_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4605      	mov	r5, r0
 8005500:	2900      	cmp	r1, #0
 8005502:	d045      	beq.n	8005590 <_free_r+0x94>
 8005504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005508:	1f0c      	subs	r4, r1, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	bfb8      	it	lt
 800550e:	18e4      	addlt	r4, r4, r3
 8005510:	f000 f8d4 	bl	80056bc <__malloc_lock>
 8005514:	4a1f      	ldr	r2, [pc, #124]	; (8005594 <_free_r+0x98>)
 8005516:	6813      	ldr	r3, [r2, #0]
 8005518:	4610      	mov	r0, r2
 800551a:	b933      	cbnz	r3, 800552a <_free_r+0x2e>
 800551c:	6063      	str	r3, [r4, #4]
 800551e:	6014      	str	r4, [r2, #0]
 8005520:	4628      	mov	r0, r5
 8005522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005526:	f000 b8ca 	b.w	80056be <__malloc_unlock>
 800552a:	42a3      	cmp	r3, r4
 800552c:	d90c      	bls.n	8005548 <_free_r+0x4c>
 800552e:	6821      	ldr	r1, [r4, #0]
 8005530:	1862      	adds	r2, r4, r1
 8005532:	4293      	cmp	r3, r2
 8005534:	bf04      	itt	eq
 8005536:	681a      	ldreq	r2, [r3, #0]
 8005538:	685b      	ldreq	r3, [r3, #4]
 800553a:	6063      	str	r3, [r4, #4]
 800553c:	bf04      	itt	eq
 800553e:	1852      	addeq	r2, r2, r1
 8005540:	6022      	streq	r2, [r4, #0]
 8005542:	6004      	str	r4, [r0, #0]
 8005544:	e7ec      	b.n	8005520 <_free_r+0x24>
 8005546:	4613      	mov	r3, r2
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	b10a      	cbz	r2, 8005550 <_free_r+0x54>
 800554c:	42a2      	cmp	r2, r4
 800554e:	d9fa      	bls.n	8005546 <_free_r+0x4a>
 8005550:	6819      	ldr	r1, [r3, #0]
 8005552:	1858      	adds	r0, r3, r1
 8005554:	42a0      	cmp	r0, r4
 8005556:	d10b      	bne.n	8005570 <_free_r+0x74>
 8005558:	6820      	ldr	r0, [r4, #0]
 800555a:	4401      	add	r1, r0
 800555c:	1858      	adds	r0, r3, r1
 800555e:	4282      	cmp	r2, r0
 8005560:	6019      	str	r1, [r3, #0]
 8005562:	d1dd      	bne.n	8005520 <_free_r+0x24>
 8005564:	6810      	ldr	r0, [r2, #0]
 8005566:	6852      	ldr	r2, [r2, #4]
 8005568:	605a      	str	r2, [r3, #4]
 800556a:	4401      	add	r1, r0
 800556c:	6019      	str	r1, [r3, #0]
 800556e:	e7d7      	b.n	8005520 <_free_r+0x24>
 8005570:	d902      	bls.n	8005578 <_free_r+0x7c>
 8005572:	230c      	movs	r3, #12
 8005574:	602b      	str	r3, [r5, #0]
 8005576:	e7d3      	b.n	8005520 <_free_r+0x24>
 8005578:	6820      	ldr	r0, [r4, #0]
 800557a:	1821      	adds	r1, r4, r0
 800557c:	428a      	cmp	r2, r1
 800557e:	bf04      	itt	eq
 8005580:	6811      	ldreq	r1, [r2, #0]
 8005582:	6852      	ldreq	r2, [r2, #4]
 8005584:	6062      	str	r2, [r4, #4]
 8005586:	bf04      	itt	eq
 8005588:	1809      	addeq	r1, r1, r0
 800558a:	6021      	streq	r1, [r4, #0]
 800558c:	605c      	str	r4, [r3, #4]
 800558e:	e7c7      	b.n	8005520 <_free_r+0x24>
 8005590:	bd38      	pop	{r3, r4, r5, pc}
 8005592:	bf00      	nop
 8005594:	20003e7c 	.word	0x20003e7c

08005598 <_malloc_r>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	1ccd      	adds	r5, r1, #3
 800559c:	f025 0503 	bic.w	r5, r5, #3
 80055a0:	3508      	adds	r5, #8
 80055a2:	2d0c      	cmp	r5, #12
 80055a4:	bf38      	it	cc
 80055a6:	250c      	movcc	r5, #12
 80055a8:	2d00      	cmp	r5, #0
 80055aa:	4606      	mov	r6, r0
 80055ac:	db01      	blt.n	80055b2 <_malloc_r+0x1a>
 80055ae:	42a9      	cmp	r1, r5
 80055b0:	d903      	bls.n	80055ba <_malloc_r+0x22>
 80055b2:	230c      	movs	r3, #12
 80055b4:	6033      	str	r3, [r6, #0]
 80055b6:	2000      	movs	r0, #0
 80055b8:	bd70      	pop	{r4, r5, r6, pc}
 80055ba:	f000 f87f 	bl	80056bc <__malloc_lock>
 80055be:	4a23      	ldr	r2, [pc, #140]	; (800564c <_malloc_r+0xb4>)
 80055c0:	6814      	ldr	r4, [r2, #0]
 80055c2:	4621      	mov	r1, r4
 80055c4:	b991      	cbnz	r1, 80055ec <_malloc_r+0x54>
 80055c6:	4c22      	ldr	r4, [pc, #136]	; (8005650 <_malloc_r+0xb8>)
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	b91b      	cbnz	r3, 80055d4 <_malloc_r+0x3c>
 80055cc:	4630      	mov	r0, r6
 80055ce:	f000 f841 	bl	8005654 <_sbrk_r>
 80055d2:	6020      	str	r0, [r4, #0]
 80055d4:	4629      	mov	r1, r5
 80055d6:	4630      	mov	r0, r6
 80055d8:	f000 f83c 	bl	8005654 <_sbrk_r>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d126      	bne.n	800562e <_malloc_r+0x96>
 80055e0:	230c      	movs	r3, #12
 80055e2:	6033      	str	r3, [r6, #0]
 80055e4:	4630      	mov	r0, r6
 80055e6:	f000 f86a 	bl	80056be <__malloc_unlock>
 80055ea:	e7e4      	b.n	80055b6 <_malloc_r+0x1e>
 80055ec:	680b      	ldr	r3, [r1, #0]
 80055ee:	1b5b      	subs	r3, r3, r5
 80055f0:	d41a      	bmi.n	8005628 <_malloc_r+0x90>
 80055f2:	2b0b      	cmp	r3, #11
 80055f4:	d90f      	bls.n	8005616 <_malloc_r+0x7e>
 80055f6:	600b      	str	r3, [r1, #0]
 80055f8:	50cd      	str	r5, [r1, r3]
 80055fa:	18cc      	adds	r4, r1, r3
 80055fc:	4630      	mov	r0, r6
 80055fe:	f000 f85e 	bl	80056be <__malloc_unlock>
 8005602:	f104 000b 	add.w	r0, r4, #11
 8005606:	1d23      	adds	r3, r4, #4
 8005608:	f020 0007 	bic.w	r0, r0, #7
 800560c:	1ac3      	subs	r3, r0, r3
 800560e:	d01b      	beq.n	8005648 <_malloc_r+0xb0>
 8005610:	425a      	negs	r2, r3
 8005612:	50e2      	str	r2, [r4, r3]
 8005614:	bd70      	pop	{r4, r5, r6, pc}
 8005616:	428c      	cmp	r4, r1
 8005618:	bf0d      	iteet	eq
 800561a:	6863      	ldreq	r3, [r4, #4]
 800561c:	684b      	ldrne	r3, [r1, #4]
 800561e:	6063      	strne	r3, [r4, #4]
 8005620:	6013      	streq	r3, [r2, #0]
 8005622:	bf18      	it	ne
 8005624:	460c      	movne	r4, r1
 8005626:	e7e9      	b.n	80055fc <_malloc_r+0x64>
 8005628:	460c      	mov	r4, r1
 800562a:	6849      	ldr	r1, [r1, #4]
 800562c:	e7ca      	b.n	80055c4 <_malloc_r+0x2c>
 800562e:	1cc4      	adds	r4, r0, #3
 8005630:	f024 0403 	bic.w	r4, r4, #3
 8005634:	42a0      	cmp	r0, r4
 8005636:	d005      	beq.n	8005644 <_malloc_r+0xac>
 8005638:	1a21      	subs	r1, r4, r0
 800563a:	4630      	mov	r0, r6
 800563c:	f000 f80a 	bl	8005654 <_sbrk_r>
 8005640:	3001      	adds	r0, #1
 8005642:	d0cd      	beq.n	80055e0 <_malloc_r+0x48>
 8005644:	6025      	str	r5, [r4, #0]
 8005646:	e7d9      	b.n	80055fc <_malloc_r+0x64>
 8005648:	bd70      	pop	{r4, r5, r6, pc}
 800564a:	bf00      	nop
 800564c:	20003e7c 	.word	0x20003e7c
 8005650:	20003e80 	.word	0x20003e80

08005654 <_sbrk_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4c06      	ldr	r4, [pc, #24]	; (8005670 <_sbrk_r+0x1c>)
 8005658:	2300      	movs	r3, #0
 800565a:	4605      	mov	r5, r0
 800565c:	4608      	mov	r0, r1
 800565e:	6023      	str	r3, [r4, #0]
 8005660:	f001 fbc8 	bl	8006df4 <_sbrk>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d102      	bne.n	800566e <_sbrk_r+0x1a>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	b103      	cbz	r3, 800566e <_sbrk_r+0x1a>
 800566c:	602b      	str	r3, [r5, #0]
 800566e:	bd38      	pop	{r3, r4, r5, pc}
 8005670:	20004120 	.word	0x20004120

08005674 <siprintf>:
 8005674:	b40e      	push	{r1, r2, r3}
 8005676:	b500      	push	{lr}
 8005678:	b09c      	sub	sp, #112	; 0x70
 800567a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800567e:	ab1d      	add	r3, sp, #116	; 0x74
 8005680:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005684:	9002      	str	r0, [sp, #8]
 8005686:	9006      	str	r0, [sp, #24]
 8005688:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800568c:	480a      	ldr	r0, [pc, #40]	; (80056b8 <siprintf+0x44>)
 800568e:	9104      	str	r1, [sp, #16]
 8005690:	9107      	str	r1, [sp, #28]
 8005692:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005696:	f853 2b04 	ldr.w	r2, [r3], #4
 800569a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800569e:	6800      	ldr	r0, [r0, #0]
 80056a0:	9301      	str	r3, [sp, #4]
 80056a2:	a902      	add	r1, sp, #8
 80056a4:	f000 f868 	bl	8005778 <_svfiprintf_r>
 80056a8:	9b02      	ldr	r3, [sp, #8]
 80056aa:	2200      	movs	r2, #0
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	b01c      	add	sp, #112	; 0x70
 80056b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056b4:	b003      	add	sp, #12
 80056b6:	4770      	bx	lr
 80056b8:	2000000c 	.word	0x2000000c

080056bc <__malloc_lock>:
 80056bc:	4770      	bx	lr

080056be <__malloc_unlock>:
 80056be:	4770      	bx	lr

080056c0 <__ssputs_r>:
 80056c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c4:	688e      	ldr	r6, [r1, #8]
 80056c6:	429e      	cmp	r6, r3
 80056c8:	4682      	mov	sl, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	4691      	mov	r9, r2
 80056ce:	4698      	mov	r8, r3
 80056d0:	d835      	bhi.n	800573e <__ssputs_r+0x7e>
 80056d2:	898a      	ldrh	r2, [r1, #12]
 80056d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056d8:	d031      	beq.n	800573e <__ssputs_r+0x7e>
 80056da:	6825      	ldr	r5, [r4, #0]
 80056dc:	6909      	ldr	r1, [r1, #16]
 80056de:	1a6f      	subs	r7, r5, r1
 80056e0:	6965      	ldr	r5, [r4, #20]
 80056e2:	2302      	movs	r3, #2
 80056e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80056ec:	f108 0301 	add.w	r3, r8, #1
 80056f0:	443b      	add	r3, r7
 80056f2:	429d      	cmp	r5, r3
 80056f4:	bf38      	it	cc
 80056f6:	461d      	movcc	r5, r3
 80056f8:	0553      	lsls	r3, r2, #21
 80056fa:	d531      	bpl.n	8005760 <__ssputs_r+0xa0>
 80056fc:	4629      	mov	r1, r5
 80056fe:	f7ff ff4b 	bl	8005598 <_malloc_r>
 8005702:	4606      	mov	r6, r0
 8005704:	b950      	cbnz	r0, 800571c <__ssputs_r+0x5c>
 8005706:	230c      	movs	r3, #12
 8005708:	f8ca 3000 	str.w	r3, [sl]
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005712:	81a3      	strh	r3, [r4, #12]
 8005714:	f04f 30ff 	mov.w	r0, #4294967295
 8005718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800571c:	463a      	mov	r2, r7
 800571e:	6921      	ldr	r1, [r4, #16]
 8005720:	f7ff fed8 	bl	80054d4 <memcpy>
 8005724:	89a3      	ldrh	r3, [r4, #12]
 8005726:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800572a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800572e:	81a3      	strh	r3, [r4, #12]
 8005730:	6126      	str	r6, [r4, #16]
 8005732:	6165      	str	r5, [r4, #20]
 8005734:	443e      	add	r6, r7
 8005736:	1bed      	subs	r5, r5, r7
 8005738:	6026      	str	r6, [r4, #0]
 800573a:	60a5      	str	r5, [r4, #8]
 800573c:	4646      	mov	r6, r8
 800573e:	4546      	cmp	r6, r8
 8005740:	bf28      	it	cs
 8005742:	4646      	movcs	r6, r8
 8005744:	4632      	mov	r2, r6
 8005746:	4649      	mov	r1, r9
 8005748:	6820      	ldr	r0, [r4, #0]
 800574a:	f000 fa9f 	bl	8005c8c <memmove>
 800574e:	68a3      	ldr	r3, [r4, #8]
 8005750:	1b9b      	subs	r3, r3, r6
 8005752:	60a3      	str	r3, [r4, #8]
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	441e      	add	r6, r3
 8005758:	6026      	str	r6, [r4, #0]
 800575a:	2000      	movs	r0, #0
 800575c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005760:	462a      	mov	r2, r5
 8005762:	f000 faad 	bl	8005cc0 <_realloc_r>
 8005766:	4606      	mov	r6, r0
 8005768:	2800      	cmp	r0, #0
 800576a:	d1e1      	bne.n	8005730 <__ssputs_r+0x70>
 800576c:	6921      	ldr	r1, [r4, #16]
 800576e:	4650      	mov	r0, sl
 8005770:	f7ff fec4 	bl	80054fc <_free_r>
 8005774:	e7c7      	b.n	8005706 <__ssputs_r+0x46>
	...

08005778 <_svfiprintf_r>:
 8005778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577c:	b09d      	sub	sp, #116	; 0x74
 800577e:	4680      	mov	r8, r0
 8005780:	9303      	str	r3, [sp, #12]
 8005782:	898b      	ldrh	r3, [r1, #12]
 8005784:	061c      	lsls	r4, r3, #24
 8005786:	460d      	mov	r5, r1
 8005788:	4616      	mov	r6, r2
 800578a:	d50f      	bpl.n	80057ac <_svfiprintf_r+0x34>
 800578c:	690b      	ldr	r3, [r1, #16]
 800578e:	b96b      	cbnz	r3, 80057ac <_svfiprintf_r+0x34>
 8005790:	2140      	movs	r1, #64	; 0x40
 8005792:	f7ff ff01 	bl	8005598 <_malloc_r>
 8005796:	6028      	str	r0, [r5, #0]
 8005798:	6128      	str	r0, [r5, #16]
 800579a:	b928      	cbnz	r0, 80057a8 <_svfiprintf_r+0x30>
 800579c:	230c      	movs	r3, #12
 800579e:	f8c8 3000 	str.w	r3, [r8]
 80057a2:	f04f 30ff 	mov.w	r0, #4294967295
 80057a6:	e0c5      	b.n	8005934 <_svfiprintf_r+0x1bc>
 80057a8:	2340      	movs	r3, #64	; 0x40
 80057aa:	616b      	str	r3, [r5, #20]
 80057ac:	2300      	movs	r3, #0
 80057ae:	9309      	str	r3, [sp, #36]	; 0x24
 80057b0:	2320      	movs	r3, #32
 80057b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057b6:	2330      	movs	r3, #48	; 0x30
 80057b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057bc:	f04f 0b01 	mov.w	fp, #1
 80057c0:	4637      	mov	r7, r6
 80057c2:	463c      	mov	r4, r7
 80057c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d13c      	bne.n	8005846 <_svfiprintf_r+0xce>
 80057cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80057d0:	d00b      	beq.n	80057ea <_svfiprintf_r+0x72>
 80057d2:	4653      	mov	r3, sl
 80057d4:	4632      	mov	r2, r6
 80057d6:	4629      	mov	r1, r5
 80057d8:	4640      	mov	r0, r8
 80057da:	f7ff ff71 	bl	80056c0 <__ssputs_r>
 80057de:	3001      	adds	r0, #1
 80057e0:	f000 80a3 	beq.w	800592a <_svfiprintf_r+0x1b2>
 80057e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e6:	4453      	add	r3, sl
 80057e8:	9309      	str	r3, [sp, #36]	; 0x24
 80057ea:	783b      	ldrb	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 809c 	beq.w	800592a <_svfiprintf_r+0x1b2>
 80057f2:	2300      	movs	r3, #0
 80057f4:	f04f 32ff 	mov.w	r2, #4294967295
 80057f8:	9304      	str	r3, [sp, #16]
 80057fa:	9307      	str	r3, [sp, #28]
 80057fc:	9205      	str	r2, [sp, #20]
 80057fe:	9306      	str	r3, [sp, #24]
 8005800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005804:	931a      	str	r3, [sp, #104]	; 0x68
 8005806:	2205      	movs	r2, #5
 8005808:	7821      	ldrb	r1, [r4, #0]
 800580a:	4850      	ldr	r0, [pc, #320]	; (800594c <_svfiprintf_r+0x1d4>)
 800580c:	f7fa fce0 	bl	80001d0 <memchr>
 8005810:	1c67      	adds	r7, r4, #1
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	b9d8      	cbnz	r0, 800584e <_svfiprintf_r+0xd6>
 8005816:	06d9      	lsls	r1, r3, #27
 8005818:	bf44      	itt	mi
 800581a:	2220      	movmi	r2, #32
 800581c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005820:	071a      	lsls	r2, r3, #28
 8005822:	bf44      	itt	mi
 8005824:	222b      	movmi	r2, #43	; 0x2b
 8005826:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800582a:	7822      	ldrb	r2, [r4, #0]
 800582c:	2a2a      	cmp	r2, #42	; 0x2a
 800582e:	d016      	beq.n	800585e <_svfiprintf_r+0xe6>
 8005830:	9a07      	ldr	r2, [sp, #28]
 8005832:	2100      	movs	r1, #0
 8005834:	200a      	movs	r0, #10
 8005836:	4627      	mov	r7, r4
 8005838:	3401      	adds	r4, #1
 800583a:	783b      	ldrb	r3, [r7, #0]
 800583c:	3b30      	subs	r3, #48	; 0x30
 800583e:	2b09      	cmp	r3, #9
 8005840:	d951      	bls.n	80058e6 <_svfiprintf_r+0x16e>
 8005842:	b1c9      	cbz	r1, 8005878 <_svfiprintf_r+0x100>
 8005844:	e011      	b.n	800586a <_svfiprintf_r+0xf2>
 8005846:	2b25      	cmp	r3, #37	; 0x25
 8005848:	d0c0      	beq.n	80057cc <_svfiprintf_r+0x54>
 800584a:	4627      	mov	r7, r4
 800584c:	e7b9      	b.n	80057c2 <_svfiprintf_r+0x4a>
 800584e:	4a3f      	ldr	r2, [pc, #252]	; (800594c <_svfiprintf_r+0x1d4>)
 8005850:	1a80      	subs	r0, r0, r2
 8005852:	fa0b f000 	lsl.w	r0, fp, r0
 8005856:	4318      	orrs	r0, r3
 8005858:	9004      	str	r0, [sp, #16]
 800585a:	463c      	mov	r4, r7
 800585c:	e7d3      	b.n	8005806 <_svfiprintf_r+0x8e>
 800585e:	9a03      	ldr	r2, [sp, #12]
 8005860:	1d11      	adds	r1, r2, #4
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	9103      	str	r1, [sp, #12]
 8005866:	2a00      	cmp	r2, #0
 8005868:	db01      	blt.n	800586e <_svfiprintf_r+0xf6>
 800586a:	9207      	str	r2, [sp, #28]
 800586c:	e004      	b.n	8005878 <_svfiprintf_r+0x100>
 800586e:	4252      	negs	r2, r2
 8005870:	f043 0302 	orr.w	r3, r3, #2
 8005874:	9207      	str	r2, [sp, #28]
 8005876:	9304      	str	r3, [sp, #16]
 8005878:	783b      	ldrb	r3, [r7, #0]
 800587a:	2b2e      	cmp	r3, #46	; 0x2e
 800587c:	d10e      	bne.n	800589c <_svfiprintf_r+0x124>
 800587e:	787b      	ldrb	r3, [r7, #1]
 8005880:	2b2a      	cmp	r3, #42	; 0x2a
 8005882:	f107 0101 	add.w	r1, r7, #1
 8005886:	d132      	bne.n	80058ee <_svfiprintf_r+0x176>
 8005888:	9b03      	ldr	r3, [sp, #12]
 800588a:	1d1a      	adds	r2, r3, #4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	9203      	str	r2, [sp, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	bfb8      	it	lt
 8005894:	f04f 33ff 	movlt.w	r3, #4294967295
 8005898:	3702      	adds	r7, #2
 800589a:	9305      	str	r3, [sp, #20]
 800589c:	4c2c      	ldr	r4, [pc, #176]	; (8005950 <_svfiprintf_r+0x1d8>)
 800589e:	7839      	ldrb	r1, [r7, #0]
 80058a0:	2203      	movs	r2, #3
 80058a2:	4620      	mov	r0, r4
 80058a4:	f7fa fc94 	bl	80001d0 <memchr>
 80058a8:	b138      	cbz	r0, 80058ba <_svfiprintf_r+0x142>
 80058aa:	2340      	movs	r3, #64	; 0x40
 80058ac:	1b00      	subs	r0, r0, r4
 80058ae:	fa03 f000 	lsl.w	r0, r3, r0
 80058b2:	9b04      	ldr	r3, [sp, #16]
 80058b4:	4303      	orrs	r3, r0
 80058b6:	9304      	str	r3, [sp, #16]
 80058b8:	3701      	adds	r7, #1
 80058ba:	7839      	ldrb	r1, [r7, #0]
 80058bc:	4825      	ldr	r0, [pc, #148]	; (8005954 <_svfiprintf_r+0x1dc>)
 80058be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058c2:	2206      	movs	r2, #6
 80058c4:	1c7e      	adds	r6, r7, #1
 80058c6:	f7fa fc83 	bl	80001d0 <memchr>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d035      	beq.n	800593a <_svfiprintf_r+0x1c2>
 80058ce:	4b22      	ldr	r3, [pc, #136]	; (8005958 <_svfiprintf_r+0x1e0>)
 80058d0:	b9fb      	cbnz	r3, 8005912 <_svfiprintf_r+0x19a>
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	3307      	adds	r3, #7
 80058d6:	f023 0307 	bic.w	r3, r3, #7
 80058da:	3308      	adds	r3, #8
 80058dc:	9303      	str	r3, [sp, #12]
 80058de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e0:	444b      	add	r3, r9
 80058e2:	9309      	str	r3, [sp, #36]	; 0x24
 80058e4:	e76c      	b.n	80057c0 <_svfiprintf_r+0x48>
 80058e6:	fb00 3202 	mla	r2, r0, r2, r3
 80058ea:	2101      	movs	r1, #1
 80058ec:	e7a3      	b.n	8005836 <_svfiprintf_r+0xbe>
 80058ee:	2300      	movs	r3, #0
 80058f0:	9305      	str	r3, [sp, #20]
 80058f2:	4618      	mov	r0, r3
 80058f4:	240a      	movs	r4, #10
 80058f6:	460f      	mov	r7, r1
 80058f8:	3101      	adds	r1, #1
 80058fa:	783a      	ldrb	r2, [r7, #0]
 80058fc:	3a30      	subs	r2, #48	; 0x30
 80058fe:	2a09      	cmp	r2, #9
 8005900:	d903      	bls.n	800590a <_svfiprintf_r+0x192>
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0ca      	beq.n	800589c <_svfiprintf_r+0x124>
 8005906:	9005      	str	r0, [sp, #20]
 8005908:	e7c8      	b.n	800589c <_svfiprintf_r+0x124>
 800590a:	fb04 2000 	mla	r0, r4, r0, r2
 800590e:	2301      	movs	r3, #1
 8005910:	e7f1      	b.n	80058f6 <_svfiprintf_r+0x17e>
 8005912:	ab03      	add	r3, sp, #12
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	462a      	mov	r2, r5
 8005918:	4b10      	ldr	r3, [pc, #64]	; (800595c <_svfiprintf_r+0x1e4>)
 800591a:	a904      	add	r1, sp, #16
 800591c:	4640      	mov	r0, r8
 800591e:	f3af 8000 	nop.w
 8005922:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005926:	4681      	mov	r9, r0
 8005928:	d1d9      	bne.n	80058de <_svfiprintf_r+0x166>
 800592a:	89ab      	ldrh	r3, [r5, #12]
 800592c:	065b      	lsls	r3, r3, #25
 800592e:	f53f af38 	bmi.w	80057a2 <_svfiprintf_r+0x2a>
 8005932:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005934:	b01d      	add	sp, #116	; 0x74
 8005936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593a:	ab03      	add	r3, sp, #12
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	462a      	mov	r2, r5
 8005940:	4b06      	ldr	r3, [pc, #24]	; (800595c <_svfiprintf_r+0x1e4>)
 8005942:	a904      	add	r1, sp, #16
 8005944:	4640      	mov	r0, r8
 8005946:	f000 f881 	bl	8005a4c <_printf_i>
 800594a:	e7ea      	b.n	8005922 <_svfiprintf_r+0x1aa>
 800594c:	08006f4c 	.word	0x08006f4c
 8005950:	08006f52 	.word	0x08006f52
 8005954:	08006f56 	.word	0x08006f56
 8005958:	00000000 	.word	0x00000000
 800595c:	080056c1 	.word	0x080056c1

08005960 <_printf_common>:
 8005960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005964:	4691      	mov	r9, r2
 8005966:	461f      	mov	r7, r3
 8005968:	688a      	ldr	r2, [r1, #8]
 800596a:	690b      	ldr	r3, [r1, #16]
 800596c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005970:	4293      	cmp	r3, r2
 8005972:	bfb8      	it	lt
 8005974:	4613      	movlt	r3, r2
 8005976:	f8c9 3000 	str.w	r3, [r9]
 800597a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800597e:	4606      	mov	r6, r0
 8005980:	460c      	mov	r4, r1
 8005982:	b112      	cbz	r2, 800598a <_printf_common+0x2a>
 8005984:	3301      	adds	r3, #1
 8005986:	f8c9 3000 	str.w	r3, [r9]
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	0699      	lsls	r1, r3, #26
 800598e:	bf42      	ittt	mi
 8005990:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005994:	3302      	addmi	r3, #2
 8005996:	f8c9 3000 	strmi.w	r3, [r9]
 800599a:	6825      	ldr	r5, [r4, #0]
 800599c:	f015 0506 	ands.w	r5, r5, #6
 80059a0:	d107      	bne.n	80059b2 <_printf_common+0x52>
 80059a2:	f104 0a19 	add.w	sl, r4, #25
 80059a6:	68e3      	ldr	r3, [r4, #12]
 80059a8:	f8d9 2000 	ldr.w	r2, [r9]
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	429d      	cmp	r5, r3
 80059b0:	db29      	blt.n	8005a06 <_printf_common+0xa6>
 80059b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80059b6:	6822      	ldr	r2, [r4, #0]
 80059b8:	3300      	adds	r3, #0
 80059ba:	bf18      	it	ne
 80059bc:	2301      	movne	r3, #1
 80059be:	0692      	lsls	r2, r2, #26
 80059c0:	d42e      	bmi.n	8005a20 <_printf_common+0xc0>
 80059c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059c6:	4639      	mov	r1, r7
 80059c8:	4630      	mov	r0, r6
 80059ca:	47c0      	blx	r8
 80059cc:	3001      	adds	r0, #1
 80059ce:	d021      	beq.n	8005a14 <_printf_common+0xb4>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	68e5      	ldr	r5, [r4, #12]
 80059d4:	f8d9 2000 	ldr.w	r2, [r9]
 80059d8:	f003 0306 	and.w	r3, r3, #6
 80059dc:	2b04      	cmp	r3, #4
 80059de:	bf08      	it	eq
 80059e0:	1aad      	subeq	r5, r5, r2
 80059e2:	68a3      	ldr	r3, [r4, #8]
 80059e4:	6922      	ldr	r2, [r4, #16]
 80059e6:	bf0c      	ite	eq
 80059e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059ec:	2500      	movne	r5, #0
 80059ee:	4293      	cmp	r3, r2
 80059f0:	bfc4      	itt	gt
 80059f2:	1a9b      	subgt	r3, r3, r2
 80059f4:	18ed      	addgt	r5, r5, r3
 80059f6:	f04f 0900 	mov.w	r9, #0
 80059fa:	341a      	adds	r4, #26
 80059fc:	454d      	cmp	r5, r9
 80059fe:	d11b      	bne.n	8005a38 <_printf_common+0xd8>
 8005a00:	2000      	movs	r0, #0
 8005a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a06:	2301      	movs	r3, #1
 8005a08:	4652      	mov	r2, sl
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	47c0      	blx	r8
 8005a10:	3001      	adds	r0, #1
 8005a12:	d103      	bne.n	8005a1c <_printf_common+0xbc>
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295
 8005a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a1c:	3501      	adds	r5, #1
 8005a1e:	e7c2      	b.n	80059a6 <_printf_common+0x46>
 8005a20:	18e1      	adds	r1, r4, r3
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	2030      	movs	r0, #48	; 0x30
 8005a26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a2a:	4422      	add	r2, r4
 8005a2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a34:	3302      	adds	r3, #2
 8005a36:	e7c4      	b.n	80059c2 <_printf_common+0x62>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	4622      	mov	r2, r4
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	4630      	mov	r0, r6
 8005a40:	47c0      	blx	r8
 8005a42:	3001      	adds	r0, #1
 8005a44:	d0e6      	beq.n	8005a14 <_printf_common+0xb4>
 8005a46:	f109 0901 	add.w	r9, r9, #1
 8005a4a:	e7d7      	b.n	80059fc <_printf_common+0x9c>

08005a4c <_printf_i>:
 8005a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a50:	4617      	mov	r7, r2
 8005a52:	7e0a      	ldrb	r2, [r1, #24]
 8005a54:	b085      	sub	sp, #20
 8005a56:	2a6e      	cmp	r2, #110	; 0x6e
 8005a58:	4698      	mov	r8, r3
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a60:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005a64:	f000 80bc 	beq.w	8005be0 <_printf_i+0x194>
 8005a68:	d81a      	bhi.n	8005aa0 <_printf_i+0x54>
 8005a6a:	2a63      	cmp	r2, #99	; 0x63
 8005a6c:	d02e      	beq.n	8005acc <_printf_i+0x80>
 8005a6e:	d80a      	bhi.n	8005a86 <_printf_i+0x3a>
 8005a70:	2a00      	cmp	r2, #0
 8005a72:	f000 80c8 	beq.w	8005c06 <_printf_i+0x1ba>
 8005a76:	2a58      	cmp	r2, #88	; 0x58
 8005a78:	f000 808a 	beq.w	8005b90 <_printf_i+0x144>
 8005a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a80:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005a84:	e02a      	b.n	8005adc <_printf_i+0x90>
 8005a86:	2a64      	cmp	r2, #100	; 0x64
 8005a88:	d001      	beq.n	8005a8e <_printf_i+0x42>
 8005a8a:	2a69      	cmp	r2, #105	; 0x69
 8005a8c:	d1f6      	bne.n	8005a7c <_printf_i+0x30>
 8005a8e:	6821      	ldr	r1, [r4, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005a96:	d023      	beq.n	8005ae0 <_printf_i+0x94>
 8005a98:	1d11      	adds	r1, r2, #4
 8005a9a:	6019      	str	r1, [r3, #0]
 8005a9c:	6813      	ldr	r3, [r2, #0]
 8005a9e:	e027      	b.n	8005af0 <_printf_i+0xa4>
 8005aa0:	2a73      	cmp	r2, #115	; 0x73
 8005aa2:	f000 80b4 	beq.w	8005c0e <_printf_i+0x1c2>
 8005aa6:	d808      	bhi.n	8005aba <_printf_i+0x6e>
 8005aa8:	2a6f      	cmp	r2, #111	; 0x6f
 8005aaa:	d02a      	beq.n	8005b02 <_printf_i+0xb6>
 8005aac:	2a70      	cmp	r2, #112	; 0x70
 8005aae:	d1e5      	bne.n	8005a7c <_printf_i+0x30>
 8005ab0:	680a      	ldr	r2, [r1, #0]
 8005ab2:	f042 0220 	orr.w	r2, r2, #32
 8005ab6:	600a      	str	r2, [r1, #0]
 8005ab8:	e003      	b.n	8005ac2 <_printf_i+0x76>
 8005aba:	2a75      	cmp	r2, #117	; 0x75
 8005abc:	d021      	beq.n	8005b02 <_printf_i+0xb6>
 8005abe:	2a78      	cmp	r2, #120	; 0x78
 8005ac0:	d1dc      	bne.n	8005a7c <_printf_i+0x30>
 8005ac2:	2278      	movs	r2, #120	; 0x78
 8005ac4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005ac8:	496e      	ldr	r1, [pc, #440]	; (8005c84 <_printf_i+0x238>)
 8005aca:	e064      	b.n	8005b96 <_printf_i+0x14a>
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005ad2:	1d11      	adds	r1, r2, #4
 8005ad4:	6019      	str	r1, [r3, #0]
 8005ad6:	6813      	ldr	r3, [r2, #0]
 8005ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0a3      	b.n	8005c28 <_printf_i+0x1dc>
 8005ae0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005ae4:	f102 0104 	add.w	r1, r2, #4
 8005ae8:	6019      	str	r1, [r3, #0]
 8005aea:	d0d7      	beq.n	8005a9c <_printf_i+0x50>
 8005aec:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	da03      	bge.n	8005afc <_printf_i+0xb0>
 8005af4:	222d      	movs	r2, #45	; 0x2d
 8005af6:	425b      	negs	r3, r3
 8005af8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005afc:	4962      	ldr	r1, [pc, #392]	; (8005c88 <_printf_i+0x23c>)
 8005afe:	220a      	movs	r2, #10
 8005b00:	e017      	b.n	8005b32 <_printf_i+0xe6>
 8005b02:	6820      	ldr	r0, [r4, #0]
 8005b04:	6819      	ldr	r1, [r3, #0]
 8005b06:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005b0a:	d003      	beq.n	8005b14 <_printf_i+0xc8>
 8005b0c:	1d08      	adds	r0, r1, #4
 8005b0e:	6018      	str	r0, [r3, #0]
 8005b10:	680b      	ldr	r3, [r1, #0]
 8005b12:	e006      	b.n	8005b22 <_printf_i+0xd6>
 8005b14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b18:	f101 0004 	add.w	r0, r1, #4
 8005b1c:	6018      	str	r0, [r3, #0]
 8005b1e:	d0f7      	beq.n	8005b10 <_printf_i+0xc4>
 8005b20:	880b      	ldrh	r3, [r1, #0]
 8005b22:	4959      	ldr	r1, [pc, #356]	; (8005c88 <_printf_i+0x23c>)
 8005b24:	2a6f      	cmp	r2, #111	; 0x6f
 8005b26:	bf14      	ite	ne
 8005b28:	220a      	movne	r2, #10
 8005b2a:	2208      	moveq	r2, #8
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005b32:	6865      	ldr	r5, [r4, #4]
 8005b34:	60a5      	str	r5, [r4, #8]
 8005b36:	2d00      	cmp	r5, #0
 8005b38:	f2c0 809c 	blt.w	8005c74 <_printf_i+0x228>
 8005b3c:	6820      	ldr	r0, [r4, #0]
 8005b3e:	f020 0004 	bic.w	r0, r0, #4
 8005b42:	6020      	str	r0, [r4, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d13f      	bne.n	8005bc8 <_printf_i+0x17c>
 8005b48:	2d00      	cmp	r5, #0
 8005b4a:	f040 8095 	bne.w	8005c78 <_printf_i+0x22c>
 8005b4e:	4675      	mov	r5, lr
 8005b50:	2a08      	cmp	r2, #8
 8005b52:	d10b      	bne.n	8005b6c <_printf_i+0x120>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	07da      	lsls	r2, r3, #31
 8005b58:	d508      	bpl.n	8005b6c <_printf_i+0x120>
 8005b5a:	6923      	ldr	r3, [r4, #16]
 8005b5c:	6862      	ldr	r2, [r4, #4]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	bfde      	ittt	le
 8005b62:	2330      	movle	r3, #48	; 0x30
 8005b64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b6c:	ebae 0305 	sub.w	r3, lr, r5
 8005b70:	6123      	str	r3, [r4, #16]
 8005b72:	f8cd 8000 	str.w	r8, [sp]
 8005b76:	463b      	mov	r3, r7
 8005b78:	aa03      	add	r2, sp, #12
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f7ff feef 	bl	8005960 <_printf_common>
 8005b82:	3001      	adds	r0, #1
 8005b84:	d155      	bne.n	8005c32 <_printf_i+0x1e6>
 8005b86:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8a:	b005      	add	sp, #20
 8005b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b90:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005b94:	493c      	ldr	r1, [pc, #240]	; (8005c88 <_printf_i+0x23c>)
 8005b96:	6822      	ldr	r2, [r4, #0]
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005b9e:	f100 0504 	add.w	r5, r0, #4
 8005ba2:	601d      	str	r5, [r3, #0]
 8005ba4:	d001      	beq.n	8005baa <_printf_i+0x15e>
 8005ba6:	6803      	ldr	r3, [r0, #0]
 8005ba8:	e002      	b.n	8005bb0 <_printf_i+0x164>
 8005baa:	0655      	lsls	r5, r2, #25
 8005bac:	d5fb      	bpl.n	8005ba6 <_printf_i+0x15a>
 8005bae:	8803      	ldrh	r3, [r0, #0]
 8005bb0:	07d0      	lsls	r0, r2, #31
 8005bb2:	bf44      	itt	mi
 8005bb4:	f042 0220 	orrmi.w	r2, r2, #32
 8005bb8:	6022      	strmi	r2, [r4, #0]
 8005bba:	b91b      	cbnz	r3, 8005bc4 <_printf_i+0x178>
 8005bbc:	6822      	ldr	r2, [r4, #0]
 8005bbe:	f022 0220 	bic.w	r2, r2, #32
 8005bc2:	6022      	str	r2, [r4, #0]
 8005bc4:	2210      	movs	r2, #16
 8005bc6:	e7b1      	b.n	8005b2c <_printf_i+0xe0>
 8005bc8:	4675      	mov	r5, lr
 8005bca:	fbb3 f0f2 	udiv	r0, r3, r2
 8005bce:	fb02 3310 	mls	r3, r2, r0, r3
 8005bd2:	5ccb      	ldrb	r3, [r1, r3]
 8005bd4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d1f5      	bne.n	8005bca <_printf_i+0x17e>
 8005bde:	e7b7      	b.n	8005b50 <_printf_i+0x104>
 8005be0:	6808      	ldr	r0, [r1, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	6949      	ldr	r1, [r1, #20]
 8005be6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005bea:	d004      	beq.n	8005bf6 <_printf_i+0x1aa>
 8005bec:	1d10      	adds	r0, r2, #4
 8005bee:	6018      	str	r0, [r3, #0]
 8005bf0:	6813      	ldr	r3, [r2, #0]
 8005bf2:	6019      	str	r1, [r3, #0]
 8005bf4:	e007      	b.n	8005c06 <_printf_i+0x1ba>
 8005bf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bfa:	f102 0004 	add.w	r0, r2, #4
 8005bfe:	6018      	str	r0, [r3, #0]
 8005c00:	6813      	ldr	r3, [r2, #0]
 8005c02:	d0f6      	beq.n	8005bf2 <_printf_i+0x1a6>
 8005c04:	8019      	strh	r1, [r3, #0]
 8005c06:	2300      	movs	r3, #0
 8005c08:	6123      	str	r3, [r4, #16]
 8005c0a:	4675      	mov	r5, lr
 8005c0c:	e7b1      	b.n	8005b72 <_printf_i+0x126>
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	1d11      	adds	r1, r2, #4
 8005c12:	6019      	str	r1, [r3, #0]
 8005c14:	6815      	ldr	r5, [r2, #0]
 8005c16:	6862      	ldr	r2, [r4, #4]
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f7fa fad8 	bl	80001d0 <memchr>
 8005c20:	b108      	cbz	r0, 8005c26 <_printf_i+0x1da>
 8005c22:	1b40      	subs	r0, r0, r5
 8005c24:	6060      	str	r0, [r4, #4]
 8005c26:	6863      	ldr	r3, [r4, #4]
 8005c28:	6123      	str	r3, [r4, #16]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c30:	e79f      	b.n	8005b72 <_printf_i+0x126>
 8005c32:	6923      	ldr	r3, [r4, #16]
 8005c34:	462a      	mov	r2, r5
 8005c36:	4639      	mov	r1, r7
 8005c38:	4630      	mov	r0, r6
 8005c3a:	47c0      	blx	r8
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d0a2      	beq.n	8005b86 <_printf_i+0x13a>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	079b      	lsls	r3, r3, #30
 8005c44:	d507      	bpl.n	8005c56 <_printf_i+0x20a>
 8005c46:	2500      	movs	r5, #0
 8005c48:	f104 0919 	add.w	r9, r4, #25
 8005c4c:	68e3      	ldr	r3, [r4, #12]
 8005c4e:	9a03      	ldr	r2, [sp, #12]
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	429d      	cmp	r5, r3
 8005c54:	db05      	blt.n	8005c62 <_printf_i+0x216>
 8005c56:	68e0      	ldr	r0, [r4, #12]
 8005c58:	9b03      	ldr	r3, [sp, #12]
 8005c5a:	4298      	cmp	r0, r3
 8005c5c:	bfb8      	it	lt
 8005c5e:	4618      	movlt	r0, r3
 8005c60:	e793      	b.n	8005b8a <_printf_i+0x13e>
 8005c62:	2301      	movs	r3, #1
 8005c64:	464a      	mov	r2, r9
 8005c66:	4639      	mov	r1, r7
 8005c68:	4630      	mov	r0, r6
 8005c6a:	47c0      	blx	r8
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d08a      	beq.n	8005b86 <_printf_i+0x13a>
 8005c70:	3501      	adds	r5, #1
 8005c72:	e7eb      	b.n	8005c4c <_printf_i+0x200>
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1a7      	bne.n	8005bc8 <_printf_i+0x17c>
 8005c78:	780b      	ldrb	r3, [r1, #0]
 8005c7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c82:	e765      	b.n	8005b50 <_printf_i+0x104>
 8005c84:	08006f6e 	.word	0x08006f6e
 8005c88:	08006f5d 	.word	0x08006f5d

08005c8c <memmove>:
 8005c8c:	4288      	cmp	r0, r1
 8005c8e:	b510      	push	{r4, lr}
 8005c90:	eb01 0302 	add.w	r3, r1, r2
 8005c94:	d803      	bhi.n	8005c9e <memmove+0x12>
 8005c96:	1e42      	subs	r2, r0, #1
 8005c98:	4299      	cmp	r1, r3
 8005c9a:	d10c      	bne.n	8005cb6 <memmove+0x2a>
 8005c9c:	bd10      	pop	{r4, pc}
 8005c9e:	4298      	cmp	r0, r3
 8005ca0:	d2f9      	bcs.n	8005c96 <memmove+0xa>
 8005ca2:	1881      	adds	r1, r0, r2
 8005ca4:	1ad2      	subs	r2, r2, r3
 8005ca6:	42d3      	cmn	r3, r2
 8005ca8:	d100      	bne.n	8005cac <memmove+0x20>
 8005caa:	bd10      	pop	{r4, pc}
 8005cac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cb0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005cb4:	e7f7      	b.n	8005ca6 <memmove+0x1a>
 8005cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cba:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005cbe:	e7eb      	b.n	8005c98 <memmove+0xc>

08005cc0 <_realloc_r>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	460e      	mov	r6, r1
 8005cc8:	b921      	cbnz	r1, 8005cd4 <_realloc_r+0x14>
 8005cca:	4611      	mov	r1, r2
 8005ccc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cd0:	f7ff bc62 	b.w	8005598 <_malloc_r>
 8005cd4:	b922      	cbnz	r2, 8005ce0 <_realloc_r+0x20>
 8005cd6:	f7ff fc11 	bl	80054fc <_free_r>
 8005cda:	4625      	mov	r5, r4
 8005cdc:	4628      	mov	r0, r5
 8005cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce0:	f000 f814 	bl	8005d0c <_malloc_usable_size_r>
 8005ce4:	4284      	cmp	r4, r0
 8005ce6:	d90f      	bls.n	8005d08 <_realloc_r+0x48>
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4638      	mov	r0, r7
 8005cec:	f7ff fc54 	bl	8005598 <_malloc_r>
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d0f2      	beq.n	8005cdc <_realloc_r+0x1c>
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	f7ff fbeb 	bl	80054d4 <memcpy>
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4638      	mov	r0, r7
 8005d02:	f7ff fbfb 	bl	80054fc <_free_r>
 8005d06:	e7e9      	b.n	8005cdc <_realloc_r+0x1c>
 8005d08:	4635      	mov	r5, r6
 8005d0a:	e7e7      	b.n	8005cdc <_realloc_r+0x1c>

08005d0c <_malloc_usable_size_r>:
 8005d0c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005d10:	2800      	cmp	r0, #0
 8005d12:	f1a0 0004 	sub.w	r0, r0, #4
 8005d16:	bfbc      	itt	lt
 8005d18:	580b      	ldrlt	r3, [r1, r0]
 8005d1a:	18c0      	addlt	r0, r0, r3
 8005d1c:	4770      	bx	lr
	...

08005d20 <pow>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	ed2d 8b04 	vpush	{d8-d9}
 8005d28:	b08d      	sub	sp, #52	; 0x34
 8005d2a:	ec57 6b10 	vmov	r6, r7, d0
 8005d2e:	ec55 4b11 	vmov	r4, r5, d1
 8005d32:	f000 f96d 	bl	8006010 <__ieee754_pow>
 8005d36:	4bae      	ldr	r3, [pc, #696]	; (8005ff0 <pow+0x2d0>)
 8005d38:	eeb0 8a40 	vmov.f32	s16, s0
 8005d3c:	eef0 8a60 	vmov.f32	s17, s1
 8005d40:	f993 9000 	ldrsb.w	r9, [r3]
 8005d44:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005d48:	4698      	mov	r8, r3
 8005d4a:	d05f      	beq.n	8005e0c <pow+0xec>
 8005d4c:	4622      	mov	r2, r4
 8005d4e:	462b      	mov	r3, r5
 8005d50:	4620      	mov	r0, r4
 8005d52:	4629      	mov	r1, r5
 8005d54:	f7fa fede 	bl	8000b14 <__aeabi_dcmpun>
 8005d58:	4683      	mov	fp, r0
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d156      	bne.n	8005e0c <pow+0xec>
 8005d5e:	4632      	mov	r2, r6
 8005d60:	463b      	mov	r3, r7
 8005d62:	4630      	mov	r0, r6
 8005d64:	4639      	mov	r1, r7
 8005d66:	f7fa fed5 	bl	8000b14 <__aeabi_dcmpun>
 8005d6a:	9001      	str	r0, [sp, #4]
 8005d6c:	b1e8      	cbz	r0, 8005daa <pow+0x8a>
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2300      	movs	r3, #0
 8005d72:	4620      	mov	r0, r4
 8005d74:	4629      	mov	r1, r5
 8005d76:	f7fa fe9b 	bl	8000ab0 <__aeabi_dcmpeq>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d046      	beq.n	8005e0c <pow+0xec>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	9302      	str	r3, [sp, #8]
 8005d82:	4b9c      	ldr	r3, [pc, #624]	; (8005ff4 <pow+0x2d4>)
 8005d84:	9303      	str	r3, [sp, #12]
 8005d86:	4b9c      	ldr	r3, [pc, #624]	; (8005ff8 <pow+0x2d8>)
 8005d88:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f1b9 0f02 	cmp.w	r9, #2
 8005d92:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005d96:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005d9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005d9e:	d033      	beq.n	8005e08 <pow+0xe8>
 8005da0:	a802      	add	r0, sp, #8
 8005da2:	f000 ff06 	bl	8006bb2 <matherr>
 8005da6:	bb48      	cbnz	r0, 8005dfc <pow+0xdc>
 8005da8:	e05e      	b.n	8005e68 <pow+0x148>
 8005daa:	f04f 0a00 	mov.w	sl, #0
 8005dae:	f04f 0b00 	mov.w	fp, #0
 8005db2:	4652      	mov	r2, sl
 8005db4:	465b      	mov	r3, fp
 8005db6:	4630      	mov	r0, r6
 8005db8:	4639      	mov	r1, r7
 8005dba:	f7fa fe79 	bl	8000ab0 <__aeabi_dcmpeq>
 8005dbe:	ec4b ab19 	vmov	d9, sl, fp
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d055      	beq.n	8005e72 <pow+0x152>
 8005dc6:	4652      	mov	r2, sl
 8005dc8:	465b      	mov	r3, fp
 8005dca:	4620      	mov	r0, r4
 8005dcc:	4629      	mov	r1, r5
 8005dce:	f7fa fe6f 	bl	8000ab0 <__aeabi_dcmpeq>
 8005dd2:	4680      	mov	r8, r0
 8005dd4:	b318      	cbz	r0, 8005e1e <pow+0xfe>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	9302      	str	r3, [sp, #8]
 8005dda:	4b86      	ldr	r3, [pc, #536]	; (8005ff4 <pow+0x2d4>)
 8005ddc:	9303      	str	r3, [sp, #12]
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	930a      	str	r3, [sp, #40]	; 0x28
 8005de2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005de6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005dea:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005dee:	f1b9 0f00 	cmp.w	r9, #0
 8005df2:	d0d5      	beq.n	8005da0 <pow+0x80>
 8005df4:	4b80      	ldr	r3, [pc, #512]	; (8005ff8 <pow+0x2d8>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfe:	b11b      	cbz	r3, 8005e08 <pow+0xe8>
 8005e00:	f000 fff2 	bl	8006de8 <__errno>
 8005e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e06:	6003      	str	r3, [r0, #0]
 8005e08:	ed9d 8b08 	vldr	d8, [sp, #32]
 8005e0c:	eeb0 0a48 	vmov.f32	s0, s16
 8005e10:	eef0 0a68 	vmov.f32	s1, s17
 8005e14:	b00d      	add	sp, #52	; 0x34
 8005e16:	ecbd 8b04 	vpop	{d8-d9}
 8005e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1e:	ec45 4b10 	vmov	d0, r4, r5
 8005e22:	f000 febe 	bl	8006ba2 <finite>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d0f0      	beq.n	8005e0c <pow+0xec>
 8005e2a:	4652      	mov	r2, sl
 8005e2c:	465b      	mov	r3, fp
 8005e2e:	4620      	mov	r0, r4
 8005e30:	4629      	mov	r1, r5
 8005e32:	f7fa fe47 	bl	8000ac4 <__aeabi_dcmplt>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d0e8      	beq.n	8005e0c <pow+0xec>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	9302      	str	r3, [sp, #8]
 8005e3e:	4b6d      	ldr	r3, [pc, #436]	; (8005ff4 <pow+0x2d4>)
 8005e40:	9303      	str	r3, [sp, #12]
 8005e42:	4b6b      	ldr	r3, [pc, #428]	; (8005ff0 <pow+0x2d0>)
 8005e44:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005e48:	f993 3000 	ldrsb.w	r3, [r3]
 8005e4c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005e50:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005e54:	b913      	cbnz	r3, 8005e5c <pow+0x13c>
 8005e56:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005e5a:	e7a1      	b.n	8005da0 <pow+0x80>
 8005e5c:	4967      	ldr	r1, [pc, #412]	; (8005ffc <pow+0x2dc>)
 8005e5e:	2000      	movs	r0, #0
 8005e60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d19b      	bne.n	8005da0 <pow+0x80>
 8005e68:	f000 ffbe 	bl	8006de8 <__errno>
 8005e6c:	2321      	movs	r3, #33	; 0x21
 8005e6e:	6003      	str	r3, [r0, #0]
 8005e70:	e7c4      	b.n	8005dfc <pow+0xdc>
 8005e72:	eeb0 0a48 	vmov.f32	s0, s16
 8005e76:	eef0 0a68 	vmov.f32	s1, s17
 8005e7a:	f000 fe92 	bl	8006ba2 <finite>
 8005e7e:	9001      	str	r0, [sp, #4]
 8005e80:	2800      	cmp	r0, #0
 8005e82:	f040 808a 	bne.w	8005f9a <pow+0x27a>
 8005e86:	ec47 6b10 	vmov	d0, r6, r7
 8005e8a:	f000 fe8a 	bl	8006ba2 <finite>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	f000 8083 	beq.w	8005f9a <pow+0x27a>
 8005e94:	ec45 4b10 	vmov	d0, r4, r5
 8005e98:	f000 fe83 	bl	8006ba2 <finite>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d07c      	beq.n	8005f9a <pow+0x27a>
 8005ea0:	ec53 2b18 	vmov	r2, r3, d8
 8005ea4:	ee18 0a10 	vmov	r0, s16
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	f7fa fe33 	bl	8000b14 <__aeabi_dcmpun>
 8005eae:	f998 9000 	ldrsb.w	r9, [r8]
 8005eb2:	4b50      	ldr	r3, [pc, #320]	; (8005ff4 <pow+0x2d4>)
 8005eb4:	b1b0      	cbz	r0, 8005ee4 <pow+0x1c4>
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	9303      	str	r3, [sp, #12]
 8005eba:	9b01      	ldr	r3, [sp, #4]
 8005ebc:	9202      	str	r2, [sp, #8]
 8005ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8005ec0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ec4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005ec8:	f1b9 0f00 	cmp.w	r9, #0
 8005ecc:	d0c3      	beq.n	8005e56 <pow+0x136>
 8005ece:	4652      	mov	r2, sl
 8005ed0:	465b      	mov	r3, fp
 8005ed2:	4650      	mov	r0, sl
 8005ed4:	4659      	mov	r1, fp
 8005ed6:	f7fa fcad 	bl	8000834 <__aeabi_ddiv>
 8005eda:	f1b9 0f02 	cmp.w	r9, #2
 8005ede:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ee2:	e7c0      	b.n	8005e66 <pow+0x146>
 8005ee4:	2203      	movs	r2, #3
 8005ee6:	9202      	str	r2, [sp, #8]
 8005ee8:	9303      	str	r3, [sp, #12]
 8005eea:	900a      	str	r0, [sp, #40]	; 0x28
 8005eec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ef0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005ef4:	f1b9 0f00 	cmp.w	r9, #0
 8005ef8:	d12c      	bne.n	8005f54 <pow+0x234>
 8005efa:	4b41      	ldr	r3, [pc, #260]	; (8006000 <pow+0x2e0>)
 8005efc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005f00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f04:	4630      	mov	r0, r6
 8005f06:	4652      	mov	r2, sl
 8005f08:	465b      	mov	r3, fp
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	f7fa fdda 	bl	8000ac4 <__aeabi_dcmplt>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d066      	beq.n	8005fe2 <pow+0x2c2>
 8005f14:	2200      	movs	r2, #0
 8005f16:	4b3b      	ldr	r3, [pc, #236]	; (8006004 <pow+0x2e4>)
 8005f18:	4620      	mov	r0, r4
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	f7fa fb60 	bl	80005e0 <__aeabi_dmul>
 8005f20:	4604      	mov	r4, r0
 8005f22:	460d      	mov	r5, r1
 8005f24:	ec45 4b10 	vmov	d0, r4, r5
 8005f28:	f000 fe4e 	bl	8006bc8 <rint>
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	ec53 2b10 	vmov	r2, r3, d0
 8005f32:	4629      	mov	r1, r5
 8005f34:	f7fa fdbc 	bl	8000ab0 <__aeabi_dcmpeq>
 8005f38:	b920      	cbnz	r0, 8005f44 <pow+0x224>
 8005f3a:	4b33      	ldr	r3, [pc, #204]	; (8006008 <pow+0x2e8>)
 8005f3c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005f40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f44:	f998 3000 	ldrsb.w	r3, [r8]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d14a      	bne.n	8005fe2 <pow+0x2c2>
 8005f4c:	f000 ff4c 	bl	8006de8 <__errno>
 8005f50:	2322      	movs	r3, #34	; 0x22
 8005f52:	e78c      	b.n	8005e6e <pow+0x14e>
 8005f54:	4b2d      	ldr	r3, [pc, #180]	; (800600c <pow+0x2ec>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	4652      	mov	r2, sl
 8005f60:	465b      	mov	r3, fp
 8005f62:	4639      	mov	r1, r7
 8005f64:	f7fa fdae 	bl	8000ac4 <__aeabi_dcmplt>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d0eb      	beq.n	8005f44 <pow+0x224>
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	4b25      	ldr	r3, [pc, #148]	; (8006004 <pow+0x2e4>)
 8005f70:	4620      	mov	r0, r4
 8005f72:	4629      	mov	r1, r5
 8005f74:	f7fa fb34 	bl	80005e0 <__aeabi_dmul>
 8005f78:	4604      	mov	r4, r0
 8005f7a:	460d      	mov	r5, r1
 8005f7c:	ec45 4b10 	vmov	d0, r4, r5
 8005f80:	f000 fe22 	bl	8006bc8 <rint>
 8005f84:	4620      	mov	r0, r4
 8005f86:	ec53 2b10 	vmov	r2, r3, d0
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	f7fa fd90 	bl	8000ab0 <__aeabi_dcmpeq>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d1d7      	bne.n	8005f44 <pow+0x224>
 8005f94:	2200      	movs	r2, #0
 8005f96:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <pow+0x2dc>)
 8005f98:	e7d2      	b.n	8005f40 <pow+0x220>
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	ec51 0b18 	vmov	r0, r1, d8
 8005fa2:	f7fa fd85 	bl	8000ab0 <__aeabi_dcmpeq>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f43f af30 	beq.w	8005e0c <pow+0xec>
 8005fac:	ec47 6b10 	vmov	d0, r6, r7
 8005fb0:	f000 fdf7 	bl	8006ba2 <finite>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	f43f af29 	beq.w	8005e0c <pow+0xec>
 8005fba:	ec45 4b10 	vmov	d0, r4, r5
 8005fbe:	f000 fdf0 	bl	8006ba2 <finite>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	f43f af22 	beq.w	8005e0c <pow+0xec>
 8005fc8:	2304      	movs	r3, #4
 8005fca:	9302      	str	r3, [sp, #8]
 8005fcc:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <pow+0x2d4>)
 8005fce:	9303      	str	r3, [sp, #12]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8005fd4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005fd8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005fdc:	ed8d 9b08 	vstr	d9, [sp, #32]
 8005fe0:	e7b0      	b.n	8005f44 <pow+0x224>
 8005fe2:	a802      	add	r0, sp, #8
 8005fe4:	f000 fde5 	bl	8006bb2 <matherr>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	f47f af07 	bne.w	8005dfc <pow+0xdc>
 8005fee:	e7ad      	b.n	8005f4c <pow+0x22c>
 8005ff0:	20000070 	.word	0x20000070
 8005ff4:	08006f7f 	.word	0x08006f7f
 8005ff8:	3ff00000 	.word	0x3ff00000
 8005ffc:	fff00000 	.word	0xfff00000
 8006000:	47efffff 	.word	0x47efffff
 8006004:	3fe00000 	.word	0x3fe00000
 8006008:	c7efffff 	.word	0xc7efffff
 800600c:	7ff00000 	.word	0x7ff00000

08006010 <__ieee754_pow>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	b091      	sub	sp, #68	; 0x44
 8006016:	ed8d 1b00 	vstr	d1, [sp]
 800601a:	e89d 0204 	ldmia.w	sp, {r2, r9}
 800601e:	ec57 6b10 	vmov	r6, r7, d0
 8006022:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006026:	ea58 0302 	orrs.w	r3, r8, r2
 800602a:	ee10 aa10 	vmov	sl, s0
 800602e:	463d      	mov	r5, r7
 8006030:	f000 84bd 	beq.w	80069ae <__ieee754_pow+0x99e>
 8006034:	4b78      	ldr	r3, [pc, #480]	; (8006218 <__ieee754_pow+0x208>)
 8006036:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800603a:	429c      	cmp	r4, r3
 800603c:	dc09      	bgt.n	8006052 <__ieee754_pow+0x42>
 800603e:	d103      	bne.n	8006048 <__ieee754_pow+0x38>
 8006040:	b93e      	cbnz	r6, 8006052 <__ieee754_pow+0x42>
 8006042:	45a0      	cmp	r8, r4
 8006044:	dc0d      	bgt.n	8006062 <__ieee754_pow+0x52>
 8006046:	e001      	b.n	800604c <__ieee754_pow+0x3c>
 8006048:	4598      	cmp	r8, r3
 800604a:	dc02      	bgt.n	8006052 <__ieee754_pow+0x42>
 800604c:	4598      	cmp	r8, r3
 800604e:	d10e      	bne.n	800606e <__ieee754_pow+0x5e>
 8006050:	b16a      	cbz	r2, 800606e <__ieee754_pow+0x5e>
 8006052:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006056:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800605a:	ea54 030a 	orrs.w	r3, r4, sl
 800605e:	f000 84a6 	beq.w	80069ae <__ieee754_pow+0x99e>
 8006062:	486e      	ldr	r0, [pc, #440]	; (800621c <__ieee754_pow+0x20c>)
 8006064:	b011      	add	sp, #68	; 0x44
 8006066:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606a:	f000 bda5 	b.w	8006bb8 <nan>
 800606e:	2d00      	cmp	r5, #0
 8006070:	da53      	bge.n	800611a <__ieee754_pow+0x10a>
 8006072:	4b6b      	ldr	r3, [pc, #428]	; (8006220 <__ieee754_pow+0x210>)
 8006074:	4598      	cmp	r8, r3
 8006076:	dc4d      	bgt.n	8006114 <__ieee754_pow+0x104>
 8006078:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800607c:	4598      	cmp	r8, r3
 800607e:	dd4c      	ble.n	800611a <__ieee754_pow+0x10a>
 8006080:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006084:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006088:	2b14      	cmp	r3, #20
 800608a:	dd26      	ble.n	80060da <__ieee754_pow+0xca>
 800608c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006090:	fa22 f103 	lsr.w	r1, r2, r3
 8006094:	fa01 f303 	lsl.w	r3, r1, r3
 8006098:	429a      	cmp	r2, r3
 800609a:	d13e      	bne.n	800611a <__ieee754_pow+0x10a>
 800609c:	f001 0101 	and.w	r1, r1, #1
 80060a0:	f1c1 0b02 	rsb	fp, r1, #2
 80060a4:	2a00      	cmp	r2, #0
 80060a6:	d15b      	bne.n	8006160 <__ieee754_pow+0x150>
 80060a8:	4b5b      	ldr	r3, [pc, #364]	; (8006218 <__ieee754_pow+0x208>)
 80060aa:	4598      	cmp	r8, r3
 80060ac:	d124      	bne.n	80060f8 <__ieee754_pow+0xe8>
 80060ae:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80060b2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80060b6:	ea53 030a 	orrs.w	r3, r3, sl
 80060ba:	f000 8478 	beq.w	80069ae <__ieee754_pow+0x99e>
 80060be:	4b59      	ldr	r3, [pc, #356]	; (8006224 <__ieee754_pow+0x214>)
 80060c0:	429c      	cmp	r4, r3
 80060c2:	dd2d      	ble.n	8006120 <__ieee754_pow+0x110>
 80060c4:	f1b9 0f00 	cmp.w	r9, #0
 80060c8:	f280 8475 	bge.w	80069b6 <__ieee754_pow+0x9a6>
 80060cc:	2000      	movs	r0, #0
 80060ce:	2100      	movs	r1, #0
 80060d0:	ec41 0b10 	vmov	d0, r0, r1
 80060d4:	b011      	add	sp, #68	; 0x44
 80060d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060da:	2a00      	cmp	r2, #0
 80060dc:	d13e      	bne.n	800615c <__ieee754_pow+0x14c>
 80060de:	f1c3 0314 	rsb	r3, r3, #20
 80060e2:	fa48 f103 	asr.w	r1, r8, r3
 80060e6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ea:	4598      	cmp	r8, r3
 80060ec:	f040 846b 	bne.w	80069c6 <__ieee754_pow+0x9b6>
 80060f0:	f001 0101 	and.w	r1, r1, #1
 80060f4:	f1c1 0b02 	rsb	fp, r1, #2
 80060f8:	4b4b      	ldr	r3, [pc, #300]	; (8006228 <__ieee754_pow+0x218>)
 80060fa:	4598      	cmp	r8, r3
 80060fc:	d118      	bne.n	8006130 <__ieee754_pow+0x120>
 80060fe:	f1b9 0f00 	cmp.w	r9, #0
 8006102:	f280 845c 	bge.w	80069be <__ieee754_pow+0x9ae>
 8006106:	4948      	ldr	r1, [pc, #288]	; (8006228 <__ieee754_pow+0x218>)
 8006108:	4632      	mov	r2, r6
 800610a:	463b      	mov	r3, r7
 800610c:	2000      	movs	r0, #0
 800610e:	f7fa fb91 	bl	8000834 <__aeabi_ddiv>
 8006112:	e7dd      	b.n	80060d0 <__ieee754_pow+0xc0>
 8006114:	f04f 0b02 	mov.w	fp, #2
 8006118:	e7c4      	b.n	80060a4 <__ieee754_pow+0x94>
 800611a:	f04f 0b00 	mov.w	fp, #0
 800611e:	e7c1      	b.n	80060a4 <__ieee754_pow+0x94>
 8006120:	f1b9 0f00 	cmp.w	r9, #0
 8006124:	dad2      	bge.n	80060cc <__ieee754_pow+0xbc>
 8006126:	e89d 0009 	ldmia.w	sp, {r0, r3}
 800612a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800612e:	e7cf      	b.n	80060d0 <__ieee754_pow+0xc0>
 8006130:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006134:	d106      	bne.n	8006144 <__ieee754_pow+0x134>
 8006136:	4632      	mov	r2, r6
 8006138:	463b      	mov	r3, r7
 800613a:	4610      	mov	r0, r2
 800613c:	4619      	mov	r1, r3
 800613e:	f7fa fa4f 	bl	80005e0 <__aeabi_dmul>
 8006142:	e7c5      	b.n	80060d0 <__ieee754_pow+0xc0>
 8006144:	4b39      	ldr	r3, [pc, #228]	; (800622c <__ieee754_pow+0x21c>)
 8006146:	4599      	cmp	r9, r3
 8006148:	d10a      	bne.n	8006160 <__ieee754_pow+0x150>
 800614a:	2d00      	cmp	r5, #0
 800614c:	db08      	blt.n	8006160 <__ieee754_pow+0x150>
 800614e:	ec47 6b10 	vmov	d0, r6, r7
 8006152:	b011      	add	sp, #68	; 0x44
 8006154:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006158:	f000 bc6c 	b.w	8006a34 <__ieee754_sqrt>
 800615c:	f04f 0b00 	mov.w	fp, #0
 8006160:	ec47 6b10 	vmov	d0, r6, r7
 8006164:	f000 fd16 	bl	8006b94 <fabs>
 8006168:	ec51 0b10 	vmov	r0, r1, d0
 800616c:	f1ba 0f00 	cmp.w	sl, #0
 8006170:	d127      	bne.n	80061c2 <__ieee754_pow+0x1b2>
 8006172:	b124      	cbz	r4, 800617e <__ieee754_pow+0x16e>
 8006174:	4b2c      	ldr	r3, [pc, #176]	; (8006228 <__ieee754_pow+0x218>)
 8006176:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800617a:	429a      	cmp	r2, r3
 800617c:	d121      	bne.n	80061c2 <__ieee754_pow+0x1b2>
 800617e:	f1b9 0f00 	cmp.w	r9, #0
 8006182:	da05      	bge.n	8006190 <__ieee754_pow+0x180>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	2000      	movs	r0, #0
 800618a:	4927      	ldr	r1, [pc, #156]	; (8006228 <__ieee754_pow+0x218>)
 800618c:	f7fa fb52 	bl	8000834 <__aeabi_ddiv>
 8006190:	2d00      	cmp	r5, #0
 8006192:	da9d      	bge.n	80060d0 <__ieee754_pow+0xc0>
 8006194:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006198:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800619c:	ea54 030b 	orrs.w	r3, r4, fp
 80061a0:	d108      	bne.n	80061b4 <__ieee754_pow+0x1a4>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	4610      	mov	r0, r2
 80061a8:	4619      	mov	r1, r3
 80061aa:	f7fa f865 	bl	8000278 <__aeabi_dsub>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	e7ac      	b.n	800610e <__ieee754_pow+0xfe>
 80061b4:	f1bb 0f01 	cmp.w	fp, #1
 80061b8:	d18a      	bne.n	80060d0 <__ieee754_pow+0xc0>
 80061ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061be:	4619      	mov	r1, r3
 80061c0:	e786      	b.n	80060d0 <__ieee754_pow+0xc0>
 80061c2:	0fed      	lsrs	r5, r5, #31
 80061c4:	1e6b      	subs	r3, r5, #1
 80061c6:	930d      	str	r3, [sp, #52]	; 0x34
 80061c8:	ea5b 0303 	orrs.w	r3, fp, r3
 80061cc:	d102      	bne.n	80061d4 <__ieee754_pow+0x1c4>
 80061ce:	4632      	mov	r2, r6
 80061d0:	463b      	mov	r3, r7
 80061d2:	e7e8      	b.n	80061a6 <__ieee754_pow+0x196>
 80061d4:	4b16      	ldr	r3, [pc, #88]	; (8006230 <__ieee754_pow+0x220>)
 80061d6:	4598      	cmp	r8, r3
 80061d8:	f340 80fe 	ble.w	80063d8 <__ieee754_pow+0x3c8>
 80061dc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80061e0:	4598      	cmp	r8, r3
 80061e2:	dd0a      	ble.n	80061fa <__ieee754_pow+0x1ea>
 80061e4:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <__ieee754_pow+0x214>)
 80061e6:	429c      	cmp	r4, r3
 80061e8:	dc0d      	bgt.n	8006206 <__ieee754_pow+0x1f6>
 80061ea:	f1b9 0f00 	cmp.w	r9, #0
 80061ee:	f6bf af6d 	bge.w	80060cc <__ieee754_pow+0xbc>
 80061f2:	a307      	add	r3, pc, #28	; (adr r3, 8006210 <__ieee754_pow+0x200>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	e79f      	b.n	800613a <__ieee754_pow+0x12a>
 80061fa:	4b0e      	ldr	r3, [pc, #56]	; (8006234 <__ieee754_pow+0x224>)
 80061fc:	429c      	cmp	r4, r3
 80061fe:	ddf4      	ble.n	80061ea <__ieee754_pow+0x1da>
 8006200:	4b09      	ldr	r3, [pc, #36]	; (8006228 <__ieee754_pow+0x218>)
 8006202:	429c      	cmp	r4, r3
 8006204:	dd18      	ble.n	8006238 <__ieee754_pow+0x228>
 8006206:	f1b9 0f00 	cmp.w	r9, #0
 800620a:	dcf2      	bgt.n	80061f2 <__ieee754_pow+0x1e2>
 800620c:	e75e      	b.n	80060cc <__ieee754_pow+0xbc>
 800620e:	bf00      	nop
 8006210:	8800759c 	.word	0x8800759c
 8006214:	7e37e43c 	.word	0x7e37e43c
 8006218:	7ff00000 	.word	0x7ff00000
 800621c:	08006f51 	.word	0x08006f51
 8006220:	433fffff 	.word	0x433fffff
 8006224:	3fefffff 	.word	0x3fefffff
 8006228:	3ff00000 	.word	0x3ff00000
 800622c:	3fe00000 	.word	0x3fe00000
 8006230:	41e00000 	.word	0x41e00000
 8006234:	3feffffe 	.word	0x3feffffe
 8006238:	2200      	movs	r2, #0
 800623a:	4b63      	ldr	r3, [pc, #396]	; (80063c8 <__ieee754_pow+0x3b8>)
 800623c:	f7fa f81c 	bl	8000278 <__aeabi_dsub>
 8006240:	a355      	add	r3, pc, #340	; (adr r3, 8006398 <__ieee754_pow+0x388>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	4604      	mov	r4, r0
 8006248:	460d      	mov	r5, r1
 800624a:	f7fa f9c9 	bl	80005e0 <__aeabi_dmul>
 800624e:	a354      	add	r3, pc, #336	; (adr r3, 80063a0 <__ieee754_pow+0x390>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	4606      	mov	r6, r0
 8006256:	460f      	mov	r7, r1
 8006258:	4620      	mov	r0, r4
 800625a:	4629      	mov	r1, r5
 800625c:	f7fa f9c0 	bl	80005e0 <__aeabi_dmul>
 8006260:	2200      	movs	r2, #0
 8006262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006266:	4b59      	ldr	r3, [pc, #356]	; (80063cc <__ieee754_pow+0x3bc>)
 8006268:	4620      	mov	r0, r4
 800626a:	4629      	mov	r1, r5
 800626c:	f7fa f9b8 	bl	80005e0 <__aeabi_dmul>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	a14c      	add	r1, pc, #304	; (adr r1, 80063a8 <__ieee754_pow+0x398>)
 8006276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800627a:	f7f9 fffd 	bl	8000278 <__aeabi_dsub>
 800627e:	4622      	mov	r2, r4
 8006280:	462b      	mov	r3, r5
 8006282:	f7fa f9ad 	bl	80005e0 <__aeabi_dmul>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	2000      	movs	r0, #0
 800628c:	4950      	ldr	r1, [pc, #320]	; (80063d0 <__ieee754_pow+0x3c0>)
 800628e:	f7f9 fff3 	bl	8000278 <__aeabi_dsub>
 8006292:	4622      	mov	r2, r4
 8006294:	462b      	mov	r3, r5
 8006296:	4680      	mov	r8, r0
 8006298:	4689      	mov	r9, r1
 800629a:	4620      	mov	r0, r4
 800629c:	4629      	mov	r1, r5
 800629e:	f7fa f99f 	bl	80005e0 <__aeabi_dmul>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4640      	mov	r0, r8
 80062a8:	4649      	mov	r1, r9
 80062aa:	f7fa f999 	bl	80005e0 <__aeabi_dmul>
 80062ae:	a340      	add	r3, pc, #256	; (adr r3, 80063b0 <__ieee754_pow+0x3a0>)
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f7fa f994 	bl	80005e0 <__aeabi_dmul>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062c0:	f7f9 ffda 	bl	8000278 <__aeabi_dsub>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4604      	mov	r4, r0
 80062ca:	460d      	mov	r5, r1
 80062cc:	4630      	mov	r0, r6
 80062ce:	4639      	mov	r1, r7
 80062d0:	f7f9 ffd4 	bl	800027c <__adddf3>
 80062d4:	2000      	movs	r0, #0
 80062d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062da:	4632      	mov	r2, r6
 80062dc:	463b      	mov	r3, r7
 80062de:	f7f9 ffcb 	bl	8000278 <__aeabi_dsub>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4620      	mov	r0, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	f7f9 ffc5 	bl	8000278 <__aeabi_dsub>
 80062ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062f0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80062f4:	4313      	orrs	r3, r2
 80062f6:	4606      	mov	r6, r0
 80062f8:	460f      	mov	r7, r1
 80062fa:	f040 81eb 	bne.w	80066d4 <__ieee754_pow+0x6c4>
 80062fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80063b8 <__ieee754_pow+0x3a8>
 8006302:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006306:	2400      	movs	r4, #0
 8006308:	4622      	mov	r2, r4
 800630a:	462b      	mov	r3, r5
 800630c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006310:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006314:	f7f9 ffb0 	bl	8000278 <__aeabi_dsub>
 8006318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800631c:	f7fa f960 	bl	80005e0 <__aeabi_dmul>
 8006320:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006324:	4680      	mov	r8, r0
 8006326:	4689      	mov	r9, r1
 8006328:	4630      	mov	r0, r6
 800632a:	4639      	mov	r1, r7
 800632c:	f7fa f958 	bl	80005e0 <__aeabi_dmul>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4640      	mov	r0, r8
 8006336:	4649      	mov	r1, r9
 8006338:	f7f9 ffa0 	bl	800027c <__adddf3>
 800633c:	4622      	mov	r2, r4
 800633e:	462b      	mov	r3, r5
 8006340:	4680      	mov	r8, r0
 8006342:	4689      	mov	r9, r1
 8006344:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006348:	f7fa f94a 	bl	80005e0 <__aeabi_dmul>
 800634c:	460b      	mov	r3, r1
 800634e:	4604      	mov	r4, r0
 8006350:	460d      	mov	r5, r1
 8006352:	4602      	mov	r2, r0
 8006354:	4649      	mov	r1, r9
 8006356:	4640      	mov	r0, r8
 8006358:	e9cd 4500 	strd	r4, r5, [sp]
 800635c:	f7f9 ff8e 	bl	800027c <__adddf3>
 8006360:	4b1c      	ldr	r3, [pc, #112]	; (80063d4 <__ieee754_pow+0x3c4>)
 8006362:	4299      	cmp	r1, r3
 8006364:	4606      	mov	r6, r0
 8006366:	460f      	mov	r7, r1
 8006368:	468b      	mov	fp, r1
 800636a:	f340 82f7 	ble.w	800695c <__ieee754_pow+0x94c>
 800636e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006372:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006376:	4303      	orrs	r3, r0
 8006378:	f000 81ea 	beq.w	8006750 <__ieee754_pow+0x740>
 800637c:	a310      	add	r3, pc, #64	; (adr r3, 80063c0 <__ieee754_pow+0x3b0>)
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006386:	f7fa f92b 	bl	80005e0 <__aeabi_dmul>
 800638a:	a30d      	add	r3, pc, #52	; (adr r3, 80063c0 <__ieee754_pow+0x3b0>)
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	e6d5      	b.n	800613e <__ieee754_pow+0x12e>
 8006392:	bf00      	nop
 8006394:	f3af 8000 	nop.w
 8006398:	60000000 	.word	0x60000000
 800639c:	3ff71547 	.word	0x3ff71547
 80063a0:	f85ddf44 	.word	0xf85ddf44
 80063a4:	3e54ae0b 	.word	0x3e54ae0b
 80063a8:	55555555 	.word	0x55555555
 80063ac:	3fd55555 	.word	0x3fd55555
 80063b0:	652b82fe 	.word	0x652b82fe
 80063b4:	3ff71547 	.word	0x3ff71547
 80063b8:	00000000 	.word	0x00000000
 80063bc:	bff00000 	.word	0xbff00000
 80063c0:	8800759c 	.word	0x8800759c
 80063c4:	7e37e43c 	.word	0x7e37e43c
 80063c8:	3ff00000 	.word	0x3ff00000
 80063cc:	3fd00000 	.word	0x3fd00000
 80063d0:	3fe00000 	.word	0x3fe00000
 80063d4:	408fffff 	.word	0x408fffff
 80063d8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	da05      	bge.n	80063ee <__ieee754_pow+0x3de>
 80063e2:	4bd3      	ldr	r3, [pc, #844]	; (8006730 <__ieee754_pow+0x720>)
 80063e4:	f7fa f8fc 	bl	80005e0 <__aeabi_dmul>
 80063e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80063ec:	460c      	mov	r4, r1
 80063ee:	1523      	asrs	r3, r4, #20
 80063f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80063f4:	4413      	add	r3, r2
 80063f6:	9307      	str	r3, [sp, #28]
 80063f8:	4bce      	ldr	r3, [pc, #824]	; (8006734 <__ieee754_pow+0x724>)
 80063fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80063fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006402:	429c      	cmp	r4, r3
 8006404:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006408:	dd08      	ble.n	800641c <__ieee754_pow+0x40c>
 800640a:	4bcb      	ldr	r3, [pc, #812]	; (8006738 <__ieee754_pow+0x728>)
 800640c:	429c      	cmp	r4, r3
 800640e:	f340 815e 	ble.w	80066ce <__ieee754_pow+0x6be>
 8006412:	9b07      	ldr	r3, [sp, #28]
 8006414:	3301      	adds	r3, #1
 8006416:	9307      	str	r3, [sp, #28]
 8006418:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800641c:	f04f 0a00 	mov.w	sl, #0
 8006420:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006424:	930c      	str	r3, [sp, #48]	; 0x30
 8006426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006428:	4bc4      	ldr	r3, [pc, #784]	; (800673c <__ieee754_pow+0x72c>)
 800642a:	4413      	add	r3, r2
 800642c:	ed93 7b00 	vldr	d7, [r3]
 8006430:	4629      	mov	r1, r5
 8006432:	ec53 2b17 	vmov	r2, r3, d7
 8006436:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800643a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800643e:	f7f9 ff1b 	bl	8000278 <__aeabi_dsub>
 8006442:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006446:	4606      	mov	r6, r0
 8006448:	460f      	mov	r7, r1
 800644a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800644e:	f7f9 ff15 	bl	800027c <__adddf3>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	2000      	movs	r0, #0
 8006458:	49b9      	ldr	r1, [pc, #740]	; (8006740 <__ieee754_pow+0x730>)
 800645a:	f7fa f9eb 	bl	8000834 <__aeabi_ddiv>
 800645e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4630      	mov	r0, r6
 8006468:	4639      	mov	r1, r7
 800646a:	f7fa f8b9 	bl	80005e0 <__aeabi_dmul>
 800646e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006472:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006476:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800647a:	2300      	movs	r3, #0
 800647c:	9302      	str	r3, [sp, #8]
 800647e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006482:	106d      	asrs	r5, r5, #1
 8006484:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006488:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800648c:	2200      	movs	r2, #0
 800648e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006492:	4640      	mov	r0, r8
 8006494:	4649      	mov	r1, r9
 8006496:	4614      	mov	r4, r2
 8006498:	461d      	mov	r5, r3
 800649a:	f7fa f8a1 	bl	80005e0 <__aeabi_dmul>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4630      	mov	r0, r6
 80064a4:	4639      	mov	r1, r7
 80064a6:	f7f9 fee7 	bl	8000278 <__aeabi_dsub>
 80064aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064ae:	4606      	mov	r6, r0
 80064b0:	460f      	mov	r7, r1
 80064b2:	4620      	mov	r0, r4
 80064b4:	4629      	mov	r1, r5
 80064b6:	f7f9 fedf 	bl	8000278 <__aeabi_dsub>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80064c2:	f7f9 fed9 	bl	8000278 <__aeabi_dsub>
 80064c6:	4642      	mov	r2, r8
 80064c8:	464b      	mov	r3, r9
 80064ca:	f7fa f889 	bl	80005e0 <__aeabi_dmul>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4630      	mov	r0, r6
 80064d4:	4639      	mov	r1, r7
 80064d6:	f7f9 fecf 	bl	8000278 <__aeabi_dsub>
 80064da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80064de:	f7fa f87f 	bl	80005e0 <__aeabi_dmul>
 80064e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80064ea:	4610      	mov	r0, r2
 80064ec:	4619      	mov	r1, r3
 80064ee:	f7fa f877 	bl	80005e0 <__aeabi_dmul>
 80064f2:	a37b      	add	r3, pc, #492	; (adr r3, 80066e0 <__ieee754_pow+0x6d0>)
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	4604      	mov	r4, r0
 80064fa:	460d      	mov	r5, r1
 80064fc:	f7fa f870 	bl	80005e0 <__aeabi_dmul>
 8006500:	a379      	add	r3, pc, #484	; (adr r3, 80066e8 <__ieee754_pow+0x6d8>)
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	f7f9 feb9 	bl	800027c <__adddf3>
 800650a:	4622      	mov	r2, r4
 800650c:	462b      	mov	r3, r5
 800650e:	f7fa f867 	bl	80005e0 <__aeabi_dmul>
 8006512:	a377      	add	r3, pc, #476	; (adr r3, 80066f0 <__ieee754_pow+0x6e0>)
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	f7f9 feb0 	bl	800027c <__adddf3>
 800651c:	4622      	mov	r2, r4
 800651e:	462b      	mov	r3, r5
 8006520:	f7fa f85e 	bl	80005e0 <__aeabi_dmul>
 8006524:	a374      	add	r3, pc, #464	; (adr r3, 80066f8 <__ieee754_pow+0x6e8>)
 8006526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652a:	f7f9 fea7 	bl	800027c <__adddf3>
 800652e:	4622      	mov	r2, r4
 8006530:	462b      	mov	r3, r5
 8006532:	f7fa f855 	bl	80005e0 <__aeabi_dmul>
 8006536:	a372      	add	r3, pc, #456	; (adr r3, 8006700 <__ieee754_pow+0x6f0>)
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	f7f9 fe9e 	bl	800027c <__adddf3>
 8006540:	4622      	mov	r2, r4
 8006542:	462b      	mov	r3, r5
 8006544:	f7fa f84c 	bl	80005e0 <__aeabi_dmul>
 8006548:	a36f      	add	r3, pc, #444	; (adr r3, 8006708 <__ieee754_pow+0x6f8>)
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	f7f9 fe95 	bl	800027c <__adddf3>
 8006552:	4622      	mov	r2, r4
 8006554:	4606      	mov	r6, r0
 8006556:	460f      	mov	r7, r1
 8006558:	462b      	mov	r3, r5
 800655a:	4620      	mov	r0, r4
 800655c:	4629      	mov	r1, r5
 800655e:	f7fa f83f 	bl	80005e0 <__aeabi_dmul>
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4630      	mov	r0, r6
 8006568:	4639      	mov	r1, r7
 800656a:	f7fa f839 	bl	80005e0 <__aeabi_dmul>
 800656e:	4642      	mov	r2, r8
 8006570:	4604      	mov	r4, r0
 8006572:	460d      	mov	r5, r1
 8006574:	464b      	mov	r3, r9
 8006576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800657a:	f7f9 fe7f 	bl	800027c <__adddf3>
 800657e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006582:	f7fa f82d 	bl	80005e0 <__aeabi_dmul>
 8006586:	4622      	mov	r2, r4
 8006588:	462b      	mov	r3, r5
 800658a:	f7f9 fe77 	bl	800027c <__adddf3>
 800658e:	4642      	mov	r2, r8
 8006590:	4606      	mov	r6, r0
 8006592:	460f      	mov	r7, r1
 8006594:	464b      	mov	r3, r9
 8006596:	4640      	mov	r0, r8
 8006598:	4649      	mov	r1, r9
 800659a:	f7fa f821 	bl	80005e0 <__aeabi_dmul>
 800659e:	2200      	movs	r2, #0
 80065a0:	4b68      	ldr	r3, [pc, #416]	; (8006744 <__ieee754_pow+0x734>)
 80065a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065a6:	f7f9 fe69 	bl	800027c <__adddf3>
 80065aa:	4632      	mov	r2, r6
 80065ac:	463b      	mov	r3, r7
 80065ae:	f7f9 fe65 	bl	800027c <__adddf3>
 80065b2:	9802      	ldr	r0, [sp, #8]
 80065b4:	460d      	mov	r5, r1
 80065b6:	4604      	mov	r4, r0
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4640      	mov	r0, r8
 80065be:	4649      	mov	r1, r9
 80065c0:	f7fa f80e 	bl	80005e0 <__aeabi_dmul>
 80065c4:	2200      	movs	r2, #0
 80065c6:	4680      	mov	r8, r0
 80065c8:	4689      	mov	r9, r1
 80065ca:	4b5e      	ldr	r3, [pc, #376]	; (8006744 <__ieee754_pow+0x734>)
 80065cc:	4620      	mov	r0, r4
 80065ce:	4629      	mov	r1, r5
 80065d0:	f7f9 fe52 	bl	8000278 <__aeabi_dsub>
 80065d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065d8:	f7f9 fe4e 	bl	8000278 <__aeabi_dsub>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4630      	mov	r0, r6
 80065e2:	4639      	mov	r1, r7
 80065e4:	f7f9 fe48 	bl	8000278 <__aeabi_dsub>
 80065e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ec:	f7f9 fff8 	bl	80005e0 <__aeabi_dmul>
 80065f0:	4622      	mov	r2, r4
 80065f2:	4606      	mov	r6, r0
 80065f4:	460f      	mov	r7, r1
 80065f6:	462b      	mov	r3, r5
 80065f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80065fc:	f7f9 fff0 	bl	80005e0 <__aeabi_dmul>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4630      	mov	r0, r6
 8006606:	4639      	mov	r1, r7
 8006608:	f7f9 fe38 	bl	800027c <__adddf3>
 800660c:	4606      	mov	r6, r0
 800660e:	460f      	mov	r7, r1
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4640      	mov	r0, r8
 8006616:	4649      	mov	r1, r9
 8006618:	f7f9 fe30 	bl	800027c <__adddf3>
 800661c:	9802      	ldr	r0, [sp, #8]
 800661e:	a33c      	add	r3, pc, #240	; (adr r3, 8006710 <__ieee754_pow+0x700>)
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	4604      	mov	r4, r0
 8006626:	460d      	mov	r5, r1
 8006628:	f7f9 ffda 	bl	80005e0 <__aeabi_dmul>
 800662c:	4642      	mov	r2, r8
 800662e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006632:	464b      	mov	r3, r9
 8006634:	4620      	mov	r0, r4
 8006636:	4629      	mov	r1, r5
 8006638:	f7f9 fe1e 	bl	8000278 <__aeabi_dsub>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4630      	mov	r0, r6
 8006642:	4639      	mov	r1, r7
 8006644:	f7f9 fe18 	bl	8000278 <__aeabi_dsub>
 8006648:	a333      	add	r3, pc, #204	; (adr r3, 8006718 <__ieee754_pow+0x708>)
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f7f9 ffc7 	bl	80005e0 <__aeabi_dmul>
 8006652:	a333      	add	r3, pc, #204	; (adr r3, 8006720 <__ieee754_pow+0x710>)
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	4606      	mov	r6, r0
 800665a:	460f      	mov	r7, r1
 800665c:	4620      	mov	r0, r4
 800665e:	4629      	mov	r1, r5
 8006660:	f7f9 ffbe 	bl	80005e0 <__aeabi_dmul>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4630      	mov	r0, r6
 800666a:	4639      	mov	r1, r7
 800666c:	f7f9 fe06 	bl	800027c <__adddf3>
 8006670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006672:	4b35      	ldr	r3, [pc, #212]	; (8006748 <__ieee754_pow+0x738>)
 8006674:	4413      	add	r3, r2
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	f7f9 fdff 	bl	800027c <__adddf3>
 800667e:	4604      	mov	r4, r0
 8006680:	9807      	ldr	r0, [sp, #28]
 8006682:	460d      	mov	r5, r1
 8006684:	f7f9 ff46 	bl	8000514 <__aeabi_i2d>
 8006688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800668a:	4b30      	ldr	r3, [pc, #192]	; (800674c <__ieee754_pow+0x73c>)
 800668c:	4413      	add	r3, r2
 800668e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006692:	4606      	mov	r6, r0
 8006694:	460f      	mov	r7, r1
 8006696:	4622      	mov	r2, r4
 8006698:	462b      	mov	r3, r5
 800669a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800669e:	f7f9 fded 	bl	800027c <__adddf3>
 80066a2:	4642      	mov	r2, r8
 80066a4:	464b      	mov	r3, r9
 80066a6:	f7f9 fde9 	bl	800027c <__adddf3>
 80066aa:	4632      	mov	r2, r6
 80066ac:	463b      	mov	r3, r7
 80066ae:	f7f9 fde5 	bl	800027c <__adddf3>
 80066b2:	9802      	ldr	r0, [sp, #8]
 80066b4:	4632      	mov	r2, r6
 80066b6:	463b      	mov	r3, r7
 80066b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066bc:	f7f9 fddc 	bl	8000278 <__aeabi_dsub>
 80066c0:	4642      	mov	r2, r8
 80066c2:	464b      	mov	r3, r9
 80066c4:	f7f9 fdd8 	bl	8000278 <__aeabi_dsub>
 80066c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066cc:	e607      	b.n	80062de <__ieee754_pow+0x2ce>
 80066ce:	f04f 0a01 	mov.w	sl, #1
 80066d2:	e6a5      	b.n	8006420 <__ieee754_pow+0x410>
 80066d4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006728 <__ieee754_pow+0x718>
 80066d8:	e613      	b.n	8006302 <__ieee754_pow+0x2f2>
 80066da:	bf00      	nop
 80066dc:	f3af 8000 	nop.w
 80066e0:	4a454eef 	.word	0x4a454eef
 80066e4:	3fca7e28 	.word	0x3fca7e28
 80066e8:	93c9db65 	.word	0x93c9db65
 80066ec:	3fcd864a 	.word	0x3fcd864a
 80066f0:	a91d4101 	.word	0xa91d4101
 80066f4:	3fd17460 	.word	0x3fd17460
 80066f8:	518f264d 	.word	0x518f264d
 80066fc:	3fd55555 	.word	0x3fd55555
 8006700:	db6fabff 	.word	0xdb6fabff
 8006704:	3fdb6db6 	.word	0x3fdb6db6
 8006708:	33333303 	.word	0x33333303
 800670c:	3fe33333 	.word	0x3fe33333
 8006710:	e0000000 	.word	0xe0000000
 8006714:	3feec709 	.word	0x3feec709
 8006718:	dc3a03fd 	.word	0xdc3a03fd
 800671c:	3feec709 	.word	0x3feec709
 8006720:	145b01f5 	.word	0x145b01f5
 8006724:	be3e2fe0 	.word	0xbe3e2fe0
 8006728:	00000000 	.word	0x00000000
 800672c:	3ff00000 	.word	0x3ff00000
 8006730:	43400000 	.word	0x43400000
 8006734:	0003988e 	.word	0x0003988e
 8006738:	000bb679 	.word	0x000bb679
 800673c:	08006f88 	.word	0x08006f88
 8006740:	3ff00000 	.word	0x3ff00000
 8006744:	40080000 	.word	0x40080000
 8006748:	08006fa8 	.word	0x08006fa8
 800674c:	08006f98 	.word	0x08006f98
 8006750:	a3b6      	add	r3, pc, #728	; (adr r3, 8006a2c <__ieee754_pow+0xa1c>)
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	4640      	mov	r0, r8
 8006758:	4649      	mov	r1, r9
 800675a:	f7f9 fd8f 	bl	800027c <__adddf3>
 800675e:	4622      	mov	r2, r4
 8006760:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006764:	462b      	mov	r3, r5
 8006766:	4630      	mov	r0, r6
 8006768:	4639      	mov	r1, r7
 800676a:	f7f9 fd85 	bl	8000278 <__aeabi_dsub>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006776:	f7fa f9c3 	bl	8000b00 <__aeabi_dcmpgt>
 800677a:	2800      	cmp	r0, #0
 800677c:	f47f adfe 	bne.w	800637c <__ieee754_pow+0x36c>
 8006780:	4aa5      	ldr	r2, [pc, #660]	; (8006a18 <__ieee754_pow+0xa08>)
 8006782:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006786:	4293      	cmp	r3, r2
 8006788:	f340 810c 	ble.w	80069a4 <__ieee754_pow+0x994>
 800678c:	151b      	asrs	r3, r3, #20
 800678e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006792:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006796:	fa4a f303 	asr.w	r3, sl, r3
 800679a:	445b      	add	r3, fp
 800679c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80067a0:	4e9e      	ldr	r6, [pc, #632]	; (8006a1c <__ieee754_pow+0xa0c>)
 80067a2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80067a6:	4116      	asrs	r6, r2
 80067a8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80067ac:	2000      	movs	r0, #0
 80067ae:	ea23 0106 	bic.w	r1, r3, r6
 80067b2:	f1c2 0214 	rsb	r2, r2, #20
 80067b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80067ba:	fa4a fa02 	asr.w	sl, sl, r2
 80067be:	f1bb 0f00 	cmp.w	fp, #0
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4620      	mov	r0, r4
 80067c8:	4629      	mov	r1, r5
 80067ca:	bfb8      	it	lt
 80067cc:	f1ca 0a00 	rsblt	sl, sl, #0
 80067d0:	f7f9 fd52 	bl	8000278 <__aeabi_dsub>
 80067d4:	e9cd 0100 	strd	r0, r1, [sp]
 80067d8:	4642      	mov	r2, r8
 80067da:	464b      	mov	r3, r9
 80067dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067e0:	f7f9 fd4c 	bl	800027c <__adddf3>
 80067e4:	2000      	movs	r0, #0
 80067e6:	a37a      	add	r3, pc, #488	; (adr r3, 80069d0 <__ieee754_pow+0x9c0>)
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	4604      	mov	r4, r0
 80067ee:	460d      	mov	r5, r1
 80067f0:	f7f9 fef6 	bl	80005e0 <__aeabi_dmul>
 80067f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067f8:	4606      	mov	r6, r0
 80067fa:	460f      	mov	r7, r1
 80067fc:	4620      	mov	r0, r4
 80067fe:	4629      	mov	r1, r5
 8006800:	f7f9 fd3a 	bl	8000278 <__aeabi_dsub>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4640      	mov	r0, r8
 800680a:	4649      	mov	r1, r9
 800680c:	f7f9 fd34 	bl	8000278 <__aeabi_dsub>
 8006810:	a371      	add	r3, pc, #452	; (adr r3, 80069d8 <__ieee754_pow+0x9c8>)
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	f7f9 fee3 	bl	80005e0 <__aeabi_dmul>
 800681a:	a371      	add	r3, pc, #452	; (adr r3, 80069e0 <__ieee754_pow+0x9d0>)
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	4680      	mov	r8, r0
 8006822:	4689      	mov	r9, r1
 8006824:	4620      	mov	r0, r4
 8006826:	4629      	mov	r1, r5
 8006828:	f7f9 feda 	bl	80005e0 <__aeabi_dmul>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	f7f9 fd22 	bl	800027c <__adddf3>
 8006838:	4604      	mov	r4, r0
 800683a:	460d      	mov	r5, r1
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4630      	mov	r0, r6
 8006842:	4639      	mov	r1, r7
 8006844:	f7f9 fd1a 	bl	800027c <__adddf3>
 8006848:	4632      	mov	r2, r6
 800684a:	463b      	mov	r3, r7
 800684c:	4680      	mov	r8, r0
 800684e:	4689      	mov	r9, r1
 8006850:	f7f9 fd12 	bl	8000278 <__aeabi_dsub>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4620      	mov	r0, r4
 800685a:	4629      	mov	r1, r5
 800685c:	f7f9 fd0c 	bl	8000278 <__aeabi_dsub>
 8006860:	4642      	mov	r2, r8
 8006862:	4606      	mov	r6, r0
 8006864:	460f      	mov	r7, r1
 8006866:	464b      	mov	r3, r9
 8006868:	4640      	mov	r0, r8
 800686a:	4649      	mov	r1, r9
 800686c:	f7f9 feb8 	bl	80005e0 <__aeabi_dmul>
 8006870:	a35d      	add	r3, pc, #372	; (adr r3, 80069e8 <__ieee754_pow+0x9d8>)
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	4604      	mov	r4, r0
 8006878:	460d      	mov	r5, r1
 800687a:	f7f9 feb1 	bl	80005e0 <__aeabi_dmul>
 800687e:	a35c      	add	r3, pc, #368	; (adr r3, 80069f0 <__ieee754_pow+0x9e0>)
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f7f9 fcf8 	bl	8000278 <__aeabi_dsub>
 8006888:	4622      	mov	r2, r4
 800688a:	462b      	mov	r3, r5
 800688c:	f7f9 fea8 	bl	80005e0 <__aeabi_dmul>
 8006890:	a359      	add	r3, pc, #356	; (adr r3, 80069f8 <__ieee754_pow+0x9e8>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f7f9 fcf1 	bl	800027c <__adddf3>
 800689a:	4622      	mov	r2, r4
 800689c:	462b      	mov	r3, r5
 800689e:	f7f9 fe9f 	bl	80005e0 <__aeabi_dmul>
 80068a2:	a357      	add	r3, pc, #348	; (adr r3, 8006a00 <__ieee754_pow+0x9f0>)
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	f7f9 fce6 	bl	8000278 <__aeabi_dsub>
 80068ac:	4622      	mov	r2, r4
 80068ae:	462b      	mov	r3, r5
 80068b0:	f7f9 fe96 	bl	80005e0 <__aeabi_dmul>
 80068b4:	a354      	add	r3, pc, #336	; (adr r3, 8006a08 <__ieee754_pow+0x9f8>)
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	f7f9 fcdf 	bl	800027c <__adddf3>
 80068be:	4622      	mov	r2, r4
 80068c0:	462b      	mov	r3, r5
 80068c2:	f7f9 fe8d 	bl	80005e0 <__aeabi_dmul>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4640      	mov	r0, r8
 80068cc:	4649      	mov	r1, r9
 80068ce:	f7f9 fcd3 	bl	8000278 <__aeabi_dsub>
 80068d2:	4604      	mov	r4, r0
 80068d4:	460d      	mov	r5, r1
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	4640      	mov	r0, r8
 80068dc:	4649      	mov	r1, r9
 80068de:	f7f9 fe7f 	bl	80005e0 <__aeabi_dmul>
 80068e2:	2200      	movs	r2, #0
 80068e4:	e9cd 0100 	strd	r0, r1, [sp]
 80068e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068ec:	4620      	mov	r0, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	f7f9 fcc2 	bl	8000278 <__aeabi_dsub>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068fc:	f7f9 ff9a 	bl	8000834 <__aeabi_ddiv>
 8006900:	4632      	mov	r2, r6
 8006902:	4604      	mov	r4, r0
 8006904:	460d      	mov	r5, r1
 8006906:	463b      	mov	r3, r7
 8006908:	4640      	mov	r0, r8
 800690a:	4649      	mov	r1, r9
 800690c:	f7f9 fe68 	bl	80005e0 <__aeabi_dmul>
 8006910:	4632      	mov	r2, r6
 8006912:	463b      	mov	r3, r7
 8006914:	f7f9 fcb2 	bl	800027c <__adddf3>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4620      	mov	r0, r4
 800691e:	4629      	mov	r1, r5
 8006920:	f7f9 fcaa 	bl	8000278 <__aeabi_dsub>
 8006924:	4642      	mov	r2, r8
 8006926:	464b      	mov	r3, r9
 8006928:	f7f9 fca6 	bl	8000278 <__aeabi_dsub>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	2000      	movs	r0, #0
 8006932:	493b      	ldr	r1, [pc, #236]	; (8006a20 <__ieee754_pow+0xa10>)
 8006934:	f7f9 fca0 	bl	8000278 <__aeabi_dsub>
 8006938:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800693c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	da31      	bge.n	80069aa <__ieee754_pow+0x99a>
 8006946:	4650      	mov	r0, sl
 8006948:	ec43 2b10 	vmov	d0, r2, r3
 800694c:	f000 f9c4 	bl	8006cd8 <scalbn>
 8006950:	ec51 0b10 	vmov	r0, r1, d0
 8006954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006958:	f7ff bbf1 	b.w	800613e <__ieee754_pow+0x12e>
 800695c:	4b31      	ldr	r3, [pc, #196]	; (8006a24 <__ieee754_pow+0xa14>)
 800695e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006962:	429e      	cmp	r6, r3
 8006964:	f77f af0c 	ble.w	8006780 <__ieee754_pow+0x770>
 8006968:	4b2f      	ldr	r3, [pc, #188]	; (8006a28 <__ieee754_pow+0xa18>)
 800696a:	440b      	add	r3, r1
 800696c:	4303      	orrs	r3, r0
 800696e:	d00b      	beq.n	8006988 <__ieee754_pow+0x978>
 8006970:	a327      	add	r3, pc, #156	; (adr r3, 8006a10 <__ieee754_pow+0xa00>)
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800697a:	f7f9 fe31 	bl	80005e0 <__aeabi_dmul>
 800697e:	a324      	add	r3, pc, #144	; (adr r3, 8006a10 <__ieee754_pow+0xa00>)
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	f7ff bbdb 	b.w	800613e <__ieee754_pow+0x12e>
 8006988:	4622      	mov	r2, r4
 800698a:	462b      	mov	r3, r5
 800698c:	f7f9 fc74 	bl	8000278 <__aeabi_dsub>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4640      	mov	r0, r8
 8006996:	4649      	mov	r1, r9
 8006998:	f7fa f89e 	bl	8000ad8 <__aeabi_dcmple>
 800699c:	2800      	cmp	r0, #0
 800699e:	f43f aeef 	beq.w	8006780 <__ieee754_pow+0x770>
 80069a2:	e7e5      	b.n	8006970 <__ieee754_pow+0x960>
 80069a4:	f04f 0a00 	mov.w	sl, #0
 80069a8:	e716      	b.n	80067d8 <__ieee754_pow+0x7c8>
 80069aa:	4621      	mov	r1, r4
 80069ac:	e7d2      	b.n	8006954 <__ieee754_pow+0x944>
 80069ae:	2000      	movs	r0, #0
 80069b0:	491b      	ldr	r1, [pc, #108]	; (8006a20 <__ieee754_pow+0xa10>)
 80069b2:	f7ff bb8d 	b.w	80060d0 <__ieee754_pow+0xc0>
 80069b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069ba:	f7ff bb89 	b.w	80060d0 <__ieee754_pow+0xc0>
 80069be:	4630      	mov	r0, r6
 80069c0:	4639      	mov	r1, r7
 80069c2:	f7ff bb85 	b.w	80060d0 <__ieee754_pow+0xc0>
 80069c6:	4693      	mov	fp, r2
 80069c8:	f7ff bb96 	b.w	80060f8 <__ieee754_pow+0xe8>
 80069cc:	f3af 8000 	nop.w
 80069d0:	00000000 	.word	0x00000000
 80069d4:	3fe62e43 	.word	0x3fe62e43
 80069d8:	fefa39ef 	.word	0xfefa39ef
 80069dc:	3fe62e42 	.word	0x3fe62e42
 80069e0:	0ca86c39 	.word	0x0ca86c39
 80069e4:	be205c61 	.word	0xbe205c61
 80069e8:	72bea4d0 	.word	0x72bea4d0
 80069ec:	3e663769 	.word	0x3e663769
 80069f0:	c5d26bf1 	.word	0xc5d26bf1
 80069f4:	3ebbbd41 	.word	0x3ebbbd41
 80069f8:	af25de2c 	.word	0xaf25de2c
 80069fc:	3f11566a 	.word	0x3f11566a
 8006a00:	16bebd93 	.word	0x16bebd93
 8006a04:	3f66c16c 	.word	0x3f66c16c
 8006a08:	5555553e 	.word	0x5555553e
 8006a0c:	3fc55555 	.word	0x3fc55555
 8006a10:	c2f8f359 	.word	0xc2f8f359
 8006a14:	01a56e1f 	.word	0x01a56e1f
 8006a18:	3fe00000 	.word	0x3fe00000
 8006a1c:	000fffff 	.word	0x000fffff
 8006a20:	3ff00000 	.word	0x3ff00000
 8006a24:	4090cbff 	.word	0x4090cbff
 8006a28:	3f6f3400 	.word	0x3f6f3400
 8006a2c:	652b82fe 	.word	0x652b82fe
 8006a30:	3c971547 	.word	0x3c971547

08006a34 <__ieee754_sqrt>:
 8006a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a38:	ec55 4b10 	vmov	r4, r5, d0
 8006a3c:	4e54      	ldr	r6, [pc, #336]	; (8006b90 <__ieee754_sqrt+0x15c>)
 8006a3e:	43ae      	bics	r6, r5
 8006a40:	ee10 0a10 	vmov	r0, s0
 8006a44:	462b      	mov	r3, r5
 8006a46:	462a      	mov	r2, r5
 8006a48:	4621      	mov	r1, r4
 8006a4a:	d113      	bne.n	8006a74 <__ieee754_sqrt+0x40>
 8006a4c:	ee10 2a10 	vmov	r2, s0
 8006a50:	462b      	mov	r3, r5
 8006a52:	ee10 0a10 	vmov	r0, s0
 8006a56:	4629      	mov	r1, r5
 8006a58:	f7f9 fdc2 	bl	80005e0 <__aeabi_dmul>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4620      	mov	r0, r4
 8006a62:	4629      	mov	r1, r5
 8006a64:	f7f9 fc0a 	bl	800027c <__adddf3>
 8006a68:	4604      	mov	r4, r0
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	ec45 4b10 	vmov	d0, r4, r5
 8006a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a74:	2d00      	cmp	r5, #0
 8006a76:	dc10      	bgt.n	8006a9a <__ieee754_sqrt+0x66>
 8006a78:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006a7c:	4330      	orrs	r0, r6
 8006a7e:	d0f5      	beq.n	8006a6c <__ieee754_sqrt+0x38>
 8006a80:	b15d      	cbz	r5, 8006a9a <__ieee754_sqrt+0x66>
 8006a82:	ee10 2a10 	vmov	r2, s0
 8006a86:	462b      	mov	r3, r5
 8006a88:	4620      	mov	r0, r4
 8006a8a:	4629      	mov	r1, r5
 8006a8c:	f7f9 fbf4 	bl	8000278 <__aeabi_dsub>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	f7f9 fece 	bl	8000834 <__aeabi_ddiv>
 8006a98:	e7e6      	b.n	8006a68 <__ieee754_sqrt+0x34>
 8006a9a:	151b      	asrs	r3, r3, #20
 8006a9c:	d10c      	bne.n	8006ab8 <__ieee754_sqrt+0x84>
 8006a9e:	2a00      	cmp	r2, #0
 8006aa0:	d06d      	beq.n	8006b7e <__ieee754_sqrt+0x14a>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	02d6      	lsls	r6, r2, #11
 8006aa6:	d56e      	bpl.n	8006b86 <__ieee754_sqrt+0x152>
 8006aa8:	1e44      	subs	r4, r0, #1
 8006aaa:	1b1b      	subs	r3, r3, r4
 8006aac:	f1c0 0420 	rsb	r4, r0, #32
 8006ab0:	fa21 f404 	lsr.w	r4, r1, r4
 8006ab4:	4322      	orrs	r2, r4
 8006ab6:	4081      	lsls	r1, r0
 8006ab8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006abc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006ac0:	07dd      	lsls	r5, r3, #31
 8006ac2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006ac6:	bf42      	ittt	mi
 8006ac8:	0052      	lslmi	r2, r2, #1
 8006aca:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8006ace:	0049      	lslmi	r1, r1, #1
 8006ad0:	1058      	asrs	r0, r3, #1
 8006ad2:	2500      	movs	r5, #0
 8006ad4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8006ad8:	441a      	add	r2, r3
 8006ada:	0049      	lsls	r1, r1, #1
 8006adc:	2316      	movs	r3, #22
 8006ade:	462c      	mov	r4, r5
 8006ae0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006ae4:	19a7      	adds	r7, r4, r6
 8006ae6:	4297      	cmp	r7, r2
 8006ae8:	bfde      	ittt	le
 8006aea:	1bd2      	suble	r2, r2, r7
 8006aec:	19bc      	addle	r4, r7, r6
 8006aee:	19ad      	addle	r5, r5, r6
 8006af0:	0052      	lsls	r2, r2, #1
 8006af2:	3b01      	subs	r3, #1
 8006af4:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006af8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006afc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006b00:	d1f0      	bne.n	8006ae4 <__ieee754_sqrt+0xb0>
 8006b02:	f04f 0e20 	mov.w	lr, #32
 8006b06:	469c      	mov	ip, r3
 8006b08:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006b0c:	42a2      	cmp	r2, r4
 8006b0e:	eb06 070c 	add.w	r7, r6, ip
 8006b12:	dc02      	bgt.n	8006b1a <__ieee754_sqrt+0xe6>
 8006b14:	d112      	bne.n	8006b3c <__ieee754_sqrt+0x108>
 8006b16:	428f      	cmp	r7, r1
 8006b18:	d810      	bhi.n	8006b3c <__ieee754_sqrt+0x108>
 8006b1a:	2f00      	cmp	r7, #0
 8006b1c:	eb07 0c06 	add.w	ip, r7, r6
 8006b20:	da34      	bge.n	8006b8c <__ieee754_sqrt+0x158>
 8006b22:	f1bc 0f00 	cmp.w	ip, #0
 8006b26:	db31      	blt.n	8006b8c <__ieee754_sqrt+0x158>
 8006b28:	f104 0801 	add.w	r8, r4, #1
 8006b2c:	1b12      	subs	r2, r2, r4
 8006b2e:	428f      	cmp	r7, r1
 8006b30:	bf88      	it	hi
 8006b32:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006b36:	1bc9      	subs	r1, r1, r7
 8006b38:	4433      	add	r3, r6
 8006b3a:	4644      	mov	r4, r8
 8006b3c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8006b40:	f1be 0e01 	subs.w	lr, lr, #1
 8006b44:	443a      	add	r2, r7
 8006b46:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006b4a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006b4e:	d1dd      	bne.n	8006b0c <__ieee754_sqrt+0xd8>
 8006b50:	430a      	orrs	r2, r1
 8006b52:	d006      	beq.n	8006b62 <__ieee754_sqrt+0x12e>
 8006b54:	1c5c      	adds	r4, r3, #1
 8006b56:	bf13      	iteet	ne
 8006b58:	3301      	addne	r3, #1
 8006b5a:	3501      	addeq	r5, #1
 8006b5c:	4673      	moveq	r3, lr
 8006b5e:	f023 0301 	bicne.w	r3, r3, #1
 8006b62:	106a      	asrs	r2, r5, #1
 8006b64:	085b      	lsrs	r3, r3, #1
 8006b66:	07e9      	lsls	r1, r5, #31
 8006b68:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006b6c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006b70:	bf48      	it	mi
 8006b72:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006b76:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006b7a:	461c      	mov	r4, r3
 8006b7c:	e776      	b.n	8006a6c <__ieee754_sqrt+0x38>
 8006b7e:	0aca      	lsrs	r2, r1, #11
 8006b80:	3b15      	subs	r3, #21
 8006b82:	0549      	lsls	r1, r1, #21
 8006b84:	e78b      	b.n	8006a9e <__ieee754_sqrt+0x6a>
 8006b86:	0052      	lsls	r2, r2, #1
 8006b88:	3001      	adds	r0, #1
 8006b8a:	e78b      	b.n	8006aa4 <__ieee754_sqrt+0x70>
 8006b8c:	46a0      	mov	r8, r4
 8006b8e:	e7cd      	b.n	8006b2c <__ieee754_sqrt+0xf8>
 8006b90:	7ff00000 	.word	0x7ff00000

08006b94 <fabs>:
 8006b94:	ec53 2b10 	vmov	r2, r3, d0
 8006b98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b9c:	ec43 2b10 	vmov	d0, r2, r3
 8006ba0:	4770      	bx	lr

08006ba2 <finite>:
 8006ba2:	ee10 3a90 	vmov	r3, s1
 8006ba6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8006baa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006bae:	0fc0      	lsrs	r0, r0, #31
 8006bb0:	4770      	bx	lr

08006bb2 <matherr>:
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	4770      	bx	lr
	...

08006bb8 <nan>:
 8006bb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006bc0 <nan+0x8>
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	00000000 	.word	0x00000000
 8006bc4:	7ff80000 	.word	0x7ff80000

08006bc8 <rint>:
 8006bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bca:	ec51 0b10 	vmov	r0, r1, d0
 8006bce:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8006bd2:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8006bd6:	2e13      	cmp	r6, #19
 8006bd8:	ee10 7a10 	vmov	r7, s0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4602      	mov	r2, r0
 8006be0:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8006be4:	dc58      	bgt.n	8006c98 <rint+0xd0>
 8006be6:	2e00      	cmp	r6, #0
 8006be8:	da2b      	bge.n	8006c42 <rint+0x7a>
 8006bea:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006bee:	4302      	orrs	r2, r0
 8006bf0:	d023      	beq.n	8006c3a <rint+0x72>
 8006bf2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006bf6:	4302      	orrs	r2, r0
 8006bf8:	4251      	negs	r1, r2
 8006bfa:	4311      	orrs	r1, r2
 8006bfc:	0b09      	lsrs	r1, r1, #12
 8006bfe:	0c5b      	lsrs	r3, r3, #17
 8006c00:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8006c04:	045b      	lsls	r3, r3, #17
 8006c06:	ea41 0703 	orr.w	r7, r1, r3
 8006c0a:	4b31      	ldr	r3, [pc, #196]	; (8006cd0 <rint+0x108>)
 8006c0c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006c10:	4639      	mov	r1, r7
 8006c12:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006c16:	ee10 0a10 	vmov	r0, s0
 8006c1a:	4632      	mov	r2, r6
 8006c1c:	463b      	mov	r3, r7
 8006c1e:	f7f9 fb2d 	bl	800027c <__adddf3>
 8006c22:	e9cd 0100 	strd	r0, r1, [sp]
 8006c26:	463b      	mov	r3, r7
 8006c28:	4632      	mov	r2, r6
 8006c2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c2e:	f7f9 fb23 	bl	8000278 <__aeabi_dsub>
 8006c32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c36:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8006c3a:	ec41 0b10 	vmov	d0, r0, r1
 8006c3e:	b003      	add	sp, #12
 8006c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c42:	4c24      	ldr	r4, [pc, #144]	; (8006cd4 <rint+0x10c>)
 8006c44:	4134      	asrs	r4, r6
 8006c46:	ea01 0704 	and.w	r7, r1, r4
 8006c4a:	4307      	orrs	r7, r0
 8006c4c:	d0f5      	beq.n	8006c3a <rint+0x72>
 8006c4e:	0861      	lsrs	r1, r4, #1
 8006c50:	ea03 0001 	and.w	r0, r3, r1
 8006c54:	4302      	orrs	r2, r0
 8006c56:	d00b      	beq.n	8006c70 <rint+0xa8>
 8006c58:	ea23 0101 	bic.w	r1, r3, r1
 8006c5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006c60:	2e13      	cmp	r6, #19
 8006c62:	fa43 f306 	asr.w	r3, r3, r6
 8006c66:	bf0c      	ite	eq
 8006c68:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8006c6c:	2200      	movne	r2, #0
 8006c6e:	430b      	orrs	r3, r1
 8006c70:	4619      	mov	r1, r3
 8006c72:	4b17      	ldr	r3, [pc, #92]	; (8006cd0 <rint+0x108>)
 8006c74:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006c78:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	462b      	mov	r3, r5
 8006c80:	4622      	mov	r2, r4
 8006c82:	f7f9 fafb 	bl	800027c <__adddf3>
 8006c86:	e9cd 0100 	strd	r0, r1, [sp]
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	462b      	mov	r3, r5
 8006c8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c92:	f7f9 faf1 	bl	8000278 <__aeabi_dsub>
 8006c96:	e7d0      	b.n	8006c3a <rint+0x72>
 8006c98:	2e33      	cmp	r6, #51	; 0x33
 8006c9a:	dd08      	ble.n	8006cae <rint+0xe6>
 8006c9c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006ca0:	d1cb      	bne.n	8006c3a <rint+0x72>
 8006ca2:	ee10 2a10 	vmov	r2, s0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	f7f9 fae8 	bl	800027c <__adddf3>
 8006cac:	e7c5      	b.n	8006c3a <rint+0x72>
 8006cae:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8006cb2:	f04f 34ff 	mov.w	r4, #4294967295
 8006cb6:	40f4      	lsrs	r4, r6
 8006cb8:	4220      	tst	r0, r4
 8006cba:	d0be      	beq.n	8006c3a <rint+0x72>
 8006cbc:	0861      	lsrs	r1, r4, #1
 8006cbe:	420f      	tst	r7, r1
 8006cc0:	bf1f      	itttt	ne
 8006cc2:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8006cc6:	ea27 0101 	bicne.w	r1, r7, r1
 8006cca:	4132      	asrne	r2, r6
 8006ccc:	430a      	orrne	r2, r1
 8006cce:	e7cf      	b.n	8006c70 <rint+0xa8>
 8006cd0:	08006fb8 	.word	0x08006fb8
 8006cd4:	000fffff 	.word	0x000fffff

08006cd8 <scalbn>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	ec55 4b10 	vmov	r4, r5, d0
 8006cde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	462b      	mov	r3, r5
 8006ce6:	b9b2      	cbnz	r2, 8006d16 <scalbn+0x3e>
 8006ce8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006cec:	4323      	orrs	r3, r4
 8006cee:	d03c      	beq.n	8006d6a <scalbn+0x92>
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4b33      	ldr	r3, [pc, #204]	; (8006dc0 <scalbn+0xe8>)
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	ee10 0a10 	vmov	r0, s0
 8006cfa:	f7f9 fc71 	bl	80005e0 <__aeabi_dmul>
 8006cfe:	4a31      	ldr	r2, [pc, #196]	; (8006dc4 <scalbn+0xec>)
 8006d00:	4296      	cmp	r6, r2
 8006d02:	4604      	mov	r4, r0
 8006d04:	460d      	mov	r5, r1
 8006d06:	460b      	mov	r3, r1
 8006d08:	da13      	bge.n	8006d32 <scalbn+0x5a>
 8006d0a:	a329      	add	r3, pc, #164	; (adr r3, 8006db0 <scalbn+0xd8>)
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	f7f9 fc66 	bl	80005e0 <__aeabi_dmul>
 8006d14:	e00a      	b.n	8006d2c <scalbn+0x54>
 8006d16:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006d1a:	428a      	cmp	r2, r1
 8006d1c:	d10c      	bne.n	8006d38 <scalbn+0x60>
 8006d1e:	ee10 2a10 	vmov	r2, s0
 8006d22:	462b      	mov	r3, r5
 8006d24:	4620      	mov	r0, r4
 8006d26:	4629      	mov	r1, r5
 8006d28:	f7f9 faa8 	bl	800027c <__adddf3>
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	460d      	mov	r5, r1
 8006d30:	e01b      	b.n	8006d6a <scalbn+0x92>
 8006d32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006d36:	3a36      	subs	r2, #54	; 0x36
 8006d38:	4432      	add	r2, r6
 8006d3a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006d3e:	428a      	cmp	r2, r1
 8006d40:	dd0b      	ble.n	8006d5a <scalbn+0x82>
 8006d42:	ec45 4b11 	vmov	d1, r4, r5
 8006d46:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006db8 <scalbn+0xe0>
 8006d4a:	f000 f83f 	bl	8006dcc <copysign>
 8006d4e:	a31a      	add	r3, pc, #104	; (adr r3, 8006db8 <scalbn+0xe0>)
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	ec51 0b10 	vmov	r0, r1, d0
 8006d58:	e7da      	b.n	8006d10 <scalbn+0x38>
 8006d5a:	2a00      	cmp	r2, #0
 8006d5c:	dd08      	ble.n	8006d70 <scalbn+0x98>
 8006d5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d62:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d66:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d6a:	ec45 4b10 	vmov	d0, r4, r5
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}
 8006d70:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006d74:	da0d      	bge.n	8006d92 <scalbn+0xba>
 8006d76:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006d7a:	429e      	cmp	r6, r3
 8006d7c:	ec45 4b11 	vmov	d1, r4, r5
 8006d80:	dce1      	bgt.n	8006d46 <scalbn+0x6e>
 8006d82:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8006db0 <scalbn+0xd8>
 8006d86:	f000 f821 	bl	8006dcc <copysign>
 8006d8a:	a309      	add	r3, pc, #36	; (adr r3, 8006db0 <scalbn+0xd8>)
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	e7e0      	b.n	8006d54 <scalbn+0x7c>
 8006d92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d96:	3236      	adds	r2, #54	; 0x36
 8006d98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006da0:	4620      	mov	r0, r4
 8006da2:	4629      	mov	r1, r5
 8006da4:	2200      	movs	r2, #0
 8006da6:	4b08      	ldr	r3, [pc, #32]	; (8006dc8 <scalbn+0xf0>)
 8006da8:	e7b2      	b.n	8006d10 <scalbn+0x38>
 8006daa:	bf00      	nop
 8006dac:	f3af 8000 	nop.w
 8006db0:	c2f8f359 	.word	0xc2f8f359
 8006db4:	01a56e1f 	.word	0x01a56e1f
 8006db8:	8800759c 	.word	0x8800759c
 8006dbc:	7e37e43c 	.word	0x7e37e43c
 8006dc0:	43500000 	.word	0x43500000
 8006dc4:	ffff3cb0 	.word	0xffff3cb0
 8006dc8:	3c900000 	.word	0x3c900000

08006dcc <copysign>:
 8006dcc:	ec53 2b10 	vmov	r2, r3, d0
 8006dd0:	ee11 0a90 	vmov	r0, s3
 8006dd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006dd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006ddc:	ea41 0300 	orr.w	r3, r1, r0
 8006de0:	ec43 2b10 	vmov	d0, r2, r3
 8006de4:	4770      	bx	lr
	...

08006de8 <__errno>:
 8006de8:	4b01      	ldr	r3, [pc, #4]	; (8006df0 <__errno+0x8>)
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	2000000c 	.word	0x2000000c

08006df4 <_sbrk>:
 8006df4:	4b04      	ldr	r3, [pc, #16]	; (8006e08 <_sbrk+0x14>)
 8006df6:	6819      	ldr	r1, [r3, #0]
 8006df8:	4602      	mov	r2, r0
 8006dfa:	b909      	cbnz	r1, 8006e00 <_sbrk+0xc>
 8006dfc:	4903      	ldr	r1, [pc, #12]	; (8006e0c <_sbrk+0x18>)
 8006dfe:	6019      	str	r1, [r3, #0]
 8006e00:	6818      	ldr	r0, [r3, #0]
 8006e02:	4402      	add	r2, r0
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	4770      	bx	lr
 8006e08:	20003e84 	.word	0x20003e84
 8006e0c:	20004124 	.word	0x20004124

08006e10 <_init>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	bf00      	nop
 8006e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e16:	bc08      	pop	{r3}
 8006e18:	469e      	mov	lr, r3
 8006e1a:	4770      	bx	lr

08006e1c <_fini>:
 8006e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1e:	bf00      	nop
 8006e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e22:	bc08      	pop	{r3}
 8006e24:	469e      	mov	lr, r3
 8006e26:	4770      	bx	lr
